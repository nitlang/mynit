#include "nit.common.h"
extern const int COLOR_range__Range___first;
val* range__Range__first(val* self);
extern const int COLOR_range__Range___last;
val* range__Range__last(val* self);
extern const int COLOR_range__Range___after;
val* range__Range__after(val* self);
extern const int COLOR_abstract_collection__Collection_FT0;
extern const int COLOR_kernel__Comparable___62d_61d;
extern const int COLOR_kernel__Comparable___60d_61d;
short int range__Range__has(val* self, val* p0);
extern const int COLOR_kernel__Object___61d_61d;
extern const int COLOR_abstract_collection__Collection__is_empty;
short int range__Range__has_only(val* self, val* p0);
extern const int COLOR_abstract_collection__Collection__has;
long range__Range__count(val* self, val* p0);
val* NEW_range__IteratorRange(const struct type* type);
extern const int COLOR_range__IteratorRangerange__Range_FT0;
extern const int COLOR_range__IteratorRange__init;
void CHECK_NEW_range__IteratorRange(val*);
val* range__Range__iterator(val* self);
extern const int COLOR_kernel__Discrete__distance;
extern const struct type type_kernel__Int;
long range__Range__length(val* self);
short int range__Range__is_empty(val* self);
extern const int COLOR_range__Range_FT0;
extern const int COLOR_kernel__Discrete__succ;
void range__Range__init(val* self, val* p0, val* p1);
extern const int COLOR_kernel__Discrete__prec;
void range__Range__without_last(val* self, val* p0, val* p1);
extern const int COLOR_range__IteratorRange___item;
val* range__IteratorRange__item(val* self);
extern const int COLOR_range__IteratorRange___range;
extern const int COLOR_range__Range__after;
extern const int COLOR_kernel__Comparable___60d;
short int range__IteratorRange__is_ok(val* self);
extern const int COLOR_range__IteratorRange_FT0;
void range__IteratorRange__next(val* self);
extern const int COLOR_range__Rangerange__IteratorRange_FT0;
extern const int COLOR_abstract_collection__Collection__first;
void range__IteratorRange__init(val* self, val* p0);
val* NEW_range__Range(const struct type* type);
extern const struct type type_range__Rangekernel__Int;
extern const int COLOR_range__Range__without_last;
void CHECK_NEW_range__Range(val*);
val* range__Int__times(long self);
