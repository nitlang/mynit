$ // This file is part of NIT ( http://www.nitlanguage.org ).
$ //
$ // Copyright 2008 Jean Privat <jean@pryen.org>
$ // Based on algorithms developped for ( http://www.sablecc.org/ ).
$ //
$ // Licensed under the Apache License, Version 2.0 (the "License");
$ // you may not use this file except in compliance with the License.
$ // You may obtain a copy of the License at
$ //
$ //     http://www.apache.org/licenses/LICENSE-2.0
$ //
$ // Unless required by applicable law or agreed to in writing, software
$ // distributed under the License is distributed on an "AS IS" BASIS,
$ // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
$ // See the License for the specific language governing permissions and
$ // limitations under the License.

$ template make_abs_prods()
$ set baseprod = {//prod/@ename}

$ foreach {//prod}
class @ename super Prod end
$ end

$ foreach {//alt}
class @ename
	super ${../@ename}
$ foreach {elem}
$   if @is_list
    var n_@name: List[@etype] = new List[@etype]
$   else
$   if @modifier
    var n_@name: nullable @etype = null
$   else
    var n_@name: @etype
$   end
$   end
$ end
end
$ end

class Start
	super Prod
    var n_base: nullable $baseprod
    var n_eof: EOF
    init(
        nbase: nullable $baseprod,
        neof: EOF)
    do
        n_base = nbase
        n_eof = neof
    end

end
$ end template

$ template make_prods()
$ set baseprod = {//prod/@ename}
$ foreach {//alt}
redef class @ename
	private init empty_init do end

$ if {count(elem)!=0}
	init init_${translate(@ename,"ABCDEFGHIJKLMNOPQRSTUVWXYZ","abcdefghijklmnopqrstuvwxyz")} (
$ foreach {elem}
$   if {@is_list}
		n@{name}: Collection[Object][-sep ','-] # Should be Collection[@etype]
$   else
		n@{name}: nullable @etype[-sep ','-]
$   end
$ end
	)
$ else
	init init_${translate(@ename,"ABCDEFGHIJKLMNOPQRSTUVWXYZ","abcdefghijklmnopqrstuvwxyz")}
$ end
	do
		empty_init
$ foreach {elem}
$   if @is_list
		n_@{name}.unsafe_add_all(n@{name})
$   else
$   if {@modifier}
		n_@name = n@{name}
		if n@{name} != null then n@{name}.parent = self
$   else
		n_@name = n@{name}.as(not null)
		n@{name}.parent = self
$   end
$   end
$ end
	end

	redef fun replace_child(old_child: PNode, new_child: nullable PNode)
	do
$ foreach {elem}
$   if @is_list
		if n_@{name}.replace_child(old_child, new_child) then return
$   else
		if n_@{name} == old_child then
$   if @modifier
			n_@{name} = new_child.as(nullable @etype)
$   else
			n_@{name} = new_child.as(@etype)
$   end
			return
		end
$   end
$ end foreach
	end

$   foreach {elem}
$     if @is_list
$     else
	redef fun n_@{name}=(node)
	do
		super
$       if @modifier
		if node != null then node.parent = self
$       else
		node.parent = self
$       end
	end
$     end
$   end foreach


	redef fun visit_all(v: Visitor)
	do
$   foreach {elem}
$     if @is_list
		n_@{name}.visit_all(v)
$     else
		v.enter_visit(n_@{name})
$     end
$   end foreach
	end
end
$ end foreach

redef class Start
    redef fun replace_child(old_child: PNode, new_child: nullable PNode)
    do
        if n_base == old_child then
            if new_child == null then
            else
                new_child.parent = self
		assert new_child isa $baseprod
                n_base = new_child
            end
            old_child.parent = null
            return
	end
    end

    redef fun visit_all(v: Visitor)
    do
        if n_base != null then
            v.enter_visit(n_base.as(not null))
        end
	v.enter_visit(n_eof)
    end
end
$ end template
