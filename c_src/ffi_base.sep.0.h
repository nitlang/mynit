#include "nit.common.h"
extern const int COLOR_ffi_base__ToolContext___64dffi_language_assignation_phase;
val* ffi_base__ToolContext__ffi_language_assignation_phase(val* self);
void ffi_base__ToolContext__ffi_language_assignation_phase_61d(val* self, val* p0);
extern const int COLOR_ffi_base__FFILanguageAssignationPhase___64dlanguages;
val* ffi_base__FFILanguageAssignationPhase__languages(val* self);
void ffi_base__FFILanguageAssignationPhase__languages_61d(val* self, val* p0);
extern const int COLOR_parser_nodes__AModule__n_extern_code_blocks;
extern const int COLOR_abstract_collection__Collection__iterator;
extern const int COLOR_abstract_collection__Iterator__is_ok;
extern const int COLOR_abstract_collection__Iterator__item;
extern const int COLOR_ffi_base__FFILanguageAssignationPhase__verify_foreign_code_on_node;
extern const int COLOR_abstract_collection__Iterator__next;
void ffi_base__FFILanguageAssignationPhase__process_nmodule(val* self, val* p0);
extern const struct type type_parser_nodes__AExternPropdef;
extern const int COLOR_parser_nodes__AExternPropdef__n_extern_code_block;
void ffi_base__FFILanguageAssignationPhase__process_npropdef(val* self, val* p0);
extern const struct type type_parser_nodes__AStdClassdef;
extern const int COLOR_parser_nodes__AStdClassdef__n_extern_code_block;
void ffi_base__FFILanguageAssignationPhase__process_nclassdef(val* self, val* p0);
extern const int COLOR_ffi_base__FFILanguageAssignationPhase__languages;
extern const int COLOR_ffi_base__FFILanguage__identify_language;
extern const int COLOR_phase__Phase__toolcontext;
extern const int COLOR_parser_nodes__ANode__location;
val* string__NativeString__to_s_with_length(char* self, long p0);
extern const int COLOR_toolcontext__ToolContext__error;
extern const int COLOR_ffi_base__AExternCodeBlock__language_61d;
void ffi_base__FFILanguageAssignationPhase__verify_foreign_code_on_node(val* self, val* p0);
extern const int COLOR_ffi_base__AModule___64dffi_files;
val* ffi_base__AModule__ffi_files(val* self);
void ffi_base__AModule__ffi_files_61d(val* self, val* p0);
extern const int COLOR_parser_nodes__AExternCodeBlock__n_in_language;
extern const int COLOR_parser_nodes__AInLanguage__n_string;
extern const int COLOR_ffi_base__TString__without_quotes;
val* ffi_base__AExternCodeBlock__language_name(val* self);
extern const int COLOR_ffi_base__AExternCodeBlock__language_name;
extern const int COLOR_string__AbstractString__to_lower;
val* ffi_base__AExternCodeBlock__language_name_lowered(val* self);
extern const int COLOR_parser_nodes__AExternCodeBlock__n_extern_code_segment;
extern const int COLOR_ffi_base__TExternCodeSegment__without_guard;
val* ffi_base__AExternCodeBlock__code(val* self);
extern const int COLOR_ffi_base__AExternCodeBlock___64dlanguage;
val* ffi_base__AExternCodeBlock__language(val* self);
void ffi_base__AExternCodeBlock__language_61d(val* self, val* p0);
extern const int COLOR_abstract_collection__SimpleCollection__add;
void ffi_base__FFILanguage__init(val* self, val* p0);
short int ffi_base__FFILanguage__identify_language(val* self, val* p0);
void ffi_base__FFILanguage__compile_module_block(val* self, val* p0, val* p1, val* p2);
void ffi_base__FFILanguage__compile_extern_method(val* self, val* p0, val* p1, val* p2, val* p3);
void ffi_base__FFILanguage__compile_extern_class(val* self, val* p0, val* p1, val* p2, val* p3);
val* ffi_base__FFILanguage__get_ftype(val* self, val* p0, val* p1);
void ffi_base__FFILanguage__compile_callback(val* self, val* p0, val* p1, val* p2, val* p3);
void ffi_base__FFILanguage__compile_to_files(val* self, val* p0, val* p1);
extern const int COLOR_parser_nodes__Token__text;
extern const int COLOR_abstract_collection__Collection__length;
extern const struct type type_kernel__Int;
extern const int COLOR_string__AbstractString__substring;
val* ffi_base__TString__without_quotes(val* self);
val* ffi_base__TExternCodeSegment__without_guard(val* self);
extern const int COLOR_ffi_base__ExternFile___64dfilename;
val* ffi_base__ExternFile__filename(val* self);
void ffi_base__ExternFile__filename_61d(val* self, val* p0);
val* ffi_base__ExternFile__makefile_rule_name(val* self);
val* ffi_base__ExternFile__makefile_rule_content(val* self);
void ffi_base__ExternFile__init(val* self, val* p0);
val* NEW_array__Array(const struct type* type);
extern const struct type type_array__Arraykernel__Object;
extern const int COLOR_array__Array__with_capacity;
void CHECK_NEW_array__Array(val*);
extern const int COLOR_modelbuilder__AModule__mmodule;
extern const int COLOR_model_base__MModule__name;
extern const int COLOR_string__Object__to_s;
extern const int COLOR_nitni_base__AModule__cname;
extern const int COLOR_string__AbstractString__to_upper;
val* NEW_array__NativeArray(int length, const struct type* type);
extern const struct type type_array__NativeArraykernel__Object;
extern const int COLOR_array__Array__with_native;
extern const struct type type_array__Arraystring__String;
extern const int COLOR_array__Array__init;
extern const int COLOR_ffi_base__CCompilationUnit__write_header_to_file;
extern const struct type type_array__NativeArraystring__String;
extern const int COLOR_ffi_base__CCompilationUnit__write_body_to_file;
extern const int COLOR_c_tools__CCompilationUnit__files;
void ffi_base__CCompilationUnit__write_as_impl(val* self, val* p0, val* p1);
val* NEW_file__OFStream(const struct type* type);
extern const struct type type_file__OFStream;
extern const int COLOR_file__OFStream__open;
void CHECK_NEW_file__OFStream(val*);
extern const int COLOR_stream__OStream__write;
extern const int COLOR_c_tools__CCompilationUnit__compile_header_core;
extern const int COLOR_stream__IOS__close;
void ffi_base__CCompilationUnit__write_header_to_file(val* self, val* p0, val* p1, val* p2, val* p3);
extern const int COLOR_c_tools__CCompilationUnit__compile_body_core;
void ffi_base__CCompilationUnit__write_body_to_file(val* self, val* p0, val* p1, val* p2);
val* ffi_base__ForeignType__ctype(val* self);
void ffi_base__ForeignType__init(val* self);
