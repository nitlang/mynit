
/* This file is part of NIT ( http://www.nitlanguage.org ).
 *
 * Copyright 2008-2009 Jean Privat <jean@pryen.org>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* This grammar defines the NIT language. */
Package org.nitlanguage.gen;

/*****************************************************************************/
Helpers
/*****************************************************************************/

all = [0 .. 0xFF];
lowercase = ['a' .. 'z'];
uppercase = ['A' .. 'Z'];
digit = ['0' .. '9'];
letter = lowercase | uppercase | digit | '_';

tab = 9;
cr = 13;
lf = 10;
any = [all - [cr + lf]];
eol_helper = cr lf | cr | lf; // This takes care of different platforms

// characers inside strings and super-strings (atomaton powaa)
str_char
	= [any - [['"' + '{'] + '\']] 
	| '\' any 
	;
str_body = str_char*;

sstr_char
        = [any - [''' + '\']]
        | '\' any
        ;

sstr_body = sstr_char*;

long_str_char = str_char | cr | lf;

// because no substraction in sablecc3, complex long strings are difficult to express
ls1 = '"' '"'? ;
ls2 = '{' '{'? ;
ls12 = ls1? (ls2 ls1)* ls2?;

long_str_part
        = ls12 long_str_char
        ;

long_str_body = long_str_part*;
lsend1 = ls2? (ls1 ls2)* '"""';
lsend2 = ls1? (ls2 ls1)* '{{{';

long_sstr_char = sstr_char | cr | lf;
long_sstr_part
        = long_sstr_char
        | ''' long_sstr_char
        | ''' ''' long_sstr_char
        ;

long_sstr_body = long_sstr_part*;


extern_code_char
	= [all - ['`' + '\']]
	| '\' all
	;
extern_code_body = extern_code_char*;

/*****************************************************************************/
States
/*****************************************************************************/
initial;


/*****************************************************************************/
Tokens
/*****************************************************************************/

blank = (' ' | tab)+;

eol = eol_helper;
comment = '#' any* eol_helper?;

kwpackage = 'package';
kwmodule = 'module';
kwimport = 'import';
kwclass = 'class';
kwabstract = 'abstract';
kwinterface = 'interface';
kwenum = 'universal'|'enum';
kwend = 'end';
kwmeth = 'fun';
kwtype = 'type';
kwinit = 'init';
kwredef = 'redef';
kwis = 'is';
kwdo = 'do';
kwreadable = 'readable';
kwwritable = 'writable';
kwvar = 'var';
kwintern = 'intern';
kwextern = 'extern';
kwprotected = 'protected';
kwprivate = 'private';
kwintrude = 'intrude';
kwif = 'if';
kwthen = 'then';
kwelse = 'else';
kwwhile = 'while';
kwloop = 'loop';
kwfor = 'for';
kwin = 'in';
kwand = 'and';
kwor = 'or';
kwnot = 'not';
kwimplies = 'implies';
kwreturn = 'return';
kwcontinue = 'continue';
kwbreak = 'break';
kwabort = 'abort';
kwassert = 'assert';
kwnew = 'new';
kwisa = 'isa';
kwonce = 'once';
kwsuper = 'super';
kwself = 'self';
kwtrue = 'true';
kwfalse = 'false';
kwnull = 'null';
kwas = 'as';
kwnullable = 'nullable';
kwisset = 'isset';
kwlabel = 'label';
kwdebug = '__debug__';

opar = '(';
cpar = ')';
obra = '[';
cbra = ']';
comma = ',';
column = ':';
quad = '::';
assign = '=';
pluseq = '+=';
minuseq = '-=';
dotdotdot = '...';
dotdot = '..';
dot = '.';
plus = '+';
minus = '-';
star = '*';
slash = '/';
percent = '%';
eq = '==';
ne = '!=';
lt = '<';
le = '<=';
ll = '<<';
gt = '>';
ge = '>=';
gg = '>>';
starship = '<=>';
bang='!';
at='@';

classid = uppercase letter*;
id = lowercase letter*;
attrid = '_' lowercase letter*;

number = digit+;
float = digit* '.' digit+;
string = '"' str_body '"' | '"' '"' '"' long_str_body lsend1 | ''' ''' ''' long_sstr_body ''' ''' ''';
start_string = '"' str_body '{' | '"' '"' '"' long_str_body lsend2;
mid_string = '}' str_body '{' | '}' '}' '}' long_str_body lsend2;
end_string = '}' str_body '"' | '}' '}' '}' long_str_body lsend1;
char = (''' [[any - '''] - '\'] ''') | (''' '\' any ''');
bad_string = ('"'|'}') str_body | '"' '"' '"' long_str_body | ''' ''' ''' long_sstr_body;
bad_char = ''' '\'? any;

extern_code_segment = '`' '{' extern_code_body '`' '}';

/*****************************************************************************/
Ignored Tokens
/*****************************************************************************/

blank;

/*****************************************************************************/
Productions
/*****************************************************************************/

/* MODULES *******************************************************************/
module
	= moduledecl? [imports]:import* [extern_bodies]:extern_code_body* [classdefs]:classdef* implicit_top_class? implicit_main_class? {-> New module(moduledecl, [imports.import], [extern_bodies.extern_code_block], [classdefs.classdef,implicit_top_class.classdef,implicit_main_class.classdef])};

moduledecl
	= [doc]:no kwmodule no module_name annotation_withend? [n2]:n1 {-> New moduledecl(doc.doc, kwmodule, module_name, annotation_withend.annotations)};

import
	= {std} [doc]:no visibility kwimport no module_name annotation_withend? [n2]:n1 {-> New import.std(visibility, kwimport, module_name, annotation_withend.annotations)}
	| {no} [doc]:no visibility kwimport no kwend [n2]:n1 {-> New import.no(visibility, kwimport, kwend)}
	;

implicit_top_class {-> classdef}
	= propdefs_toplevel+ {-> New classdef.top([propdefs_toplevel.propdef])};

implicit_main_class {-> classdef?}
	= implicit_main_meth {-> New classdef.main([implicit_main_meth.propdef])}
	| {null} n {-> Null}
	;
implicit_main_meth {-> propdef}
	= [doc]:no stmts {-> New propdef.main_meth(Null, stmts.expr)}
	| {n} [doc]:no stmtsn {-> New propdef.main_meth(Null, stmtsn.expr)}
	;

/* CLASSES *******************************************************************/
classdef
	= [doc]:no redef visibility classkind no qualified? classid formaldefs? line_annotations_forclass? extern_code_block? [superclasses]:superclass* propdefs* [n2]:no kwend {-> New classdef.std(doc.doc, redef.kwredef, visibility, classkind, classid, [formaldefs.formaldef], line_annotations_forclass.annotations, extern_code_block, [superclasses.superclass], [propdefs.propdef], kwend)};
redef {-> kwredef?}
	= kwredef? {-> kwredef};
classkind
	= {concrete} kwclass
	| {abstract} kwabstract kwclass
	| {interface} kwinterface
	| {enum} kwenum
	| {extern} kwextern kwclass?
	;

formaldefs {-> formaldef*}
	= obra no formaldef formaldefs_tail* [n2]:no cbra {-> [formaldef, formaldefs_tail.formaldef]};
formaldefs_tail {-> formaldef}
	= comma no formaldef {-> formaldef};
formaldef
	= classid annotations? typing? {-> New formaldef(classid, typing.type, annotations)};

superclass {-> superclass}
	= {super} no kwsuper [n2]:no type annotation_withend? {-> New superclass(kwsuper, type, annotation_withend.annotations)}
	;

propdefs~toplevel {-> propdef}
	= propdef~toplevel n1 {-> propdef~toplevel.propdef}
	;
propdef~toplevel {-> propdef}
	= {meth} [doc]:no redef visibility kwmeth methid signature annotation_noend? kwdo stmtso kwend? {-> New propdef.concrete_meth(doc.doc, redef.kwredef, visibility, kwmeth, methid, signature, annotation_noend.annotations, stmtso.expr)}
	| {assign_return} [doc]:no redef visibility kwmeth methid signature_withret assign no assign_return {-> New propdef.concrete_meth(doc.doc, redef.kwredef, visibility, kwmeth, methid, signature_withret.signature, Null, assign_return.expr)}
	| {nobody} [doc]:no redef visibility kwmeth methid signature annotation_withend {-> New propdef.deferred_meth(doc.doc, redef.kwredef, visibility, kwmeth, methid, signature.signature, annotation_withend.annotations)}
!toplevel| {deferred} [doc]:no redef visibility kwmeth methid signature kwis kwabstract {-> New propdef.deferred_meth(doc.doc, redef.kwredef, visibility, kwmeth, methid, signature.signature, Null)}
!toplevel| {intern} [doc]:no redef visibility kwmeth methid signature kwis kwintern {-> New propdef.intern_meth(doc.doc, redef.kwredef, visibility, kwmeth, methid, signature.signature)}
	| {extern} [doc]:no redef visibility kwmeth methid signature kwis kwextern string? extern_calls? extern_code_block? {-> New propdef.extern_meth(doc.doc, redef.kwredef, visibility, kwmeth, methid, signature.signature, string, extern_calls, extern_code_block)}
	| {extern_implicit} [doc]:no redef visibility kwmeth methid signature extern_calls? extern_code_block {-> New propdef.extern_meth(doc.doc, redef.kwredef, visibility, kwmeth, methid, signature.signature, Null, extern_calls, extern_code_block)}
!toplevel| {var} [doc]:no readable? writable? redef visibility kwvar attrid typing? {-> New propdef.attr(doc.doc, readable.able, writable.able, redef.kwredef, visibility, kwvar, attrid, Null, typing.type, Null, Null)}
!toplevel| {var2} [doc]:no readable? writable? redef visibility kwvar attrid typing? assign [n2]:no expr {-> New propdef.attr(doc.doc, readable.able, writable.able, redef.kwredef, visibility, kwvar, attrid, Null, typing.type, Null, expr)}
!toplevel| {var3} [doc]:no redef visibility kwvar id typing? writable2? annotation_withend? {-> New propdef.attr(doc.doc, Null, writable2.able, redef.kwredef, visibility, kwvar, Null, id, typing.type, annotation_withend.annotations, Null)}
!toplevel| {var4} [doc]:no redef visibility kwvar id typing? writable2? assign [n2]:no expr annotation_withend? {-> New propdef.attr(doc.doc, Null, writable2.able, redef.kwredef, visibility, kwvar, Null, id, typing.type, annotation_withend.annotations, expr.expr)}
!toplevel| {init} [doc]:no redef visibility kwinit methid? signature annotation_noend? kwdo stmtso kwend? {-> New propdef.concrete_init(doc.doc, redef.kwredef, visibility, kwinit, methid, signature, annotation_noend.annotations, stmtso.expr)}
!toplevel| {type} [doc]:no redef visibility kwtype classid typing annotation_withend? {-> New propdef.type(doc.doc, redef.kwredef, visibility, kwtype, classid, typing.type, annotation_withend.annotations)}
!toplevel| {extern_init} [doc]:no redef visibility kwnew methid? signature kwis kwextern string? extern_calls? extern_code_block? {-> New propdef.extern_init(doc.doc, redef.kwredef, visibility, kwnew, methid, signature, string, extern_calls, extern_code_block)}
!toplevel| {extern_init_implicit} [doc]:no redef visibility kwnew methid? signature string? extern_calls? extern_code_block {-> New propdef.extern_init(doc.doc, redef.kwredef, visibility, kwnew, methid, signature, string, extern_calls, extern_code_block)}
	;
annotation_withend {-> annotations}
	= {oneliner} kwis many_annotations {-> many_annotations.annotations}
	| {more} kwis n1 line_annotations kwend {-> line_annotations.annotations}
	;
annotation_noend {-> annotations}
	= {oneliner} kwis many_annotations {-> many_annotations.annotations}
	| {more} kwis n1 line_annotations {-> line_annotations.annotations}
	;
readable {-> able}
	= redef kwreadable {-> New able.read(redef.kwredef, kwreadable)}
	;
writable {-> able}
	= redef kwwritable {-> New able.write(redef.kwredef, Null, kwwritable)}
	;
writable2 {-> able}
	= redef visibility kwwritable {-> New able.write(redef.kwredef, visibility, kwwritable)}
	;

visibility
	= {public} {-> New visibility.public()}
	| {private} kwprivate no {-> New visibility.private(kwprivate)}
	| {protected} kwprotected no {-> New visibility.protected(kwprotected)}
	| {intrude} kwintrude no {-> New visibility.intrude(kwintrude)}
	;

methid {-> methid}
	= {id} id {-> New methid.id(id)}
	| {plus} plus {-> New methid.plus(plus)}
	| {minus} minus {-> New methid.minus(minus)}
	| {star} star {-> New methid.star(star)}
	| {slash} slash {-> New methid.slash(slash)}
	| {percent} percent {-> New methid.percent(percent)}
	| {eq} eq {-> New methid.eq(eq)}
	| {ne} ne {-> New methid.ne(ne)}
	| {le} le {-> New methid.le(le)}
	| {ge} ge {-> New methid.ge(ge)}
	| {lt} lt {-> New methid.lt(lt)}
	| {gt} gt {-> New methid.gt(gt)}
	| {ll} ll {-> New methid.ll(ll)}
	| {gg} gg {-> New methid.gg(gg)}
	| {bra} obra cbra {-> New methid.bra(obra, cbra)}
	| {starship} starship {-> New methid.starship(starship)}
	| {assign} id assign {-> New methid.assign(id, assign)}
	| {braassign} obra cbra assign {-> New methid.braassign(obra, cbra, assign)}
	;

signature~withret {-> signature}
	= opar no params? cpar typing [no2]:no {-> New signature(opar, [params.param], cpar, typing.type)}
!withret| {noret} opar no params? cpar [no2]:no {-> New signature(opar, [params.param], cpar, Null)}
	| {nopar} typing no {-> New signature(Null, [], Null, typing.type)}
!withret| {noparnoret} no {-> New signature(Null, [], Null, Null)}
	;

params {-> param*} 
	= param params_tail* [n2]:no {-> [param, params_tail.param] }
	;
params_tail {-> param}
	= comma no param {-> param};
param
	= {untyped} id annotations? {-> New param(id, Null, Null, annotations)}
	| id annotations? typing dotdotdot? {-> New param(id, typing.type, dotdotdot, annotations)}
	;

assign_return{-> expr}
	= expr_final {-> New expr.return(Null, expr_final.expr)}
	;

extern_calls {-> extern_calls}
	= kwimport no extern_call extern_call_tail* {-> New extern_calls( kwimport, [extern_call, extern_call_tail.extern_call] )}
	;
extern_call_tail {-> extern_call}
	= comma no extern_call {-> extern_call};
extern_call {-> extern_call}
    = {prop} extern_call_prop {-> extern_call_prop.extern_call}
    | {cast} extern_call_cast {-> extern_call_cast.extern_call}
	| {super} kwsuper {-> New extern_call.super( kwsuper )}
    ;
extern_call_prop {-> extern_call}
    = {local} methid {-> New extern_call.local_prop( methid )}
	| {full} type quad methid {-> New extern_call.full_prop( type, Null, methid )}
	| {full2} type dot methid {-> New extern_call.full_prop( type, dot, methid )}
	| {init} type {-> New extern_call.init_prop( type )}
	;
extern_call_cast {-> extern_call}
    = {as_cast} [from_type]:type dot? kwas [n2]:no opar [n3]:no [to_type]:type [n4]:no cpar {-> New extern_call.cast_as(from_type, dot, kwas, to_type)}
	| {as_nullable} type dot? kwas [n2]:no kwnullable {-> New extern_call.as_nullable( type, kwas, kwnullable)}
	| {as_not_nullable} type dot? kwas [n2]:no kwnot [n3]:no kwnullable {-> New extern_call.as_not_nullable( type, kwas, kwnot, kwnullable)}
	;

in_language = kwin string;
extern_code_block = in_language? extern_code_segment;
extern_code_body {-> extern_code_block} = no extern_code_block {-> extern_code_block};

/* TYPES *********************************************************************/
type~nobra~nopar {-> type}
	= {simple} kwnullable? classid annotations~nopar? {-> New type(kwnullable, classid, [], annotations~nopar.annotations)}
!nobra	| {generic} kwnullable? classid obra no types [n2]:no cbra annotations~nopar? {-> New type(kwnullable, classid, [types.type], annotations~nopar.annotations)}
	;
types {-> type*} 
	= type types_tail* {-> [type, types_tail.type]};
types_tail {-> type}
	= comma no type {-> type};
typing {-> type}
	= column no type {-> type};

/* STATMENTS *****************************************************************/
stmtso~withelse~withend {-> expr?}
	= {block} n stmtsnend {-> stmtsnend.expr}
	| {emptyblock} n kwend {-> New expr.block([], kwend)}
	| {emptyoneline} kwend {-> New expr.block([], kwend)}
!withend| {oneline} stmt~withelse {-> stmt~withelse.expr}
	;
stmts {-> expr}
	= stmt stmts_tail* {-> New expr.block([stmt.expr, stmts_tail.expr], Null)};
stmtsn {-> expr}
	= stmt stmts_tail* n {-> New expr.block([stmt.expr, stmts_tail.expr], Null)};
stmtsnend {-> expr}
	= stmt stmts_tail* n kwend {-> New expr.block([stmt.expr, stmts_tail.expr], kwend)};
stmts_tail {-> expr}
	= n stmt {-> stmt.expr};
stmt~withelse~noexpr~nopar {-> expr}
	= {vardecl} vardecl~withelse {-> vardecl~withelse.expr}
	| {assign} assignment~withelse~nopar {-> assignment~withelse~nopar.expr}
	| {return} kwreturn expr_final~withelse? {-> New expr.return(kwreturn, expr_final~withelse.expr)}
	| {break} kwbreak label? expr_final~withelse? {-> New expr.break(kwbreak, label, expr_final~withelse.expr)}
	| {abort} kwabort {-> New expr.abort(kwabort)}
	| {continue} kwcontinue label? expr_final~withelse? {-> New expr.continue(kwcontinue, label, expr_final~withelse.expr)}
	| {do} do~withelse {-> do~withelse.expr}
!noexpr	| {if} if~withelse {-> if~withelse.expr}
	| {while} while~withelse {-> while~withelse.expr}
	| {loop} loop~withelse {-> loop~withelse.expr}
	| {for} for~withelse {-> for~withelse.expr}
	| {assert} assert~withelse {-> assert~withelse.expr}
!noexpr	| {call} recv qualified? id args_nopar {-> New expr.call(recv.expr, id, args_nopar.exprs)}
!noexpr	| {super} qualified? kwsuper args_nopar {-> New expr.super(qualified, kwsuper, args_nopar.exprs)}
!noexpr	| {init} recv qualified? kwinit args_nopar {-> New expr.init(recv.expr, kwinit, args_nopar.exprs)}
	| {debug_type_is} kwdebug kwtype type column expr_final~withelse {-> New expr.debug_type(kwdebug, kwtype, expr_final~withelse.expr, type) }
	;

label= kwlabel id;

assign_continue~withelse{-> expr}
	= expr_final~withelse {-> New expr.continue(Null, Null, expr_final~withelse.expr)}
	;

vardecl~withelse{-> expr}
	= kwvar id annotations? typing? {-> New expr.vardecl(kwvar, id, typing.type, Null, Null, annotations)}
	| {assign} kwvar id annotations? typing? assign no expr_final~withelse {-> New expr.vardecl(kwvar, id, typing.type, assign, expr_final~withelse.expr, annotations)}
	;

assignment~withelse~nopar {-> expr}
	= {attr} recv~nopar qualified? attrid assign expr_final~withelse {-> New expr.attr_assign(recv~nopar.expr, attrid, assign, expr_final~withelse.expr)}
	| {call} recv~nopar qualified? id args assign expr_final~withelse {-> New expr.call_assign(recv~nopar.expr, id, args.exprs, assign,  expr_final~withelse.expr)}
	| {bra} expr_atom~nopar braargs assign expr_final~withelse {-> New expr.bra_assign(expr_atom~nopar.expr, braargs.exprs, assign,  expr_final~withelse.expr)}
	| {attr_re} recv~nopar qualified? attrid assign_op expr_final~withelse {-> New expr.attr_reassign(recv~nopar.expr, attrid, assign_op,  expr_final~withelse.expr)}
	| {call_re} recv~nopar qualified? id args assign_op expr_final~withelse {-> New expr.call_reassign(recv~nopar.expr, id, args.exprs, assign_op,  expr_final~withelse.expr)}
	| {bra_re} expr_atom~nopar braargs assign_op expr_final~withelse {-> New expr.bra_reassign(expr_atom~nopar.expr, braargs.exprs, assign_op,  expr_final~withelse.expr)}
	;
assign_op
	= {plus} pluseq
	| {minus} minuseq
	;

do~withelse {-> expr}
	= kwdo stmtso_withend label {-> New expr.do(kwdo, stmtso_withend.expr, label)}
	| {nolabel} kwdo stmtso~withelse {-> New expr.do(kwdo, stmtso~withelse.expr, Null)}
	;

if~withelse {-> expr}
	= {onelineelse} kwif no expr [n2]:no kwthen stmt_withelse kwelse stmtso~withelse {-> New expr.if(kwif, expr, stmt_withelse.expr, stmtso~withelse.expr)}
!withelse	| {oneline} kwif no expr [n2]:no kwthen stmt {-> New expr.if(kwif, expr, stmt.expr, Null)}
!withelse	| {block} kwif no expr [n2]:no kwthen [n3]:n stmtsn elsepartblock {-> New expr.if(kwif, expr, stmtsn.expr, elsepartblock.expr)}
!withelse	| {emptyblock} kwif no expr [n2]:no kwthen [n3]:n? elsepartblock {-> New expr.if(kwif, expr, Null, elsepartblock.expr)}
	;
elsepartblock {-> expr?}
	= {else} kwelse stmtso {-> stmtso.expr}
	| {empty} kwend {-> New expr.block([], kwend)}
	;

loop~withelse {-> expr}
	= kwloop stmtso_withend label {-> New expr.loop(kwloop, stmtso_withend.expr, label)}
	| {nolabel} kwloop stmtso~withelse {-> New expr.loop(kwloop, stmtso~withelse.expr, Null)}
	;

while~withelse {-> expr}
	= kwwhile no expr [n2]:no kwdo stmtso_withend label {-> New expr.while(kwwhile, expr, kwdo, stmtso_withend.expr, label)}
	| {nolabel} kwwhile no expr [n2]:no kwdo stmtso~withelse {-> New expr.while(kwwhile, expr, kwdo, stmtso~withelse.expr, Null)}
	;

for~withelse {-> expr}
	= kwfor no [ids]:idlist [n2]:no kwin [n3]:no expr [n4]:no kwdo stmtso_withend label {-> New expr.for(kwfor, [ids.id], expr, kwdo, stmtso_withend.expr, label)}
	| {nolabel} kwfor no [ids]:idlist [n2]:no kwin [n3]:no expr [n4]:no kwdo stmtso~withelse {-> New expr.for(kwfor, [ids.id], expr, kwdo, stmtso~withelse.expr, Null)}
	;

assert~withelse {-> expr}
	= {else} kwassert assertid? expr_final_withelse kwelse stmtso~withelse {-> New expr.assert(kwassert, assertid.id, expr_final_withelse.expr, stmtso~withelse.expr)}
!withelse| {noelse} kwassert assertid? expr_final {-> New expr.assert(kwassert, assertid.id, expr_final.expr, Null)}
	;
assertid {-> id}
	= id column {-> id};

/* EXPRESSIONS ***************************************************************/
expr_final~nopar~withelse~nobra {-> expr}
	= expr~nopar~nobra {-> expr~nopar~nobra.expr}
	;

expr~nopar~nobra {-> expr}
	= expr_and~nopar~nobra {-> expr_and~nopar~nobra.expr}
	| {ifexpr} kwif [n1]:no expr [n2]:no kwthen [n3]:no [then]:expr [n4]:no kwelse [n5]:no [else]:expr~nopar~nobra {-> New expr.ifexpr(kwif, expr, kwthen, then, kwelse, else.expr)}
	;

expr_and~nopar~nobra {-> expr}
	= expr_not~nopar~nobra {-> expr_not~nopar~nobra.expr}
	| {:or} expr_and~nopar~nobra :kwor :no expr_not~nopar~nobra
	| {:and} expr_and~nopar~nobra :kwand :no expr_not~nopar~nobra
	| {:or_else} expr_and~nopar~nobra :kwor :kwelse :no expr_not~nopar~nobra
	| {:implies} expr_and~nopar~nobra :kwimplies :no expr_not~nopar~nobra
	;

expr_not~nopar~nobra {-> expr}
	= expr_eq~nopar~nobra {-> expr_eq~nopar~nobra.expr}
	| {not} kwnot no expr_not~nopar~nobra {-> New expr.not(kwnot, expr_not~nopar~nobra.expr)}
	;

expr_eq~nopar~nobra {-> expr}
	= expr_add~nopar~nobra {-> expr_add~nopar~nobra.expr}
	| {:eq} expr_add~nopar~nobra :eq :no [expr2]:expr_add~nopar~nobra
	| {:ne} expr_add~nopar~nobra :ne :no [expr2]:expr_add~nopar~nobra
	| {:lt} expr_add~nopar~nobra :lt :no [expr2]:expr_add~nopar~nobra
	| {:le} expr_add~nopar~nobra :le :no [expr2]:expr_add~nopar~nobra
	| {:ll} expr_eq~nopar~nobra :ll :no [expr2]:expr_add~nopar~nobra
	| {:gt} expr_add~nopar~nobra :gt :no [expr2]:expr_add~nopar~nobra
	| {:ge} expr_add~nopar~nobra :ge :no [expr2]:expr_add~nopar~nobra
	| {:gg} expr_eq~nopar~nobra :gg :no [expr2]:expr_add~nopar~nobra
	| {:starship} expr_add~nopar~nobra :starship :no [expr2]:expr_add~nopar~nobra
	| {:isa} expr_add~nopar~nobra :kwisa :no type~nobra
	;

expr_add~nopar~nobra {-> expr}
	=  expr_mul~nopar~nobra {-> expr_mul~nopar~nobra.expr}
	| {:plus} expr_add~nopar~nobra :plus :no [expr2]:expr_mul~nopar~nobra
	| {:minus} expr_add~nopar~nobra :minus :no [expr2]:expr_mul~nopar~nobra
	;

expr_mul~nopar~nobra {-> expr}
	= expr_minus~nopar~nobra {-> expr_minus~nopar~nobra.expr}
	| {:star} expr_mul~nopar~nobra :star :no [expr2]:expr_minus~nopar~nobra
	| {:slash} expr_mul~nopar~nobra :slash :no [expr2]:expr_minus~nopar~nobra
	| {:percent} expr_mul~nopar~nobra :percent :no [expr2]:expr_minus~nopar~nobra
	;

expr_minus~nopar~nobra {-> expr}
	= expr_new~nopar~nobra {-> expr_new~nopar~nobra.expr}
	| {:uminus} minus :no expr_minus~nopar~nobra
	| {:once} kwonce :no expr_minus~nopar~nobra
	;

expr_new~nopar~nobra {-> expr}
	= expr_atom~nopar~nobra {-> expr_atom~nopar~nobra.expr}
	| {new} kwnew no type~nobra_nopar args {-> New expr.new(kwnew, type~nobra_nopar.type, Null, args.exprs)}
	| {isset_attr} kwisset recv~nopar~nobra qualified? attrid {-> New expr.isset_attr(kwisset, recv~nopar~nobra.expr, attrid)}
	;

expr_atom~nopar~nobra {-> expr}
	= {attr} recv~nopar~nobra qualified? attrid {-> New expr.attr(recv~nopar~nobra.expr, attrid)}
	| {call} recv~nopar~nobra qualified? id args {-> New expr.call(recv~nopar~nobra.expr, id, args.exprs)}
	| {super} qualified? kwsuper args {-> New expr.super(qualified, kwsuper, args.exprs)}
	| {init} recv~nopar~nobra kwinit args {-> New expr.init(recv~nopar~nobra.expr, kwinit, args.exprs)}
!nobra	| {bra} expr_atom~nopar braargs {-> New expr.bra(expr_atom~nopar.expr, braargs.exprs)}
	| {new} kwnew no type~nobra_nopar dot [n2]:no qualified? id args {-> New expr.new(kwnew, type~nobra_nopar.type, id, args.exprs)}
// !nopar to unambiguise 'foo[5].bar' between '(foo[5]).bar' and 'foo([5].bar),
!nobra!nopar	| {range} obra no expr [n2]:no dotdot [n3]:no [expr2]:expr_nobra [n4]:no cbra annotations? {-> New expr.crange(obra, expr, expr2.expr, cbra, annotations)}
!nobra!nopar	| {orange} obra no expr [n2]:no dotdot [n3]:no [expr2]:expr_nobra [n4]:no [cbra]:obra annotations? {-> New expr.orange(obra, expr, expr2.expr, cbra, annotations)}
!nobra!nopar	| {array} braargs annotations? {-> New expr.array(braargs.exprs, annotations)}
	| {self} kwself annotations? {-> New expr.self(kwself, annotations)}
	| {true} kwtrue annotations? {-> New expr.true(kwtrue, annotations)}
	| {false} kwfalse annotations? {-> New expr.false(kwfalse, annotations)}
	| {null} kwnull annotations? {-> New expr.null(kwnull, annotations)}
	| {int} number annotations? {-> New expr.int(number, annotations)}
	| {float} float annotations? {-> New expr.float(float, annotations)}
	| {char} char annotations? {-> New expr.char(char, annotations)}
	| {string} string annotations? {-> New expr.string(string, annotations)}
	| {superstring} superstring  {-> superstring.expr}
!nopar	| {par} opar no expr [n2]:no cpar annotations? {-> New expr.par(opar, expr, cpar, annotations)}
        | {as_cast} expr_atom~nopar~nobra dot no kwas [n2]:no opar [n3]:no type [n4]:no cpar {-> New expr.as_cast(expr_atom~nopar~nobra.expr, kwas, opar, type, cpar)}
        | {as_notnull} expr_atom~nopar~nobra dot no kwas [n2]:no opar [n3]:no kwnot [n4]:no kwnull [n5]:no cpar {-> New expr.as_notnull(expr_atom~nopar~nobra.expr, kwas, opar, kwnot, kwnull, cpar)}
	;

superstring {-> expr} 
	= superstring_start superstring_middle* superstring_end annotations? {-> New expr.superstring([superstring_start.expr, superstring_middle.expr, superstring_end.expr], annotations)};
superstring_start {-> expr*}
	= start_string_p no expr [n2]:no {-> [start_string_p.expr, expr]};
start_string_p {-> expr}
	= start_string {-> New expr.start_string(start_string)};
superstring_middle {-> expr*}
	= mid_string_p no expr [n2]:no {-> [mid_string_p.expr, expr]};
mid_string_p {-> expr}
	= mid_string {-> New expr.mid_string(mid_string)};
superstring_end {-> expr}
	= end_string {-> New expr.end_string(end_string)};

/* ANNOTATIONS *******************************************************************/

annotations~nopar {-> annotations}
	= {one} at one_annotation~nopar {-> New annotations(at, Null, [one_annotation~nopar.annotation], Null)}
	| {many} at opar no annotation_list [n2]:no cpar {-> New annotations(at, opar, [annotation_list.annotation], cpar)}
	;

one_annotation~nopar {-> annotation}
	= {alone} atid annotations~nopar? {-> New annotation(atid, Null, [], Null, annotations~nopar.annotations)}
// !nopar to unambiguise 'new T@foo(bar)' between 'new T@(foo(bar))' and 'new (T@foo)(bar)'
!nopar	| {args} atid opar no at_args [n2]:no cpar annotations~nopar? {-> New annotation(atid, opar, [at_args.at_arg], cpar, annotations~nopar.annotations)}
	;

many_annotations {-> annotations}
	= {many} annotation_list {-> New annotations(Null, Null, [annotation_list.annotation], Null)}
	;

annotation_list {-> annotation*}
	= {many} one_annotation annotations_tail* {-> [one_annotation.annotation, annotations_tail.annotation] }
	;

line_annotations~forclass {-> annotations}
	= line_annotation~forclass+ {-> New annotations(Null, Null, [line_annotation~forclass.annotation], Null) }
	;
line_annotation~forclass {-> annotation}
	= [doc]:no atid~forclass annotations? n1 {-> New annotation(atid~forclass.atid, Null, [], Null, annotations)}
	| {args} [doc]:no atid~forclass opar no at_args cpar annotations? n1 {-> New annotation(atid~forclass.atid, opar, [at_args.at_arg], cpar, annotations)}
	| {nopar} [doc]:no atid~forclass at_args_nopar n1 {-> New annotation(atid~forclass.atid, Null, [at_args_nopar.at_arg], Null, Null)}
	;

annotations_tail {-> annotation}
	= comma no one_annotation {-> one_annotation.annotation}
	;

at_args~nopar {-> at_arg* }
	= {many} at_arg~nopar at_args_tail* {-> [at_arg~nopar.at_arg, at_args_tail.at_arg]}
	;

at_args_tail {-> at_arg}
	= comma no at_arg {-> at_arg}
	;

at_arg~nopar {-> at_arg}
	= {type} type {-> New at_arg.type(type)}
	| {expr} expr~nopar {-> New at_arg.expr(expr~nopar.expr)}
	| {stmt} stmt_noexpr~nopar {-> New at_arg.expr(stmt_noexpr~nopar.expr)}
!nopar	| {at} annotations {-> New at_arg.at(annotations.annotations)}
	;

atid~forclass {-> atid}
	= {id}  id {-> New atid.id(id)}
//!forclass	| {kwextern} qualified? kwextern {-> New atid.kwextern(kwextern)}
//!forclass	| {kwintern} qualified? kwintern {-> New atid.kwintern(kwintern)}
!forclass	| {kwreadable} kwreadable {-> New atid.kwreadable(kwreadable)}
!forclass	| {kwwritable} kwwritable {-> New atid.kwwritable(kwwritable)}
	| {kwimport} kwimport {-> New atid.kwimport(kwimport)}
	;

/* MISC **********************************************************************/

recv~nopar~nobra {-> expr}
	= expr_atom~nopar~nobra dot no {-> expr_atom~nopar~nobra.expr}
	| {implicit} {-> New expr.implicit_self()}
	;

args {-> exprs}
	= opar no expr_list cpar {-> New exprs.par(opar, [expr_list.expr], cpar) }
	| {emptypar} opar no cpar {-> New exprs.par(opar, [], cpar) }
	| {empty} {-> New exprs.list([])}
	;
args_nopar {-> exprs}
	= opar no expr_list cpar {-> New exprs.par(opar, [expr_list.expr], cpar) }
	| {onearg} expr_nopar {-> New exprs.list([expr_nopar.expr])}
	| {emptypar} opar no cpar {-> New exprs.par(opar, [], cpar) }
	| {empty} {-> New exprs.list([])}
	;
braargs	{-> exprs}
	= obra no expr_list cbra {-> New exprs.bra(obra, [expr_list.expr], cbra)};
expr_list {-> expr*}
	= expr [n2]:no expr_tail* {-> [expr, expr_tail.expr]};
expr_tail {-> expr} 
	= comma no expr [n2]:no {-> expr};
idlist {-> id*}
	= opar no idlist_nopar [n2]:no cpar {-> [idlist_nopar.id]}
	| {nopar} idlist_nopar {-> [idlist_nopar.id]}
	;
idlist_nopar {-> id*}
	= {single} id {-> [id]}
	| {more} idlist_nopar no comma [n2]:no id {-> [idlist_nopar.id, id]}
	;

module_name {-> module_name}
	= {mod} modquad* id {-> New module_name(Null, [modquad.id], id)}
	| {root} quad no modquad* id {-> New module_name(quad, [modquad.id], id)}
	;

qualified 
	= {cla} modquad* classquad {-> New qualified([modquad.id], classquad.classid)}
	| {mod} modquad+ {-> New qualified([modquad.id], Null)}
	; 
modquad {-> id}
	= id quad no {-> id};
classquad {-> classid} 
	= classid quad no {-> classid};

n1	= {a} comment | {b} eol;
n {-> doc?}
	= {a} n2? comment+ {-> New doc([comment])}
	| {b} n2 {-> Null}
	;
no {-> doc?}
	= {empty} {-> Null}
	| n {-> n.doc}
	;

n2
	= {a} n2? comment+ eol+
	| {b} eol+
	;

/*****************************************************************************/
Abstract Syntax Tree
/*****************************************************************************/

module	= moduledecl? [imports]:import* [extern_code_blocks]:extern_code_block* [classdefs]:classdef*;

moduledecl
	= doc? kwmodule [name]:module_name annotations?;

import	= {std} visibility kwimport [name]:module_name annotations?
	| {no} visibility kwimport kwend
	;

visibility
	= {public}
	| {private} kwprivate
	| {protected} kwprotected
	| {intrude} kwintrude
	;

classdef= {std} doc? kwredef? visibility classkind [id]:classid? [formaldefs]:formaldef* annotations? extern_code_block? [superclasses]:superclass* [propdefs]:propdef* kwend
	| {top} [propdefs]:propdef*
	| {main} [propdefs]:propdef*
	;
classkind
	= {concrete} kwclass
	| {abstract} kwabstract kwclass
	| {interface} kwinterface
	| {enum} kwenum
	| {extern} kwextern kwclass?
	;
formaldef = [id]:classid type? annotations?;
superclass = kwsuper type annotations?;


propdef = {attr} doc? [readable]:able? [writable]:able? kwredef? visibility kwvar [id]:attrid? [id2]:id? type? annotations? expr?
	| {meth} doc? kwredef? visibility methid signature
	| {deferred_meth} doc? kwredef? visibility kwmeth methid signature annotations?
	| {intern_meth} doc? kwredef? visibility kwmeth methid signature
	| {extern_meth} doc? kwredef? visibility kwmeth methid signature [extern]:string? extern_calls? extern_code_block?
	| {concrete_meth} doc? kwredef? visibility kwmeth methid signature annotations? [block]:expr?
	| {concrete_init} doc? kwredef? visibility kwinit methid? signature annotations? [block]:expr?
	//| {concrete_new} doc? kwredef? visibility kwnew methid? signature [block]:expr?
	| {extern_init} doc? kwredef? visibility kwnew methid? signature [extern]:string? extern_calls? extern_code_block?
	| {main_meth} kwredef? [block]:expr?
	| {type} doc? kwredef? visibility kwtype [id]:classid type annotations?
	;

able	= {read} kwredef? kwreadable
	| {write} kwredef? visibility? kwwritable
	;

methid = {id} id | {plus} plus | {minus} minus | {star} star | {slash} slash | {percent} percent | {eq} eq | {ne} ne | {le} le | {ge} ge | {lt} lt | {gt} gt |  {ll} ll | {gg} gg | {bra} obra cbra | {starship} starship | {assign} id assign | {braassign} obra cbra assign;

signature = opar? [params]:param* cpar? type?;

param	= id type? dotdotdot? annotations?
	;

type	= kwnullable? [id]:classid [types]:type* annotations?;

label = kwlabel id;

expr	= {block} expr* kwend? 
	| {vardecl} kwvar id type? assign? expr? annotations?
	| {return} kwreturn? expr?
	| {break} kwbreak label? expr?
	| {abort} kwabort
	| {continue} kwcontinue? label? expr?
	| {do} kwdo [block]:expr? label?
	| {if} kwif expr [then]:expr? [else]:expr? 
	| {ifexpr} kwif expr kwthen [then]:expr kwelse [else]:expr
	| {while} kwwhile expr kwdo [block]:expr? label?
	| {loop} kwloop [block]:expr? label?
	| {for} kwfor [ids]:id* expr kwdo [block]:expr? label?
	| {assert} kwassert id? expr [else]:expr?
	| {once} kwonce expr 
	| {send} expr 
	| {binop} expr [expr2]:expr 
	| {or} expr [expr2]:expr 
	| {and} expr [expr2]:expr 
	| {or_else} expr [expr2]:expr
	| {implies} expr [expr2]:expr
	| {not} kwnot expr 
	| {eq} expr [expr2]:expr 
	| {ne} expr [expr2]:expr 
	| {lt} expr [expr2]:expr 
	| {le} expr [expr2]:expr 
	| {ll} expr [expr2]:expr
	| {gt} expr [expr2]:expr 
	| {ge} expr [expr2]:expr 
	| {gg} expr [expr2]:expr
	| {isa} expr type 
	| {plus} expr [expr2]:expr 
	| {minus} expr [expr2]:expr 
	| {starship} expr [expr2]:expr 
	| {star} expr [expr2]:expr 
	| {slash} expr [expr2]:expr 
	| {percent} expr [expr2]:expr 
	| {uminus} minus expr 
	| {new} kwnew type id? [args]:exprs
	| {attr} expr [id]:attrid 
	| {attr_assign} expr [id]:attrid assign [value]:expr 
	| {attr_reassign} expr [id]:attrid assign_op [value]:expr 
	| {call} expr id [args]:exprs
	| {call_assign} expr id [args]:exprs assign [value]:expr 
	| {call_reassign} expr id [args]:exprs assign_op [value]:expr 
	| {super} qualified? kwsuper [args]:exprs
	| {init} expr kwinit [args]:exprs 
	| {bra} expr [args]:exprs
	| {bra_assign} expr [args]:exprs assign [value]:expr 
	| {bra_reassign} expr [args]:exprs assign_op [value]:expr 
	| {var} id
	| {var_assign} id assign [value]:expr 
	| {var_reassign} id assign_op [value]:expr 
	| {range} expr [expr2]:expr annotations?
	| {crange} obra expr [expr2]:expr cbra annotations?
	| {orange} obra expr [expr2]:expr [cbra]:obra annotations?
	| {array} [exprs]:exprs annotations?
	| {self} kwself annotations?
	| {implicit_self} 
	| {true} kwtrue annotations?
	| {false} kwfalse annotations?
	| {null} kwnull annotations?
	| {int} number annotations?
	| {float} float annotations?
	| {char} char annotations?
	| {string} string annotations?
	| {start_string} [string]:start_string 
	| {mid_string} [string]:mid_string 
	| {end_string} [string]:end_string 
	| {superstring} [exprs]:expr* annotations?
	| {par} opar expr cpar annotations?
        | {as_cast} expr kwas opar type cpar
        | {as_notnull} expr kwas opar kwnot kwnull cpar
	| {isset_attr} kwisset expr [id]:attrid
	| {debug_type} kwdebug kwtype expr type
	;
exprs
	= {list} [exprs]:expr*
	| {par} opar [exprs]:expr* cpar
	| {bra} obra [exprs]:expr* cbra
	;
assign_op
	= {plus} pluseq
	| {minus} minuseq
	;

module_name = quad? [path]:id* id;
extern_calls = kwimport [extern_calls]:extern_call*
	;
extern_call =
	| {super} kwsuper
	| {local_prop} methid
	| {full_prop} type dot? methid
	| {init_prop} type
	| {cast_as} [from_type]:type dot? kwas [to_type]:type
	| {as_nullable} type kwas kwnullable
	| {as_not_nullable} type kwas kwnot kwnullable
	;
in_language = kwin string;
extern_code_block = in_language? extern_code_segment;

qualified = id* classid? ;

doc = comment+;

annotations = at? opar? [items]:annotation* cpar?;

annotation = atid opar? [args]:at_arg* cpar? annotations?;

at_arg
	= {type} type
	| {expr} expr
	| {at} annotations
	;
atid = {id} id | {kwextern} [id]:kwextern | {kwintern} [id]:kwintern | {kwreadable} [id]:kwreadable | {kwwritable} [id]:kwwritable | {kwimport} [id]:kwimport;

/*****************************************************************************/

