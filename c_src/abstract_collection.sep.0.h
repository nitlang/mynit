#include "nit.common.h"
val* abstract_collection__Collection__iterator(val* self);
extern const int COLOR_abstract_collection__Collection__length;
short int abstract_collection__Collection__is_empty(val* self);
extern const int COLOR_abstract_collection__Collection__iterator;
extern const int COLOR_abstract_collection__Iterator__is_ok;
extern const int COLOR_abstract_collection__Iterator__item;
extern const int COLOR_abstract_collection__Iterator__next;
long abstract_collection__Collection__length(val* self);
extern const int COLOR_abstract_collection__Collection_FT0;
extern const int COLOR_kernel__Object___61d_61d;
short int abstract_collection__Collection__has(val* self, val* p0);
extern const int COLOR_kernel__Object___33d_61d;
short int abstract_collection__Collection__has_only(val* self, val* p0);
long abstract_collection__Collection__count(val* self, val* p0);
extern const struct type type_kernel__Int;
val* abstract_collection__Collection__first(val* self);
extern const int COLOR_abstract_collection__Collectionabstract_collection__Collection_FT0;
extern const int COLOR_abstract_collection__Collection__has;
short int abstract_collection__Collection__has_all(val* self, val* p0);
val* abstract_collection__Iterator__item(val* self);
void abstract_collection__Iterator__next(val* self);
short int abstract_collection__Iterator__is_ok(val* self);
extern const int COLOR_abstract_collection__Container___item;
val* abstract_collection__Container__first(val* self);
short int abstract_collection__Container__is_empty(val* self);
long abstract_collection__Container__length(val* self);
short int abstract_collection__Container__has(val* self, val* p0);
short int abstract_collection__Container__has_only(val* self, val* p0);
long abstract_collection__Container__count(val* self, val* p0);
val* NEW_abstract_collection__ContainerIterator(const struct type* type);
extern const int COLOR_abstract_collection__ContainerIteratorabstract_collection__Container_FT0;
extern const int COLOR_abstract_collection__ContainerIterator__init;
void CHECK_NEW_abstract_collection__ContainerIterator(val*);
val* abstract_collection__Container__iterator(val* self);
extern const int COLOR_abstract_collection__Container_FT0;
void abstract_collection__Container__init(val* self, val* p0);
val* abstract_collection__Container__item(val* self);
void abstract_collection__Container__item_61d(val* self, val* p0);
extern const int COLOR_abstract_collection__ContainerIterator___container;
extern const int COLOR_abstract_collection__Container__item;
val* abstract_collection__ContainerIterator__item(val* self);
extern const int COLOR_abstract_collection__ContainerIterator___is_ok;
void abstract_collection__ContainerIterator__next(val* self);
extern const int COLOR_abstract_collection__Containerabstract_collection__ContainerIterator_FT0;
void abstract_collection__ContainerIterator__init(val* self, val* p0);
short int abstract_collection__ContainerIterator__is_ok(val* self);
void abstract_collection__RemovableCollection__clear(val* self);
extern const int COLOR_abstract_collection__RemovableCollection_FT0;
void abstract_collection__RemovableCollection__remove(val* self, val* p0);
extern const int COLOR_abstract_collection__RemovableCollection__remove;
void abstract_collection__RemovableCollection__remove_all(val* self, val* p0);
extern const int COLOR_abstract_collection__SimpleCollection_FT0;
void abstract_collection__SimpleCollection__add(val* self, val* p0);
extern const int COLOR_abstract_collection__Collectionabstract_collection__SimpleCollection_FT0;
extern const int COLOR_abstract_collection__SimpleCollection__add;
void abstract_collection__SimpleCollection__add_all(val* self, val* p0);
short int abstract_collection__Set__has_only(val* self, val* p0);
long abstract_collection__Set__count(val* self, val* p0);
void abstract_collection__Set__remove_all(val* self, val* p0);
extern const struct type type_abstract_collection__Setkernel__Object;
extern const int COLOR_abstract_collection__Collectionabstract_collection__Set_FT0;
extern const int COLOR_abstract_collection__Collection__has_all;
short int abstract_collection__Set___61d_61d(val* self, val* p0);
long kernel__Int__hash(long self);
long abstract_collection__Set__hash(val* self);
extern const int COLOR_abstract_collection__MapRead_FT0;
val* abstract_collection__MapRead___91d_93d(val* self, val* p0);
extern const int COLOR_abstract_collection__MapRead_FT1;
extern const int COLOR_abstract_collection__MapRead__has_key;
extern const int COLOR_abstract_collection__MapRead___91d_93d;
val* abstract_collection__MapRead__get_or_default(val* self, val* p0, val* p1);
extern const int COLOR_abstract_collection__MapRead__keys;
short int abstract_collection__MapRead__has_key(val* self, val* p0);
val* abstract_collection__MapRead__iterator(val* self);
val* abstract_collection__MapRead__values(val* self);
val* abstract_collection__MapRead__keys(val* self);
short int abstract_collection__MapRead__is_empty(val* self);
long abstract_collection__MapRead__length(val* self);
extern const int COLOR_abstract_collection__Map_FT0;
extern const int COLOR_abstract_collection__Map_FT1;
void abstract_collection__Map___91d_93d_61d(val* self, val* p0, val* p1);
extern const int COLOR_abstract_collection__Mapabstract_collection__Map_FT0abstract_collection__Map_FT1;
extern const int COLOR_abstract_collection__MapRead__iterator;
extern const int COLOR_abstract_collection__MapIterator__is_ok;
extern const int COLOR_abstract_collection__MapIterator__key;
extern const int COLOR_abstract_collection__MapIterator__item;
extern const int COLOR_abstract_collection__Map___91d_93d_61d;
extern const int COLOR_abstract_collection__MapIterator__next;
void abstract_collection__Map__recover_with(val* self, val* p0);
void abstract_collection__Map__clear(val* self);
val* abstract_collection__Map__values(val* self);
val* abstract_collection__Map__keys(val* self);
val* abstract_collection__MapIterator__item(val* self);
val* abstract_collection__MapIterator__key(val* self);
void abstract_collection__MapIterator__next(val* self);
short int abstract_collection__MapIterator__is_ok(val* self);
extern const int COLOR_abstract_collection__MapKeysIterator___64diterator;
val* abstract_collection__MapKeysIterator__iterator(val* self);
extern const int COLOR_abstract_collection__MapIteratorabstract_collection__MapKeysIterator_FT0abstract_collection__MapKeysIterator_FT1;
void abstract_collection__MapKeysIterator__iterator_61d(val* self, val* p0);
extern const int COLOR_abstract_collection__MapKeysIterator__iterator;
short int abstract_collection__MapKeysIterator__is_ok(val* self);
void abstract_collection__MapKeysIterator__next(val* self);
val* abstract_collection__MapKeysIterator__item(val* self);
void abstract_collection__MapKeysIterator__init(val* self, val* p0);
extern const int COLOR_abstract_collection__MapValuesIterator___64diterator;
val* abstract_collection__MapValuesIterator__iterator(val* self);
extern const int COLOR_abstract_collection__MapIteratorabstract_collection__MapValuesIterator_FT0abstract_collection__MapValuesIterator_FT1;
void abstract_collection__MapValuesIterator__iterator_61d(val* self, val* p0);
extern const int COLOR_abstract_collection__MapValuesIterator__iterator;
short int abstract_collection__MapValuesIterator__is_ok(val* self);
void abstract_collection__MapValuesIterator__next(val* self);
val* abstract_collection__MapValuesIterator__item(val* self);
void abstract_collection__MapValuesIterator__init(val* self, val* p0);
extern const int COLOR_abstract_collection__Collection__is_empty;
extern const int COLOR_abstract_collection__SequenceRead___91d_93d;
val* abstract_collection__SequenceRead__first(val* self);
val* abstract_collection__SequenceRead___91d_93d(val* self, long p0);
val* abstract_collection__SequenceRead__last(val* self);
extern const int COLOR_abstract_collection__SequenceRead_FT0;
extern const int COLOR_abstract_collection__IndexedIterator__index;
long abstract_collection__SequenceRead__index_of(val* self, val* p0);
val* abstract_collection__SequenceRead__iterator(val* self);
extern const struct type type_abstract_collection__SequenceReadnullable_kernel__Object;
short int abstract_collection__SequenceRead___61d_61d(val* self, val* p0);
long abstract_collection__SequenceRead__hash(val* self);
extern const int COLOR_abstract_collection__Sequence_FT0;
extern const int COLOR_abstract_collection__Sequence___91d_93d_61d;
void abstract_collection__Sequence__first_61d(val* self, val* p0);
void abstract_collection__Sequence__last_61d(val* self, val* p0);
extern const int COLOR_abstract_collection__Sequence__push;
void abstract_collection__Sequence__add(val* self, val* p0);
void abstract_collection__Sequence__push(val* self, val* p0);
extern const int COLOR_abstract_collection__Collectionabstract_collection__Sequence_FT0;
void abstract_collection__Sequence__append(val* self, val* p0);
val* abstract_collection__Sequence__pop(val* self);
void abstract_collection__Sequence__unshift(val* self, val* p0);
val* abstract_collection__Sequence__shift(val* self);
void abstract_collection__Sequence___91d_93d_61d(val* self, long p0, val* p1);
void abstract_collection__Sequence__remove_at(val* self, long p0);
long abstract_collection__IndexedIterator__index(val* self);
extern const int COLOR_abstract_collection__CoupleMap_FT0;
val* abstract_collection__CoupleMap__couple_at(val* self, val* p0);
extern const int COLOR_abstract_collection__CoupleMap__couple_at;
extern const int COLOR_abstract_collection__Couple__second;
val* abstract_collection__CoupleMap___91d_93d(val* self, val* p0);
extern const int COLOR_abstract_collection__CoupleMapIterator___iter;
val* abstract_collection__CoupleMapIterator__item(val* self);
extern const int COLOR_abstract_collection__Couple__first;
val* abstract_collection__CoupleMapIterator__key(val* self);
short int abstract_collection__CoupleMapIterator__is_ok(val* self);
void abstract_collection__CoupleMapIterator__next(val* self);
extern const int COLOR_abstract_collection__Iteratorabstract_collection__Coupleabstract_collection__CoupleMapIterator_FT0abstract_collection__CoupleMapIterator_FT1;
void abstract_collection__CoupleMapIterator__init(val* self, val* p0);
extern const int COLOR_abstract_collection__Couple___first;
val* abstract_collection__Couple__first(val* self);
extern const int COLOR_abstract_collection__Couple_FT0;
void abstract_collection__Couple__first_61d(val* self, val* p0);
extern const int COLOR_abstract_collection__Couple___second;
val* abstract_collection__Couple__second(val* self);
extern const int COLOR_abstract_collection__Couple_FT1;
void abstract_collection__Couple__second_61d(val* self, val* p0);
void abstract_collection__Couple__init(val* self, val* p0, val* p1);
