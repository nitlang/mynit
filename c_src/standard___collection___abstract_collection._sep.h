/* This C header file is generated by NIT to compile modules and programs that requires ../lib/standard/collection/abstract_collection. */
#ifndef standard___collection___abstract_collection_sep
#define standard___collection___abstract_collection_sep
#include "standard___kernel._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_standard___collection___abstract_collection___Collection[];

extern const classtable_elt_t VFT_standard___collection___abstract_collection___NaiveCollection[];

extern const classtable_elt_t VFT_standard___collection___abstract_collection___Iterator[];

extern const classtable_elt_t VFT_standard___collection___abstract_collection___Container[];

extern const classtable_elt_t VFT_standard___collection___abstract_collection___ContainerIterator[];

extern const classtable_elt_t VFT_standard___collection___abstract_collection___RemovableCollection[];

extern const classtable_elt_t VFT_standard___collection___abstract_collection___SimpleCollection[];

extern const classtable_elt_t VFT_standard___collection___abstract_collection___Set[];

extern const classtable_elt_t VFT_standard___collection___abstract_collection___MapRead[];

extern const classtable_elt_t VFT_standard___collection___abstract_collection___Map[];

extern const classtable_elt_t VFT_standard___collection___abstract_collection___MapIterator[];

extern const classtable_elt_t VFT_standard___collection___abstract_collection___MapKeysIterator[];

extern const classtable_elt_t VFT_standard___collection___abstract_collection___MapValuesIterator[];

extern const classtable_elt_t VFT_standard___collection___abstract_collection___SequenceRead[];

extern const classtable_elt_t VFT_standard___collection___abstract_collection___Sequence[];

extern const classtable_elt_t VFT_standard___collection___abstract_collection___IndexedIterator[];

extern const classtable_elt_t VFT_standard___collection___abstract_collection___CoupleMap[];

extern const classtable_elt_t VFT_standard___collection___abstract_collection___CoupleMapIterator[];

extern const classtable_elt_t VFT_standard___collection___abstract_collection___Couple[];
extern const char LOCATE_standard___collection___abstract_collection[];
extern const int SFT_standard___collection___abstract_collection[];
#define ID_standard___collection___abstract_collection___Collection (SFT_standard___collection___abstract_collection[0])
#define COLOR_standard___collection___abstract_collection___Collection (SFT_standard___collection___abstract_collection[1])
#define INIT_TABLE_POS_standard___collection___abstract_collection___Collection (SFT_standard___collection___abstract_collection[2] + 0)
#define CALL_standard___collection___abstract_collection___Collection___iterator(recv) ((standard___collection___abstract_collection___Collection___iterator_t)CALL((recv), (SFT_standard___collection___abstract_collection[2] + 1)))
#define CALL_standard___collection___abstract_collection___Collection___iterate(recv) ((standard___collection___abstract_collection___Collection___iterate_t)CALL((recv), (SFT_standard___collection___abstract_collection[2] + 2)))
#define CALL_standard___collection___abstract_collection___Collection___is_empty(recv) ((standard___collection___abstract_collection___Collection___is_empty_t)CALL((recv), (SFT_standard___collection___abstract_collection[2] + 3)))
#define CALL_standard___collection___abstract_collection___Collection___length(recv) ((standard___collection___abstract_collection___Collection___length_t)CALL((recv), (SFT_standard___collection___abstract_collection[2] + 4)))
#define CALL_standard___collection___abstract_collection___Collection___has(recv) ((standard___collection___abstract_collection___Collection___has_t)CALL((recv), (SFT_standard___collection___abstract_collection[2] + 5)))
#define CALL_standard___collection___abstract_collection___Collection___has_only(recv) ((standard___collection___abstract_collection___Collection___has_only_t)CALL((recv), (SFT_standard___collection___abstract_collection[2] + 6)))
#define CALL_standard___collection___abstract_collection___Collection___count(recv) ((standard___collection___abstract_collection___Collection___count_t)CALL((recv), (SFT_standard___collection___abstract_collection[2] + 7)))
#define CALL_standard___collection___abstract_collection___Collection___first(recv) ((standard___collection___abstract_collection___Collection___first_t)CALL((recv), (SFT_standard___collection___abstract_collection[2] + 8)))
#define ID_standard___collection___abstract_collection___NaiveCollection (SFT_standard___collection___abstract_collection[3])
#define COLOR_standard___collection___abstract_collection___NaiveCollection (SFT_standard___collection___abstract_collection[4])
#define INIT_TABLE_POS_standard___collection___abstract_collection___NaiveCollection (SFT_standard___collection___abstract_collection[5] + 0)
#define ID_standard___collection___abstract_collection___Iterator (SFT_standard___collection___abstract_collection[6])
#define COLOR_standard___collection___abstract_collection___Iterator (SFT_standard___collection___abstract_collection[7])
#define INIT_TABLE_POS_standard___collection___abstract_collection___Iterator (SFT_standard___collection___abstract_collection[8] + 0)
#define CALL_standard___collection___abstract_collection___Iterator___item(recv) ((standard___collection___abstract_collection___Iterator___item_t)CALL((recv), (SFT_standard___collection___abstract_collection[8] + 1)))
#define CALL_standard___collection___abstract_collection___Iterator___next(recv) ((standard___collection___abstract_collection___Iterator___next_t)CALL((recv), (SFT_standard___collection___abstract_collection[8] + 2)))
#define CALL_standard___collection___abstract_collection___Iterator___is_ok(recv) ((standard___collection___abstract_collection___Iterator___is_ok_t)CALL((recv), (SFT_standard___collection___abstract_collection[8] + 3)))
#define ID_standard___collection___abstract_collection___Container (SFT_standard___collection___abstract_collection[9])
#define COLOR_standard___collection___abstract_collection___Container (SFT_standard___collection___abstract_collection[10])
#define ATTR_standard___collection___abstract_collection___Container____item(recv) ATTR(recv, (SFT_standard___collection___abstract_collection[11] + 0))
#define INIT_TABLE_POS_standard___collection___abstract_collection___Container (SFT_standard___collection___abstract_collection[12] + 0)
#define CALL_standard___collection___abstract_collection___Container___init(recv) ((standard___collection___abstract_collection___Container___init_t)CALL((recv), (SFT_standard___collection___abstract_collection[12] + 1)))
#define CALL_standard___collection___abstract_collection___Container___item(recv) ((standard___collection___abstract_collection___Container___item_t)CALL((recv), (SFT_standard___collection___abstract_collection[12] + 2)))
#define CALL_standard___collection___abstract_collection___Container___item__eq(recv) ((standard___collection___abstract_collection___Container___item__eq_t)CALL((recv), (SFT_standard___collection___abstract_collection[12] + 3)))
#define ID_standard___collection___abstract_collection___ContainerIterator (SFT_standard___collection___abstract_collection[13])
#define COLOR_standard___collection___abstract_collection___ContainerIterator (SFT_standard___collection___abstract_collection[14])
#define ATTR_standard___collection___abstract_collection___ContainerIterator____is_ok(recv) ATTR(recv, (SFT_standard___collection___abstract_collection[15] + 0))
#define ATTR_standard___collection___abstract_collection___ContainerIterator____container(recv) ATTR(recv, (SFT_standard___collection___abstract_collection[15] + 1))
#define INIT_TABLE_POS_standard___collection___abstract_collection___ContainerIterator (SFT_standard___collection___abstract_collection[16] + 0)
#define CALL_standard___collection___abstract_collection___ContainerIterator___init(recv) ((standard___collection___abstract_collection___ContainerIterator___init_t)CALL((recv), (SFT_standard___collection___abstract_collection[16] + 1)))
#define ID_standard___collection___abstract_collection___RemovableCollection (SFT_standard___collection___abstract_collection[17])
#define COLOR_standard___collection___abstract_collection___RemovableCollection (SFT_standard___collection___abstract_collection[18])
#define INIT_TABLE_POS_standard___collection___abstract_collection___RemovableCollection (SFT_standard___collection___abstract_collection[19] + 0)
#define CALL_standard___collection___abstract_collection___RemovableCollection___clear(recv) ((standard___collection___abstract_collection___RemovableCollection___clear_t)CALL((recv), (SFT_standard___collection___abstract_collection[19] + 1)))
#define CALL_standard___collection___abstract_collection___RemovableCollection___remove(recv) ((standard___collection___abstract_collection___RemovableCollection___remove_t)CALL((recv), (SFT_standard___collection___abstract_collection[19] + 2)))
#define CALL_standard___collection___abstract_collection___RemovableCollection___remove_all(recv) ((standard___collection___abstract_collection___RemovableCollection___remove_all_t)CALL((recv), (SFT_standard___collection___abstract_collection[19] + 3)))
#define ID_standard___collection___abstract_collection___SimpleCollection (SFT_standard___collection___abstract_collection[20])
#define COLOR_standard___collection___abstract_collection___SimpleCollection (SFT_standard___collection___abstract_collection[21])
#define INIT_TABLE_POS_standard___collection___abstract_collection___SimpleCollection (SFT_standard___collection___abstract_collection[22] + 0)
#define CALL_standard___collection___abstract_collection___SimpleCollection___add(recv) ((standard___collection___abstract_collection___SimpleCollection___add_t)CALL((recv), (SFT_standard___collection___abstract_collection[22] + 1)))
#define CALL_standard___collection___abstract_collection___SimpleCollection___add_all(recv) ((standard___collection___abstract_collection___SimpleCollection___add_all_t)CALL((recv), (SFT_standard___collection___abstract_collection[22] + 2)))
#define ID_standard___collection___abstract_collection___Set (SFT_standard___collection___abstract_collection[23])
#define COLOR_standard___collection___abstract_collection___Set (SFT_standard___collection___abstract_collection[24])
#define INIT_TABLE_POS_standard___collection___abstract_collection___Set (SFT_standard___collection___abstract_collection[25] + 0)
#define ID_standard___collection___abstract_collection___MapRead (SFT_standard___collection___abstract_collection[26])
#define COLOR_standard___collection___abstract_collection___MapRead (SFT_standard___collection___abstract_collection[27])
#define INIT_TABLE_POS_standard___collection___abstract_collection___MapRead (SFT_standard___collection___abstract_collection[28] + 0)
#define CALL_standard___collection___abstract_collection___MapRead_____bra(recv) ((standard___collection___abstract_collection___MapRead_____bra_t)CALL((recv), (SFT_standard___collection___abstract_collection[28] + 1)))
#define CALL_standard___collection___abstract_collection___MapRead___get_or_default(recv) ((standard___collection___abstract_collection___MapRead___get_or_default_t)CALL((recv), (SFT_standard___collection___abstract_collection[28] + 2)))
#define CALL_standard___collection___abstract_collection___MapRead___has_key(recv) ((standard___collection___abstract_collection___MapRead___has_key_t)CALL((recv), (SFT_standard___collection___abstract_collection[28] + 3)))
#define CALL_standard___collection___abstract_collection___MapRead___iterator(recv) ((standard___collection___abstract_collection___MapRead___iterator_t)CALL((recv), (SFT_standard___collection___abstract_collection[28] + 4)))
#define CALL_standard___collection___abstract_collection___MapRead___iterate(recv) ((standard___collection___abstract_collection___MapRead___iterate_t)CALL((recv), (SFT_standard___collection___abstract_collection[28] + 5)))
#define CALL_standard___collection___abstract_collection___MapRead___values(recv) ((standard___collection___abstract_collection___MapRead___values_t)CALL((recv), (SFT_standard___collection___abstract_collection[28] + 6)))
#define CALL_standard___collection___abstract_collection___MapRead___keys(recv) ((standard___collection___abstract_collection___MapRead___keys_t)CALL((recv), (SFT_standard___collection___abstract_collection[28] + 7)))
#define CALL_standard___collection___abstract_collection___MapRead___is_empty(recv) ((standard___collection___abstract_collection___MapRead___is_empty_t)CALL((recv), (SFT_standard___collection___abstract_collection[28] + 8)))
#define CALL_standard___collection___abstract_collection___MapRead___length(recv) ((standard___collection___abstract_collection___MapRead___length_t)CALL((recv), (SFT_standard___collection___abstract_collection[28] + 9)))
#define ID_standard___collection___abstract_collection___Map (SFT_standard___collection___abstract_collection[29])
#define COLOR_standard___collection___abstract_collection___Map (SFT_standard___collection___abstract_collection[30])
#define INIT_TABLE_POS_standard___collection___abstract_collection___Map (SFT_standard___collection___abstract_collection[31] + 0)
#define CALL_standard___collection___abstract_collection___Map_____braeq(recv) ((standard___collection___abstract_collection___Map_____braeq_t)CALL((recv), (SFT_standard___collection___abstract_collection[31] + 1)))
#define CALL_standard___collection___abstract_collection___Map___recover_with(recv) ((standard___collection___abstract_collection___Map___recover_with_t)CALL((recv), (SFT_standard___collection___abstract_collection[31] + 2)))
#define CALL_standard___collection___abstract_collection___Map___clear(recv) ((standard___collection___abstract_collection___Map___clear_t)CALL((recv), (SFT_standard___collection___abstract_collection[31] + 3)))
#define ID_standard___collection___abstract_collection___MapIterator (SFT_standard___collection___abstract_collection[32])
#define COLOR_standard___collection___abstract_collection___MapIterator (SFT_standard___collection___abstract_collection[33])
#define INIT_TABLE_POS_standard___collection___abstract_collection___MapIterator (SFT_standard___collection___abstract_collection[34] + 0)
#define CALL_standard___collection___abstract_collection___MapIterator___item(recv) ((standard___collection___abstract_collection___MapIterator___item_t)CALL((recv), (SFT_standard___collection___abstract_collection[34] + 1)))
#define CALL_standard___collection___abstract_collection___MapIterator___key(recv) ((standard___collection___abstract_collection___MapIterator___key_t)CALL((recv), (SFT_standard___collection___abstract_collection[34] + 2)))
#define CALL_standard___collection___abstract_collection___MapIterator___next(recv) ((standard___collection___abstract_collection___MapIterator___next_t)CALL((recv), (SFT_standard___collection___abstract_collection[34] + 3)))
#define CALL_standard___collection___abstract_collection___MapIterator___is_ok(recv) ((standard___collection___abstract_collection___MapIterator___is_ok_t)CALL((recv), (SFT_standard___collection___abstract_collection[34] + 4)))
#define ID_standard___collection___abstract_collection___MapKeysIterator (SFT_standard___collection___abstract_collection[35])
#define COLOR_standard___collection___abstract_collection___MapKeysIterator (SFT_standard___collection___abstract_collection[36])
#define ATTR_standard___collection___abstract_collection___MapKeysIterator_____atiterator(recv) ATTR(recv, (SFT_standard___collection___abstract_collection[37] + 0))
#define INIT_TABLE_POS_standard___collection___abstract_collection___MapKeysIterator (SFT_standard___collection___abstract_collection[38] + 0)
#define CALL_standard___collection___abstract_collection___MapKeysIterator___iterator(recv) ((standard___collection___abstract_collection___MapKeysIterator___iterator_t)CALL((recv), (SFT_standard___collection___abstract_collection[38] + 1)))
#define CALL_standard___collection___abstract_collection___MapKeysIterator___iterator__eq(recv) ((standard___collection___abstract_collection___MapKeysIterator___iterator__eq_t)CALL((recv), (SFT_standard___collection___abstract_collection[38] + 2)))
#define CALL_standard___collection___abstract_collection___MapKeysIterator___init(recv) ((standard___collection___abstract_collection___MapKeysIterator___init_t)CALL((recv), (SFT_standard___collection___abstract_collection[38] + 3)))
#define ID_standard___collection___abstract_collection___MapValuesIterator (SFT_standard___collection___abstract_collection[39])
#define COLOR_standard___collection___abstract_collection___MapValuesIterator (SFT_standard___collection___abstract_collection[40])
#define ATTR_standard___collection___abstract_collection___MapValuesIterator_____atiterator(recv) ATTR(recv, (SFT_standard___collection___abstract_collection[41] + 0))
#define INIT_TABLE_POS_standard___collection___abstract_collection___MapValuesIterator (SFT_standard___collection___abstract_collection[42] + 0)
#define CALL_standard___collection___abstract_collection___MapValuesIterator___iterator(recv) ((standard___collection___abstract_collection___MapValuesIterator___iterator_t)CALL((recv), (SFT_standard___collection___abstract_collection[42] + 1)))
#define CALL_standard___collection___abstract_collection___MapValuesIterator___iterator__eq(recv) ((standard___collection___abstract_collection___MapValuesIterator___iterator__eq_t)CALL((recv), (SFT_standard___collection___abstract_collection[42] + 2)))
#define CALL_standard___collection___abstract_collection___MapValuesIterator___init(recv) ((standard___collection___abstract_collection___MapValuesIterator___init_t)CALL((recv), (SFT_standard___collection___abstract_collection[42] + 3)))
#define ID_standard___collection___abstract_collection___SequenceRead (SFT_standard___collection___abstract_collection[43])
#define COLOR_standard___collection___abstract_collection___SequenceRead (SFT_standard___collection___abstract_collection[44])
#define INIT_TABLE_POS_standard___collection___abstract_collection___SequenceRead (SFT_standard___collection___abstract_collection[45] + 0)
#define CALL_standard___collection___abstract_collection___SequenceRead_____bra(recv) ((standard___collection___abstract_collection___SequenceRead_____bra_t)CALL((recv), (SFT_standard___collection___abstract_collection[45] + 1)))
#define CALL_standard___collection___abstract_collection___SequenceRead___last(recv) ((standard___collection___abstract_collection___SequenceRead___last_t)CALL((recv), (SFT_standard___collection___abstract_collection[45] + 2)))
#define CALL_standard___collection___abstract_collection___SequenceRead___index_of(recv) ((standard___collection___abstract_collection___SequenceRead___index_of_t)CALL((recv), (SFT_standard___collection___abstract_collection[45] + 3)))
#define ID_standard___collection___abstract_collection___Sequence (SFT_standard___collection___abstract_collection[46])
#define COLOR_standard___collection___abstract_collection___Sequence (SFT_standard___collection___abstract_collection[47])
#define INIT_TABLE_POS_standard___collection___abstract_collection___Sequence (SFT_standard___collection___abstract_collection[48] + 0)
#define CALL_standard___collection___abstract_collection___Sequence___first__eq(recv) ((standard___collection___abstract_collection___Sequence___first__eq_t)CALL((recv), (SFT_standard___collection___abstract_collection[48] + 1)))
#define CALL_standard___collection___abstract_collection___Sequence___last__eq(recv) ((standard___collection___abstract_collection___Sequence___last__eq_t)CALL((recv), (SFT_standard___collection___abstract_collection[48] + 2)))
#define CALL_standard___collection___abstract_collection___Sequence___push(recv) ((standard___collection___abstract_collection___Sequence___push_t)CALL((recv), (SFT_standard___collection___abstract_collection[48] + 3)))
#define CALL_standard___collection___abstract_collection___Sequence___append(recv) ((standard___collection___abstract_collection___Sequence___append_t)CALL((recv), (SFT_standard___collection___abstract_collection[48] + 4)))
#define CALL_standard___collection___abstract_collection___Sequence___pop(recv) ((standard___collection___abstract_collection___Sequence___pop_t)CALL((recv), (SFT_standard___collection___abstract_collection[48] + 5)))
#define CALL_standard___collection___abstract_collection___Sequence___unshift(recv) ((standard___collection___abstract_collection___Sequence___unshift_t)CALL((recv), (SFT_standard___collection___abstract_collection[48] + 6)))
#define CALL_standard___collection___abstract_collection___Sequence___shift(recv) ((standard___collection___abstract_collection___Sequence___shift_t)CALL((recv), (SFT_standard___collection___abstract_collection[48] + 7)))
#define CALL_standard___collection___abstract_collection___Sequence_____braeq(recv) ((standard___collection___abstract_collection___Sequence_____braeq_t)CALL((recv), (SFT_standard___collection___abstract_collection[48] + 8)))
#define CALL_standard___collection___abstract_collection___Sequence___remove_at(recv) ((standard___collection___abstract_collection___Sequence___remove_at_t)CALL((recv), (SFT_standard___collection___abstract_collection[48] + 9)))
#define ID_standard___collection___abstract_collection___IndexedIterator (SFT_standard___collection___abstract_collection[49])
#define COLOR_standard___collection___abstract_collection___IndexedIterator (SFT_standard___collection___abstract_collection[50])
#define INIT_TABLE_POS_standard___collection___abstract_collection___IndexedIterator (SFT_standard___collection___abstract_collection[51] + 0)
#define CALL_standard___collection___abstract_collection___IndexedIterator___index(recv) ((standard___collection___abstract_collection___IndexedIterator___index_t)CALL((recv), (SFT_standard___collection___abstract_collection[51] + 1)))
#define ID_standard___collection___abstract_collection___CoupleMap (SFT_standard___collection___abstract_collection[52])
#define COLOR_standard___collection___abstract_collection___CoupleMap (SFT_standard___collection___abstract_collection[53])
#define INIT_TABLE_POS_standard___collection___abstract_collection___CoupleMap (SFT_standard___collection___abstract_collection[54] + 0)
#define CALL_standard___collection___abstract_collection___CoupleMap___couple_at(recv) ((standard___collection___abstract_collection___CoupleMap___couple_at_t)CALL((recv), (SFT_standard___collection___abstract_collection[54] + 1)))
#define ID_standard___collection___abstract_collection___CoupleMapIterator (SFT_standard___collection___abstract_collection[55])
#define COLOR_standard___collection___abstract_collection___CoupleMapIterator (SFT_standard___collection___abstract_collection[56])
#define ATTR_standard___collection___abstract_collection___CoupleMapIterator____iter(recv) ATTR(recv, (SFT_standard___collection___abstract_collection[57] + 0))
#define INIT_TABLE_POS_standard___collection___abstract_collection___CoupleMapIterator (SFT_standard___collection___abstract_collection[58] + 0)
#define CALL_standard___collection___abstract_collection___CoupleMapIterator___init(recv) ((standard___collection___abstract_collection___CoupleMapIterator___init_t)CALL((recv), (SFT_standard___collection___abstract_collection[58] + 1)))
#define ID_standard___collection___abstract_collection___Couple (SFT_standard___collection___abstract_collection[59])
#define COLOR_standard___collection___abstract_collection___Couple (SFT_standard___collection___abstract_collection[60])
#define ATTR_standard___collection___abstract_collection___Couple____first(recv) ATTR(recv, (SFT_standard___collection___abstract_collection[61] + 0))
#define ATTR_standard___collection___abstract_collection___Couple____second(recv) ATTR(recv, (SFT_standard___collection___abstract_collection[61] + 1))
#define INIT_TABLE_POS_standard___collection___abstract_collection___Couple (SFT_standard___collection___abstract_collection[62] + 0)
#define CALL_standard___collection___abstract_collection___Couple___first(recv) ((standard___collection___abstract_collection___Couple___first_t)CALL((recv), (SFT_standard___collection___abstract_collection[62] + 1)))
#define CALL_standard___collection___abstract_collection___Couple___first__eq(recv) ((standard___collection___abstract_collection___Couple___first__eq_t)CALL((recv), (SFT_standard___collection___abstract_collection[62] + 2)))
#define CALL_standard___collection___abstract_collection___Couple___second(recv) ((standard___collection___abstract_collection___Couple___second_t)CALL((recv), (SFT_standard___collection___abstract_collection[62] + 3)))
#define CALL_standard___collection___abstract_collection___Couple___second__eq(recv) ((standard___collection___abstract_collection___Couple___second__eq_t)CALL((recv), (SFT_standard___collection___abstract_collection[62] + 4)))
#define CALL_standard___collection___abstract_collection___Couple___init(recv) ((standard___collection___abstract_collection___Couple___init_t)CALL((recv), (SFT_standard___collection___abstract_collection[62] + 5)))
val_t standard___collection___abstract_collection___Collection___iterator(val_t p0);
typedef val_t (*standard___collection___abstract_collection___Collection___iterator_t)(val_t p0);
typedef void (*CLOS_standard___collection___abstract_collection___Collection___iterate_0)(struct stack_frame_t *, val_t);
void standard___collection___abstract_collection___Collection___iterate(val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
typedef void (*standard___collection___abstract_collection___Collection___iterate_t)(val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
val_t standard___collection___abstract_collection___Collection___is_empty(val_t p0);
typedef val_t (*standard___collection___abstract_collection___Collection___is_empty_t)(val_t p0);
val_t standard___collection___abstract_collection___Collection___length(val_t p0);
typedef val_t (*standard___collection___abstract_collection___Collection___length_t)(val_t p0);
val_t standard___collection___abstract_collection___Collection___has(val_t p0, val_t p1);
typedef val_t (*standard___collection___abstract_collection___Collection___has_t)(val_t p0, val_t p1);
val_t standard___collection___abstract_collection___Collection___has_only(val_t p0, val_t p1);
typedef val_t (*standard___collection___abstract_collection___Collection___has_only_t)(val_t p0, val_t p1);
val_t standard___collection___abstract_collection___Collection___count(val_t p0, val_t p1);
typedef val_t (*standard___collection___abstract_collection___Collection___count_t)(val_t p0, val_t p1);
val_t standard___collection___abstract_collection___Collection___first(val_t p0);
typedef val_t (*standard___collection___abstract_collection___Collection___first_t)(val_t p0);
val_t standard___collection___abstract_collection___NaiveCollection___is_empty(val_t p0);
typedef val_t (*standard___collection___abstract_collection___NaiveCollection___is_empty_t)(val_t p0);
val_t standard___collection___abstract_collection___NaiveCollection___length(val_t p0);
typedef val_t (*standard___collection___abstract_collection___NaiveCollection___length_t)(val_t p0);
  typedef void (*CLOS_OC_standard___collection___abstract_collection___NaiveCollection___length_1_0)(struct stack_frame_t *);
  void OC_standard___collection___abstract_collection___NaiveCollection___length_1(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
  typedef void (*OC_standard___collection___abstract_collection___NaiveCollection___length_1_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
val_t standard___collection___abstract_collection___NaiveCollection___has(val_t p0, val_t p1);
typedef val_t (*standard___collection___abstract_collection___NaiveCollection___has_t)(val_t p0, val_t p1);
  typedef void (*CLOS_OC_standard___collection___abstract_collection___NaiveCollection___has_1_0)(struct stack_frame_t *);
  void OC_standard___collection___abstract_collection___NaiveCollection___has_1(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
  typedef void (*OC_standard___collection___abstract_collection___NaiveCollection___has_1_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
val_t standard___collection___abstract_collection___NaiveCollection___has_only(val_t p0, val_t p1);
typedef val_t (*standard___collection___abstract_collection___NaiveCollection___has_only_t)(val_t p0, val_t p1);
  typedef void (*CLOS_OC_standard___collection___abstract_collection___NaiveCollection___has_only_1_0)(struct stack_frame_t *);
  void OC_standard___collection___abstract_collection___NaiveCollection___has_only_1(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
  typedef void (*OC_standard___collection___abstract_collection___NaiveCollection___has_only_1_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
val_t standard___collection___abstract_collection___NaiveCollection___count(val_t p0, val_t p1);
typedef val_t (*standard___collection___abstract_collection___NaiveCollection___count_t)(val_t p0, val_t p1);
  typedef void (*CLOS_OC_standard___collection___abstract_collection___NaiveCollection___count_1_0)(struct stack_frame_t *);
  void OC_standard___collection___abstract_collection___NaiveCollection___count_1(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
  typedef void (*OC_standard___collection___abstract_collection___NaiveCollection___count_1_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
val_t standard___collection___abstract_collection___NaiveCollection___first(val_t p0);
typedef val_t (*standard___collection___abstract_collection___NaiveCollection___first_t)(val_t p0);
val_t standard___collection___abstract_collection___Iterator___item(val_t p0);
typedef val_t (*standard___collection___abstract_collection___Iterator___item_t)(val_t p0);
void standard___collection___abstract_collection___Iterator___next(val_t p0);
typedef void (*standard___collection___abstract_collection___Iterator___next_t)(val_t p0);
val_t standard___collection___abstract_collection___Iterator___is_ok(val_t p0);
typedef val_t (*standard___collection___abstract_collection___Iterator___is_ok_t)(val_t p0);
val_t standard___collection___abstract_collection___Container___first(val_t p0);
typedef val_t (*standard___collection___abstract_collection___Container___first_t)(val_t p0);
val_t standard___collection___abstract_collection___Container___is_empty(val_t p0);
typedef val_t (*standard___collection___abstract_collection___Container___is_empty_t)(val_t p0);
val_t standard___collection___abstract_collection___Container___length(val_t p0);
typedef val_t (*standard___collection___abstract_collection___Container___length_t)(val_t p0);
val_t standard___collection___abstract_collection___Container___has(val_t p0, val_t p1);
typedef val_t (*standard___collection___abstract_collection___Container___has_t)(val_t p0, val_t p1);
val_t standard___collection___abstract_collection___Container___has_only(val_t p0, val_t p1);
typedef val_t (*standard___collection___abstract_collection___Container___has_only_t)(val_t p0, val_t p1);
val_t standard___collection___abstract_collection___Container___count(val_t p0, val_t p1);
typedef val_t (*standard___collection___abstract_collection___Container___count_t)(val_t p0, val_t p1);
val_t standard___collection___abstract_collection___Container___iterator(val_t p0);
typedef val_t (*standard___collection___abstract_collection___Container___iterator_t)(val_t p0);
void standard___collection___abstract_collection___Container___init(val_t p0, val_t p1, int* init_table);
typedef void (*standard___collection___abstract_collection___Container___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_Container_standard___collection___abstract_collection___Container___init(val_t p0);
val_t standard___collection___abstract_collection___Container___item(val_t p0);
typedef val_t (*standard___collection___abstract_collection___Container___item_t)(val_t p0);
void standard___collection___abstract_collection___Container___item__eq(val_t p0, val_t p1);
typedef void (*standard___collection___abstract_collection___Container___item__eq_t)(val_t p0, val_t p1);
val_t standard___collection___abstract_collection___ContainerIterator___item(val_t p0);
typedef val_t (*standard___collection___abstract_collection___ContainerIterator___item_t)(val_t p0);
void standard___collection___abstract_collection___ContainerIterator___next(val_t p0);
typedef void (*standard___collection___abstract_collection___ContainerIterator___next_t)(val_t p0);
void standard___collection___abstract_collection___ContainerIterator___init(val_t p0, val_t p1, int* init_table);
typedef void (*standard___collection___abstract_collection___ContainerIterator___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_ContainerIterator_standard___collection___abstract_collection___ContainerIterator___init(val_t p0);
val_t standard___collection___abstract_collection___ContainerIterator___is_ok(val_t p0);
typedef val_t (*standard___collection___abstract_collection___ContainerIterator___is_ok_t)(val_t p0);
void standard___collection___abstract_collection___RemovableCollection___clear(val_t p0);
typedef void (*standard___collection___abstract_collection___RemovableCollection___clear_t)(val_t p0);
void standard___collection___abstract_collection___RemovableCollection___remove(val_t p0, val_t p1);
typedef void (*standard___collection___abstract_collection___RemovableCollection___remove_t)(val_t p0, val_t p1);
void standard___collection___abstract_collection___RemovableCollection___remove_all(val_t p0, val_t p1);
typedef void (*standard___collection___abstract_collection___RemovableCollection___remove_all_t)(val_t p0, val_t p1);
void standard___collection___abstract_collection___SimpleCollection___add(val_t p0, val_t p1);
typedef void (*standard___collection___abstract_collection___SimpleCollection___add_t)(val_t p0, val_t p1);
void standard___collection___abstract_collection___SimpleCollection___add_all(val_t p0, val_t p1);
typedef void (*standard___collection___abstract_collection___SimpleCollection___add_all_t)(val_t p0, val_t p1);
  typedef void (*CLOS_OC_standard___collection___abstract_collection___SimpleCollection___add_all_1_0)(struct stack_frame_t *);
  void OC_standard___collection___abstract_collection___SimpleCollection___add_all_1(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
  typedef void (*OC_standard___collection___abstract_collection___SimpleCollection___add_all_1_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
val_t standard___collection___abstract_collection___Set___has_only(val_t p0, val_t p1);
typedef val_t (*standard___collection___abstract_collection___Set___has_only_t)(val_t p0, val_t p1);
val_t standard___collection___abstract_collection___Set___count(val_t p0, val_t p1);
typedef val_t (*standard___collection___abstract_collection___Set___count_t)(val_t p0, val_t p1);
void standard___collection___abstract_collection___Set___remove_all(val_t p0, val_t p1);
typedef void (*standard___collection___abstract_collection___Set___remove_all_t)(val_t p0, val_t p1);
val_t standard___collection___abstract_collection___MapRead_____bra(val_t p0, val_t p1);
typedef val_t (*standard___collection___abstract_collection___MapRead_____bra_t)(val_t p0, val_t p1);
val_t standard___collection___abstract_collection___MapRead___get_or_default(val_t p0, val_t p1, val_t p2);
typedef val_t (*standard___collection___abstract_collection___MapRead___get_or_default_t)(val_t p0, val_t p1, val_t p2);
val_t standard___collection___abstract_collection___MapRead___has_key(val_t p0, val_t p1);
typedef val_t (*standard___collection___abstract_collection___MapRead___has_key_t)(val_t p0, val_t p1);
val_t standard___collection___abstract_collection___MapRead___iterator(val_t p0);
typedef val_t (*standard___collection___abstract_collection___MapRead___iterator_t)(val_t p0);
typedef void (*CLOS_standard___collection___abstract_collection___MapRead___iterate_0)(struct stack_frame_t *, val_t, val_t);
void standard___collection___abstract_collection___MapRead___iterate(val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
typedef void (*standard___collection___abstract_collection___MapRead___iterate_t)(val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
val_t standard___collection___abstract_collection___MapRead___values(val_t p0);
typedef val_t (*standard___collection___abstract_collection___MapRead___values_t)(val_t p0);
val_t standard___collection___abstract_collection___MapRead___keys(val_t p0);
typedef val_t (*standard___collection___abstract_collection___MapRead___keys_t)(val_t p0);
val_t standard___collection___abstract_collection___MapRead___is_empty(val_t p0);
typedef val_t (*standard___collection___abstract_collection___MapRead___is_empty_t)(val_t p0);
val_t standard___collection___abstract_collection___MapRead___length(val_t p0);
typedef val_t (*standard___collection___abstract_collection___MapRead___length_t)(val_t p0);
void standard___collection___abstract_collection___Map_____braeq(val_t p0, val_t p1, val_t p2);
typedef void (*standard___collection___abstract_collection___Map_____braeq_t)(val_t p0, val_t p1, val_t p2);
void standard___collection___abstract_collection___Map___recover_with(val_t p0, val_t p1);
typedef void (*standard___collection___abstract_collection___Map___recover_with_t)(val_t p0, val_t p1);
void standard___collection___abstract_collection___Map___clear(val_t p0);
typedef void (*standard___collection___abstract_collection___Map___clear_t)(val_t p0);
val_t standard___collection___abstract_collection___Map___values(val_t p0);
typedef val_t (*standard___collection___abstract_collection___Map___values_t)(val_t p0);
val_t standard___collection___abstract_collection___Map___keys(val_t p0);
typedef val_t (*standard___collection___abstract_collection___Map___keys_t)(val_t p0);
val_t standard___collection___abstract_collection___MapIterator___item(val_t p0);
typedef val_t (*standard___collection___abstract_collection___MapIterator___item_t)(val_t p0);
val_t standard___collection___abstract_collection___MapIterator___key(val_t p0);
typedef val_t (*standard___collection___abstract_collection___MapIterator___key_t)(val_t p0);
void standard___collection___abstract_collection___MapIterator___next(val_t p0);
typedef void (*standard___collection___abstract_collection___MapIterator___next_t)(val_t p0);
val_t standard___collection___abstract_collection___MapIterator___is_ok(val_t p0);
typedef val_t (*standard___collection___abstract_collection___MapIterator___is_ok_t)(val_t p0);
val_t standard___collection___abstract_collection___MapKeysIterator___iterator(val_t p0);
typedef val_t (*standard___collection___abstract_collection___MapKeysIterator___iterator_t)(val_t p0);
void standard___collection___abstract_collection___MapKeysIterator___iterator__eq(val_t p0, val_t p1);
typedef void (*standard___collection___abstract_collection___MapKeysIterator___iterator__eq_t)(val_t p0, val_t p1);
val_t standard___collection___abstract_collection___MapKeysIterator___is_ok(val_t p0);
typedef val_t (*standard___collection___abstract_collection___MapKeysIterator___is_ok_t)(val_t p0);
void standard___collection___abstract_collection___MapKeysIterator___next(val_t p0);
typedef void (*standard___collection___abstract_collection___MapKeysIterator___next_t)(val_t p0);
val_t standard___collection___abstract_collection___MapKeysIterator___item(val_t p0);
typedef val_t (*standard___collection___abstract_collection___MapKeysIterator___item_t)(val_t p0);
void standard___collection___abstract_collection___MapKeysIterator___init(val_t p0, val_t p1, int* init_table);
typedef void (*standard___collection___abstract_collection___MapKeysIterator___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_MapKeysIterator_standard___collection___abstract_collection___MapKeysIterator___init(val_t p0);
val_t standard___collection___abstract_collection___MapValuesIterator___iterator(val_t p0);
typedef val_t (*standard___collection___abstract_collection___MapValuesIterator___iterator_t)(val_t p0);
void standard___collection___abstract_collection___MapValuesIterator___iterator__eq(val_t p0, val_t p1);
typedef void (*standard___collection___abstract_collection___MapValuesIterator___iterator__eq_t)(val_t p0, val_t p1);
val_t standard___collection___abstract_collection___MapValuesIterator___is_ok(val_t p0);
typedef val_t (*standard___collection___abstract_collection___MapValuesIterator___is_ok_t)(val_t p0);
void standard___collection___abstract_collection___MapValuesIterator___next(val_t p0);
typedef void (*standard___collection___abstract_collection___MapValuesIterator___next_t)(val_t p0);
val_t standard___collection___abstract_collection___MapValuesIterator___item(val_t p0);
typedef val_t (*standard___collection___abstract_collection___MapValuesIterator___item_t)(val_t p0);
void standard___collection___abstract_collection___MapValuesIterator___init(val_t p0, val_t p1, int* init_table);
typedef void (*standard___collection___abstract_collection___MapValuesIterator___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_MapValuesIterator_standard___collection___abstract_collection___MapValuesIterator___init(val_t p0);
val_t standard___collection___abstract_collection___SequenceRead___first(val_t p0);
typedef val_t (*standard___collection___abstract_collection___SequenceRead___first_t)(val_t p0);
val_t standard___collection___abstract_collection___SequenceRead_____bra(val_t p0, val_t p1);
typedef val_t (*standard___collection___abstract_collection___SequenceRead_____bra_t)(val_t p0, val_t p1);
val_t standard___collection___abstract_collection___SequenceRead___last(val_t p0);
typedef val_t (*standard___collection___abstract_collection___SequenceRead___last_t)(val_t p0);
val_t standard___collection___abstract_collection___SequenceRead___index_of(val_t p0, val_t p1);
typedef val_t (*standard___collection___abstract_collection___SequenceRead___index_of_t)(val_t p0, val_t p1);
val_t standard___collection___abstract_collection___SequenceRead___iterator(val_t p0);
typedef val_t (*standard___collection___abstract_collection___SequenceRead___iterator_t)(val_t p0);
void standard___collection___abstract_collection___Sequence___first__eq(val_t p0, val_t p1);
typedef void (*standard___collection___abstract_collection___Sequence___first__eq_t)(val_t p0, val_t p1);
void standard___collection___abstract_collection___Sequence___last__eq(val_t p0, val_t p1);
typedef void (*standard___collection___abstract_collection___Sequence___last__eq_t)(val_t p0, val_t p1);
void standard___collection___abstract_collection___Sequence___add(val_t p0, val_t p1);
typedef void (*standard___collection___abstract_collection___Sequence___add_t)(val_t p0, val_t p1);
void standard___collection___abstract_collection___Sequence___push(val_t p0, val_t p1);
typedef void (*standard___collection___abstract_collection___Sequence___push_t)(val_t p0, val_t p1);
void standard___collection___abstract_collection___Sequence___append(val_t p0, val_t p1);
typedef void (*standard___collection___abstract_collection___Sequence___append_t)(val_t p0, val_t p1);
  typedef void (*CLOS_OC_standard___collection___abstract_collection___Sequence___append_1_0)(struct stack_frame_t *);
  void OC_standard___collection___abstract_collection___Sequence___append_1(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
  typedef void (*OC_standard___collection___abstract_collection___Sequence___append_1_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
val_t standard___collection___abstract_collection___Sequence___pop(val_t p0);
typedef val_t (*standard___collection___abstract_collection___Sequence___pop_t)(val_t p0);
void standard___collection___abstract_collection___Sequence___unshift(val_t p0, val_t p1);
typedef void (*standard___collection___abstract_collection___Sequence___unshift_t)(val_t p0, val_t p1);
val_t standard___collection___abstract_collection___Sequence___shift(val_t p0);
typedef val_t (*standard___collection___abstract_collection___Sequence___shift_t)(val_t p0);
void standard___collection___abstract_collection___Sequence_____braeq(val_t p0, val_t p1, val_t p2);
typedef void (*standard___collection___abstract_collection___Sequence_____braeq_t)(val_t p0, val_t p1, val_t p2);
void standard___collection___abstract_collection___Sequence___remove_at(val_t p0, val_t p1);
typedef void (*standard___collection___abstract_collection___Sequence___remove_at_t)(val_t p0, val_t p1);
val_t standard___collection___abstract_collection___IndexedIterator___index(val_t p0);
typedef val_t (*standard___collection___abstract_collection___IndexedIterator___index_t)(val_t p0);
val_t standard___collection___abstract_collection___CoupleMap___couple_at(val_t p0, val_t p1);
typedef val_t (*standard___collection___abstract_collection___CoupleMap___couple_at_t)(val_t p0, val_t p1);
val_t standard___collection___abstract_collection___CoupleMap_____bra(val_t p0, val_t p1);
typedef val_t (*standard___collection___abstract_collection___CoupleMap_____bra_t)(val_t p0, val_t p1);
val_t standard___collection___abstract_collection___CoupleMapIterator___item(val_t p0);
typedef val_t (*standard___collection___abstract_collection___CoupleMapIterator___item_t)(val_t p0);
val_t standard___collection___abstract_collection___CoupleMapIterator___key(val_t p0);
typedef val_t (*standard___collection___abstract_collection___CoupleMapIterator___key_t)(val_t p0);
val_t standard___collection___abstract_collection___CoupleMapIterator___is_ok(val_t p0);
typedef val_t (*standard___collection___abstract_collection___CoupleMapIterator___is_ok_t)(val_t p0);
void standard___collection___abstract_collection___CoupleMapIterator___next(val_t p0);
typedef void (*standard___collection___abstract_collection___CoupleMapIterator___next_t)(val_t p0);
void standard___collection___abstract_collection___CoupleMapIterator___init(val_t p0, val_t p1, int* init_table);
typedef void (*standard___collection___abstract_collection___CoupleMapIterator___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_CoupleMapIterator_standard___collection___abstract_collection___CoupleMapIterator___init(val_t p0);
val_t standard___collection___abstract_collection___Couple___first(val_t p0);
typedef val_t (*standard___collection___abstract_collection___Couple___first_t)(val_t p0);
void standard___collection___abstract_collection___Couple___first__eq(val_t p0, val_t p1);
typedef void (*standard___collection___abstract_collection___Couple___first__eq_t)(val_t p0, val_t p1);
val_t standard___collection___abstract_collection___Couple___second(val_t p0);
typedef val_t (*standard___collection___abstract_collection___Couple___second_t)(val_t p0);
void standard___collection___abstract_collection___Couple___second__eq(val_t p0, val_t p1);
typedef void (*standard___collection___abstract_collection___Couple___second__eq_t)(val_t p0, val_t p1);
void standard___collection___abstract_collection___Couple___init(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*standard___collection___abstract_collection___Couple___init_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_Couple_standard___collection___abstract_collection___Couple___init(val_t p0, val_t p1);
#endif
