/* This C header file is generated by NIT to compile modules and programs that requires ./syntax/mmbuilder. */
#ifndef syntax___mmbuilder_sep
#define syntax___mmbuilder_sep
#include "syntax___syntax_base._sep.h"
#include "primitive_info._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_syntax___mmbuilder___CSHSorter[];

extern const classtable_elt_t VFT_syntax___mmbuilder___MMSrcAncestor[];

extern const classtable_elt_t VFT_syntax___mmbuilder___ClassBuilderVisitor[];

extern const classtable_elt_t VFT_syntax___mmbuilder___ClassSpecializationBuilderVisitor[];

extern const classtable_elt_t VFT_syntax___mmbuilder___ClassAncestorBuilder[];

extern const classtable_elt_t VFT_syntax___mmbuilder___ClassVerifierVisitor[];

extern const classtable_elt_t VFT_syntax___mmbuilder___PropertyBuilderVisitor[];

extern const classtable_elt_t VFT_syntax___mmbuilder___PropertyVerifierVisitor[];

extern const classtable_elt_t VFT_syntax___mmbuilder___SignatureBuilder[];

extern const classtable_elt_t VFT_syntax___mmbuilder___MethidAccumulator[];
extern const char LOCATE_syntax___mmbuilder[];
extern const int SFT_syntax___mmbuilder[];
#define ID_syntax___mmbuilder___CSHSorter (SFT_syntax___mmbuilder[0])
#define COLOR_syntax___mmbuilder___CSHSorter (SFT_syntax___mmbuilder[1])
#define INIT_TABLE_POS_syntax___mmbuilder___CSHSorter (SFT_syntax___mmbuilder[2] + 0)
#define CALL_syntax___mmbuilder___CSHSorter___init(recv) ((syntax___mmbuilder___CSHSorter___init_t)CALL((recv), (SFT_syntax___mmbuilder[2] + 1)))
#define CALL_syntax___mmbuilder___MMSrcModule___do_mmbuilder(recv) ((syntax___mmbuilder___MMSrcModule___do_mmbuilder_t)CALL((recv), (SFT_syntax___mmbuilder[3] + 0)))
#define CALL_syntax___mmbuilder___MMSrcModule___process_default_classes(recv) ((syntax___mmbuilder___MMSrcModule___process_default_classes_t)CALL((recv), (SFT_syntax___mmbuilder[3] + 1)))
#define CALL_syntax___mmbuilder___MMLocalClass___accept_class_visitor(recv) ((syntax___mmbuilder___MMLocalClass___accept_class_visitor_t)CALL((recv), (SFT_syntax___mmbuilder[4] + 0)))
#define CALL_syntax___mmbuilder___MMLocalClass___accept_properties_visitor(recv) ((syntax___mmbuilder___MMLocalClass___accept_properties_visitor_t)CALL((recv), (SFT_syntax___mmbuilder[4] + 1)))
#define CALL_syntax___mmbuilder___MMSrcLocalClass___process_default_constructors(recv) ((syntax___mmbuilder___MMSrcLocalClass___process_default_constructors_t)CALL((recv), (SFT_syntax___mmbuilder[5] + 0)))
#define CALL_syntax___mmbuilder___MMSrcLocalClass___add_src_local_property(recv) ((syntax___mmbuilder___MMSrcLocalClass___add_src_local_property_t)CALL((recv), (SFT_syntax___mmbuilder[5] + 1)))
#define CALL_syntax___mmbuilder___MMLocalProperty___accept_property_visitor(recv) ((syntax___mmbuilder___MMLocalProperty___accept_property_visitor_t)CALL((recv), (SFT_syntax___mmbuilder[6] + 0)))
#define ATTR_syntax___mmbuilder___MMImplicitInit____super_init(recv) ATTR(recv, (SFT_syntax___mmbuilder[7] + 0))
#define ID_syntax___mmbuilder___MMSrcAncestor (SFT_syntax___mmbuilder[8])
#define COLOR_syntax___mmbuilder___MMSrcAncestor (SFT_syntax___mmbuilder[9])
#define ATTR_syntax___mmbuilder___MMSrcAncestor____local_class(recv) ATTR(recv, (SFT_syntax___mmbuilder[10] + 0))
#define INIT_TABLE_POS_syntax___mmbuilder___MMSrcAncestor (SFT_syntax___mmbuilder[11] + 0)
#define CALL_syntax___mmbuilder___MMSrcAncestor___init(recv) ((syntax___mmbuilder___MMSrcAncestor___init_t)CALL((recv), (SFT_syntax___mmbuilder[11] + 1)))
#define ID_syntax___mmbuilder___ClassBuilderVisitor (SFT_syntax___mmbuilder[12])
#define COLOR_syntax___mmbuilder___ClassBuilderVisitor (SFT_syntax___mmbuilder[13])
#define ATTR_syntax___mmbuilder___ClassBuilderVisitor____local_class_arity(recv) ATTR(recv, (SFT_syntax___mmbuilder[14] + 0))
#define ATTR_syntax___mmbuilder___ClassBuilderVisitor____formals(recv) ATTR(recv, (SFT_syntax___mmbuilder[14] + 1))
#define INIT_TABLE_POS_syntax___mmbuilder___ClassBuilderVisitor (SFT_syntax___mmbuilder[15] + 0)
#define CALL_syntax___mmbuilder___ClassBuilderVisitor___local_class_arity(recv) ((syntax___mmbuilder___ClassBuilderVisitor___local_class_arity_t)CALL((recv), (SFT_syntax___mmbuilder[15] + 1)))
#define CALL_syntax___mmbuilder___ClassBuilderVisitor___local_class_arity__eq(recv) ((syntax___mmbuilder___ClassBuilderVisitor___local_class_arity__eq_t)CALL((recv), (SFT_syntax___mmbuilder[15] + 2)))
#define CALL_syntax___mmbuilder___ClassBuilderVisitor___formals(recv) ((syntax___mmbuilder___ClassBuilderVisitor___formals_t)CALL((recv), (SFT_syntax___mmbuilder[15] + 3)))
#define CALL_syntax___mmbuilder___ClassBuilderVisitor___formals__eq(recv) ((syntax___mmbuilder___ClassBuilderVisitor___formals__eq_t)CALL((recv), (SFT_syntax___mmbuilder[15] + 4)))
#define CALL_syntax___mmbuilder___ClassBuilderVisitor___init(recv) ((syntax___mmbuilder___ClassBuilderVisitor___init_t)CALL((recv), (SFT_syntax___mmbuilder[15] + 5)))
#define ID_syntax___mmbuilder___ClassSpecializationBuilderVisitor (SFT_syntax___mmbuilder[16])
#define COLOR_syntax___mmbuilder___ClassSpecializationBuilderVisitor (SFT_syntax___mmbuilder[17])
#define INIT_TABLE_POS_syntax___mmbuilder___ClassSpecializationBuilderVisitor (SFT_syntax___mmbuilder[18] + 0)
#define CALL_syntax___mmbuilder___ClassSpecializationBuilderVisitor___init(recv) ((syntax___mmbuilder___ClassSpecializationBuilderVisitor___init_t)CALL((recv), (SFT_syntax___mmbuilder[18] + 1)))
#define ID_syntax___mmbuilder___ClassAncestorBuilder (SFT_syntax___mmbuilder[19])
#define COLOR_syntax___mmbuilder___ClassAncestorBuilder (SFT_syntax___mmbuilder[20])
#define INIT_TABLE_POS_syntax___mmbuilder___ClassAncestorBuilder (SFT_syntax___mmbuilder[21] + 0)
#define CALL_syntax___mmbuilder___ClassAncestorBuilder___init(recv) ((syntax___mmbuilder___ClassAncestorBuilder___init_t)CALL((recv), (SFT_syntax___mmbuilder[21] + 1)))
#define ID_syntax___mmbuilder___ClassVerifierVisitor (SFT_syntax___mmbuilder[22])
#define COLOR_syntax___mmbuilder___ClassVerifierVisitor (SFT_syntax___mmbuilder[23])
#define INIT_TABLE_POS_syntax___mmbuilder___ClassVerifierVisitor (SFT_syntax___mmbuilder[24] + 0)
#define CALL_syntax___mmbuilder___ClassVerifierVisitor___init(recv) ((syntax___mmbuilder___ClassVerifierVisitor___init_t)CALL((recv), (SFT_syntax___mmbuilder[24] + 1)))
#define ID_syntax___mmbuilder___PropertyBuilderVisitor (SFT_syntax___mmbuilder[25])
#define COLOR_syntax___mmbuilder___PropertyBuilderVisitor (SFT_syntax___mmbuilder[26])
#define INIT_TABLE_POS_syntax___mmbuilder___PropertyBuilderVisitor (SFT_syntax___mmbuilder[27] + 0)
#define CALL_syntax___mmbuilder___PropertyBuilderVisitor___init(recv) ((syntax___mmbuilder___PropertyBuilderVisitor___init_t)CALL((recv), (SFT_syntax___mmbuilder[27] + 1)))
#define ID_syntax___mmbuilder___PropertyVerifierVisitor (SFT_syntax___mmbuilder[28])
#define COLOR_syntax___mmbuilder___PropertyVerifierVisitor (SFT_syntax___mmbuilder[29])
#define ATTR_syntax___mmbuilder___PropertyVerifierVisitor____signature_builder(recv) ATTR(recv, (SFT_syntax___mmbuilder[30] + 0))
#define INIT_TABLE_POS_syntax___mmbuilder___PropertyVerifierVisitor (SFT_syntax___mmbuilder[31] + 0)
#define CALL_syntax___mmbuilder___PropertyVerifierVisitor___signature_builder(recv) ((syntax___mmbuilder___PropertyVerifierVisitor___signature_builder_t)CALL((recv), (SFT_syntax___mmbuilder[31] + 1)))
#define CALL_syntax___mmbuilder___PropertyVerifierVisitor___signature_builder__eq(recv) ((syntax___mmbuilder___PropertyVerifierVisitor___signature_builder__eq_t)CALL((recv), (SFT_syntax___mmbuilder[31] + 2)))
#define CALL_syntax___mmbuilder___PropertyVerifierVisitor___init(recv) ((syntax___mmbuilder___PropertyVerifierVisitor___init_t)CALL((recv), (SFT_syntax___mmbuilder[31] + 3)))
#define ID_syntax___mmbuilder___SignatureBuilder (SFT_syntax___mmbuilder[32])
#define COLOR_syntax___mmbuilder___SignatureBuilder (SFT_syntax___mmbuilder[33])
#define ATTR_syntax___mmbuilder___SignatureBuilder____params(recv) ATTR(recv, (SFT_syntax___mmbuilder[34] + 0))
#define ATTR_syntax___mmbuilder___SignatureBuilder____untyped_params(recv) ATTR(recv, (SFT_syntax___mmbuilder[34] + 1))
#define ATTR_syntax___mmbuilder___SignatureBuilder____vararg_rank(recv) ATTR(recv, (SFT_syntax___mmbuilder[34] + 2))
#define ATTR_syntax___mmbuilder___SignatureBuilder____closure_decls(recv) ATTR(recv, (SFT_syntax___mmbuilder[34] + 3))
#define ATTR_syntax___mmbuilder___SignatureBuilder____has_error_occured(recv) ATTR(recv, (SFT_syntax___mmbuilder[34] + 4))
#define ATTR_syntax___mmbuilder___SignatureBuilder____signature(recv) ATTR(recv, (SFT_syntax___mmbuilder[34] + 5))
#define INIT_TABLE_POS_syntax___mmbuilder___SignatureBuilder (SFT_syntax___mmbuilder[35] + 0)
#define CALL_syntax___mmbuilder___SignatureBuilder___params(recv) ((syntax___mmbuilder___SignatureBuilder___params_t)CALL((recv), (SFT_syntax___mmbuilder[35] + 1)))
#define CALL_syntax___mmbuilder___SignatureBuilder___params__eq(recv) ((syntax___mmbuilder___SignatureBuilder___params__eq_t)CALL((recv), (SFT_syntax___mmbuilder[35] + 2)))
#define CALL_syntax___mmbuilder___SignatureBuilder___untyped_params(recv) ((syntax___mmbuilder___SignatureBuilder___untyped_params_t)CALL((recv), (SFT_syntax___mmbuilder[35] + 3)))
#define CALL_syntax___mmbuilder___SignatureBuilder___untyped_params__eq(recv) ((syntax___mmbuilder___SignatureBuilder___untyped_params__eq_t)CALL((recv), (SFT_syntax___mmbuilder[35] + 4)))
#define CALL_syntax___mmbuilder___SignatureBuilder___vararg_rank(recv) ((syntax___mmbuilder___SignatureBuilder___vararg_rank_t)CALL((recv), (SFT_syntax___mmbuilder[35] + 5)))
#define CALL_syntax___mmbuilder___SignatureBuilder___vararg_rank__eq(recv) ((syntax___mmbuilder___SignatureBuilder___vararg_rank__eq_t)CALL((recv), (SFT_syntax___mmbuilder[35] + 6)))
#define CALL_syntax___mmbuilder___SignatureBuilder___closure_decls(recv) ((syntax___mmbuilder___SignatureBuilder___closure_decls_t)CALL((recv), (SFT_syntax___mmbuilder[35] + 7)))
#define CALL_syntax___mmbuilder___SignatureBuilder___closure_decls__eq(recv) ((syntax___mmbuilder___SignatureBuilder___closure_decls__eq_t)CALL((recv), (SFT_syntax___mmbuilder[35] + 8)))
#define CALL_syntax___mmbuilder___SignatureBuilder___has_error_occured(recv) ((syntax___mmbuilder___SignatureBuilder___has_error_occured_t)CALL((recv), (SFT_syntax___mmbuilder[35] + 9)))
#define CALL_syntax___mmbuilder___SignatureBuilder___has_error_occured__eq(recv) ((syntax___mmbuilder___SignatureBuilder___has_error_occured__eq_t)CALL((recv), (SFT_syntax___mmbuilder[35] + 10)))
#define CALL_syntax___mmbuilder___SignatureBuilder___signature(recv) ((syntax___mmbuilder___SignatureBuilder___signature_t)CALL((recv), (SFT_syntax___mmbuilder[35] + 11)))
#define CALL_syntax___mmbuilder___SignatureBuilder___signature__eq(recv) ((syntax___mmbuilder___SignatureBuilder___signature__eq_t)CALL((recv), (SFT_syntax___mmbuilder[35] + 12)))
#define CALL_syntax___mmbuilder___SignatureBuilder___init(recv) ((syntax___mmbuilder___SignatureBuilder___init_t)CALL((recv), (SFT_syntax___mmbuilder[35] + 13)))
#define CALL_syntax___mmbuilder___ANode___accept_class_builder(recv) ((syntax___mmbuilder___ANode___accept_class_builder_t)CALL((recv), (SFT_syntax___mmbuilder[36] + 0)))
#define CALL_syntax___mmbuilder___ANode___accept_class_specialization_builder(recv) ((syntax___mmbuilder___ANode___accept_class_specialization_builder_t)CALL((recv), (SFT_syntax___mmbuilder[36] + 1)))
#define CALL_syntax___mmbuilder___ANode___accept_class_ancestor_builder(recv) ((syntax___mmbuilder___ANode___accept_class_ancestor_builder_t)CALL((recv), (SFT_syntax___mmbuilder[36] + 2)))
#define CALL_syntax___mmbuilder___ANode___accept_class_verifier(recv) ((syntax___mmbuilder___ANode___accept_class_verifier_t)CALL((recv), (SFT_syntax___mmbuilder[36] + 3)))
#define CALL_syntax___mmbuilder___ANode___accept_property_builder(recv) ((syntax___mmbuilder___ANode___accept_property_builder_t)CALL((recv), (SFT_syntax___mmbuilder[36] + 4)))
#define CALL_syntax___mmbuilder___ANode___accept_property_verifier(recv) ((syntax___mmbuilder___ANode___accept_property_verifier_t)CALL((recv), (SFT_syntax___mmbuilder[36] + 5)))
#define CALL_syntax___mmbuilder___AModule___import_super_modules(recv) ((syntax___mmbuilder___AModule___import_super_modules_t)CALL((recv), (SFT_syntax___mmbuilder[37] + 0)))
#define CALL_syntax___mmbuilder___AImport___module_name(recv) ((syntax___mmbuilder___AImport___module_name_t)CALL((recv), (SFT_syntax___mmbuilder[38] + 0)))
#define CALL_syntax___mmbuilder___AImport___visibility_level(recv) ((syntax___mmbuilder___AImport___visibility_level_t)CALL((recv), (SFT_syntax___mmbuilder[38] + 1)))
#define CALL_syntax___mmbuilder___AVisibility___level(recv) ((syntax___mmbuilder___AVisibility___level_t)CALL((recv), (SFT_syntax___mmbuilder[39] + 0)))
#define ATTR_syntax___mmbuilder___AClassdef____local_class(recv) ATTR(recv, (SFT_syntax___mmbuilder[40] + 0))
#define CALL_syntax___mmbuilder___AClassdef___name(recv) ((syntax___mmbuilder___AClassdef___name_t)CALL((recv), (SFT_syntax___mmbuilder[41] + 0)))
#define CALL_syntax___mmbuilder___AClassdef___arity(recv) ((syntax___mmbuilder___AClassdef___arity_t)CALL((recv), (SFT_syntax___mmbuilder[41] + 1)))
#define CALL_syntax___mmbuilder___AClassdef___visibility_level(recv) ((syntax___mmbuilder___AClassdef___visibility_level_t)CALL((recv), (SFT_syntax___mmbuilder[41] + 2)))
#define CALL_SUPER_syntax___mmbuilder___AClassdef___accept_class_builder(recv) ((syntax___mmbuilder___AClassdef___accept_class_builder_t)CALL((recv), (SFT_syntax___mmbuilder[41] + 3)))
#define CALL_syntax___mmbuilder___AClassdef___build_class_introduction(recv) ((syntax___mmbuilder___AClassdef___build_class_introduction_t)CALL((recv), (SFT_syntax___mmbuilder[41] + 4)))
#define CALL_syntax___mmbuilder___AClassdef___build_class_refinement(recv) ((syntax___mmbuilder___AClassdef___build_class_refinement_t)CALL((recv), (SFT_syntax___mmbuilder[41] + 5)))
#define CALL_SUPER_syntax___mmbuilder___AClassdef___accept_class_verifier(recv) ((syntax___mmbuilder___AClassdef___accept_class_verifier_t)CALL((recv), (SFT_syntax___mmbuilder[41] + 6)))
#define CALL_SUPER_syntax___mmbuilder___AClassdef___accept_abs_syntax_visitor(recv) ((syntax___mmbuilder___AClassdef___accept_abs_syntax_visitor_t)CALL((recv), (SFT_syntax___mmbuilder[41] + 7)))
#define CALL_syntax___mmbuilder___AClasskind___is_interface(recv) ((syntax___mmbuilder___AClasskind___is_interface_t)CALL((recv), (SFT_syntax___mmbuilder[42] + 0)))
#define CALL_syntax___mmbuilder___AClasskind___is_enum(recv) ((syntax___mmbuilder___AClasskind___is_enum_t)CALL((recv), (SFT_syntax___mmbuilder[42] + 1)))
#define CALL_syntax___mmbuilder___AClasskind___is_abstract(recv) ((syntax___mmbuilder___AClasskind___is_abstract_t)CALL((recv), (SFT_syntax___mmbuilder[42] + 2)))
#define CALL_syntax___mmbuilder___AClasskind___is_extern(recv) ((syntax___mmbuilder___AClasskind___is_extern_t)CALL((recv), (SFT_syntax___mmbuilder[42] + 3)))
#define CALL_SUPER_syntax___mmbuilder___AStdClassdef___accept_class_specialization_builder(recv) ((syntax___mmbuilder___AStdClassdef___accept_class_specialization_builder_t)CALL((recv), (SFT_syntax___mmbuilder[43] + 0)))
#define CALL_SUPER_syntax___mmbuilder___AStdClassdef___accept_class_verifier(recv) ((syntax___mmbuilder___AStdClassdef___accept_class_verifier_t)CALL((recv), (SFT_syntax___mmbuilder[43] + 1)))
#define ATTR_syntax___mmbuilder___AFormaldef____formal(recv) ATTR(recv, (SFT_syntax___mmbuilder[44] + 0))
#define CALL_SUPER_syntax___mmbuilder___AFormaldef___accept_class_builder(recv) ((syntax___mmbuilder___AFormaldef___accept_class_builder_t)CALL((recv), (SFT_syntax___mmbuilder[45] + 0)))
#define CALL_SUPER_syntax___mmbuilder___AFormaldef___accept_class_verifier(recv) ((syntax___mmbuilder___AFormaldef___accept_class_verifier_t)CALL((recv), (SFT_syntax___mmbuilder[45] + 1)))
#define ATTR_syntax___mmbuilder___ASuperclass____ancestor(recv) ATTR(recv, (SFT_syntax___mmbuilder[46] + 0))
#define CALL_syntax___mmbuilder___ASuperclass___ancestor(recv) ((syntax___mmbuilder___ASuperclass___ancestor_t)CALL((recv), (SFT_syntax___mmbuilder[47] + 0)))
#define CALL_SUPER_syntax___mmbuilder___ASuperclass___accept_class_specialization_builder(recv) ((syntax___mmbuilder___ASuperclass___accept_class_specialization_builder_t)CALL((recv), (SFT_syntax___mmbuilder[47] + 1)))
#define CALL_SUPER_syntax___mmbuilder___ASuperclass___accept_class_ancestor_builder(recv) ((syntax___mmbuilder___ASuperclass___accept_class_ancestor_builder_t)CALL((recv), (SFT_syntax___mmbuilder[47] + 2)))
#define CALL_SUPER_syntax___mmbuilder___ASuperclass___accept_class_verifier(recv) ((syntax___mmbuilder___ASuperclass___accept_class_verifier_t)CALL((recv), (SFT_syntax___mmbuilder[47] + 3)))
#define CALL_syntax___mmbuilder___APropdef___process_and_check(recv) ((syntax___mmbuilder___APropdef___process_and_check_t)CALL((recv), (SFT_syntax___mmbuilder[48] + 0)))
#define CALL_syntax___mmbuilder___APropdef___do_and_check_intro(recv) ((syntax___mmbuilder___APropdef___do_and_check_intro_t)CALL((recv), (SFT_syntax___mmbuilder[48] + 1)))
#define CALL_syntax___mmbuilder___APropdef___inherit_signature(recv) ((syntax___mmbuilder___APropdef___inherit_signature_t)CALL((recv), (SFT_syntax___mmbuilder[48] + 2)))
#define CALL_syntax___mmbuilder___APropdef___do_and_check_redef(recv) ((syntax___mmbuilder___APropdef___do_and_check_redef_t)CALL((recv), (SFT_syntax___mmbuilder[48] + 3)))
#define ATTR_syntax___mmbuilder___AAttrPropdef____readmethod(recv) ATTR(recv, (SFT_syntax___mmbuilder[49] + 0))
#define ATTR_syntax___mmbuilder___AAttrPropdef____writemethod(recv) ATTR(recv, (SFT_syntax___mmbuilder[49] + 1))
#define ATTR_syntax___mmbuilder___AAttrPropdef____prop(recv) ATTR(recv, (SFT_syntax___mmbuilder[49] + 2))
#define CALL_SUPER_syntax___mmbuilder___AAttrPropdef___accept_property_builder(recv) ((syntax___mmbuilder___AAttrPropdef___accept_property_builder_t)CALL((recv), (SFT_syntax___mmbuilder[50] + 0)))
#define CALL_SUPER_syntax___mmbuilder___AAttrPropdef___accept_property_verifier(recv) ((syntax___mmbuilder___AAttrPropdef___accept_property_verifier_t)CALL((recv), (SFT_syntax___mmbuilder[50] + 1)))
#define CALL_SUPER_syntax___mmbuilder___AAttrPropdef___accept_abs_syntax_visitor(recv) ((syntax___mmbuilder___AAttrPropdef___accept_abs_syntax_visitor_t)CALL((recv), (SFT_syntax___mmbuilder[50] + 2)))
#define ATTR_syntax___mmbuilder___AMethPropdef____name(recv) ATTR(recv, (SFT_syntax___mmbuilder[51] + 0))
#define ATTR_syntax___mmbuilder___AMethPropdef____method(recv) ATTR(recv, (SFT_syntax___mmbuilder[51] + 1))
#define CALL_syntax___mmbuilder___AMethPropdef___name(recv) ((syntax___mmbuilder___AMethPropdef___name_t)CALL((recv), (SFT_syntax___mmbuilder[52] + 0)))
#define CALL_SUPER_syntax___mmbuilder___AMethPropdef___accept_property_builder(recv) ((syntax___mmbuilder___AMethPropdef___accept_property_builder_t)CALL((recv), (SFT_syntax___mmbuilder[52] + 1)))
#define CALL_SUPER_syntax___mmbuilder___AMethPropdef___accept_property_verifier(recv) ((syntax___mmbuilder___AMethPropdef___accept_property_verifier_t)CALL((recv), (SFT_syntax___mmbuilder[52] + 2)))
#define CALL_SUPER_syntax___mmbuilder___AMethPropdef___accept_abs_syntax_visitor(recv) ((syntax___mmbuilder___AMethPropdef___accept_abs_syntax_visitor_t)CALL((recv), (SFT_syntax___mmbuilder[52] + 3)))
#define CALL_SUPER_syntax___mmbuilder___AExternPropdef___accept_property_verifier(recv) ((syntax___mmbuilder___AExternPropdef___accept_property_verifier_t)CALL((recv), (SFT_syntax___mmbuilder[53] + 0)))
#define ATTR_syntax___mmbuilder___ATypePropdef____prop(recv) ATTR(recv, (SFT_syntax___mmbuilder[54] + 0))
#define CALL_SUPER_syntax___mmbuilder___ATypePropdef___accept_property_builder(recv) ((syntax___mmbuilder___ATypePropdef___accept_property_builder_t)CALL((recv), (SFT_syntax___mmbuilder[55] + 0)))
#define CALL_SUPER_syntax___mmbuilder___ATypePropdef___accept_property_verifier(recv) ((syntax___mmbuilder___ATypePropdef___accept_property_verifier_t)CALL((recv), (SFT_syntax___mmbuilder[55] + 1)))
#define CALL_SUPER_syntax___mmbuilder___ATypePropdef___accept_abs_syntax_visitor(recv) ((syntax___mmbuilder___ATypePropdef___accept_abs_syntax_visitor_t)CALL((recv), (SFT_syntax___mmbuilder[55] + 2)))
#define ID_syntax___mmbuilder___MethidAccumulator (SFT_syntax___mmbuilder[56])
#define COLOR_syntax___mmbuilder___MethidAccumulator (SFT_syntax___mmbuilder[57])
#define ATTR_syntax___mmbuilder___MethidAccumulator____name(recv) ATTR(recv, (SFT_syntax___mmbuilder[58] + 0))
#define INIT_TABLE_POS_syntax___mmbuilder___MethidAccumulator (SFT_syntax___mmbuilder[59] + 0)
#define CALL_syntax___mmbuilder___MethidAccumulator___name(recv) ((syntax___mmbuilder___MethidAccumulator___name_t)CALL((recv), (SFT_syntax___mmbuilder[59] + 1)))
#define ATTR_syntax___mmbuilder___AMethid____name(recv) ATTR(recv, (SFT_syntax___mmbuilder[60] + 0))
#define CALL_SUPER_syntax___mmbuilder___AMethid___accept_property_builder(recv) ((syntax___mmbuilder___AMethid___accept_property_builder_t)CALL((recv), (SFT_syntax___mmbuilder[61] + 0)))
#define CALL_SUPER_syntax___mmbuilder___ASignature___accept_property_verifier(recv) ((syntax___mmbuilder___ASignature___accept_property_verifier_t)CALL((recv), (SFT_syntax___mmbuilder[62] + 0)))
#define CALL_syntax___mmbuilder___ASignature___check_visibility(recv) ((syntax___mmbuilder___ASignature___check_visibility_t)CALL((recv), (SFT_syntax___mmbuilder[62] + 1)))
#define ATTR_syntax___mmbuilder___AParam____position(recv) ATTR(recv, (SFT_syntax___mmbuilder[63] + 0))
#define ATTR_syntax___mmbuilder___AParam____variable(recv) ATTR(recv, (SFT_syntax___mmbuilder[63] + 1))
#define ATTR_syntax___mmbuilder___AParam____stype(recv) ATTR(recv, (SFT_syntax___mmbuilder[63] + 2))
#define CALL_syntax___mmbuilder___AParam___stype(recv) ((syntax___mmbuilder___AParam___stype_t)CALL((recv), (SFT_syntax___mmbuilder[64] + 0)))
#define CALL_syntax___mmbuilder___AParam___stype__eq(recv) ((syntax___mmbuilder___AParam___stype__eq_t)CALL((recv), (SFT_syntax___mmbuilder[64] + 1)))
#define CALL_SUPER_syntax___mmbuilder___AParam___accept_property_verifier(recv) ((syntax___mmbuilder___AParam___accept_property_verifier_t)CALL((recv), (SFT_syntax___mmbuilder[64] + 2)))
#define CALL_syntax___mmbuilder___AParam___is_vararg(recv) ((syntax___mmbuilder___AParam___is_vararg_t)CALL((recv), (SFT_syntax___mmbuilder[64] + 3)))
#define ATTR_syntax___mmbuilder___AClosureDecl____position(recv) ATTR(recv, (SFT_syntax___mmbuilder[65] + 0))
#define ATTR_syntax___mmbuilder___AClosureDecl____variable(recv) ATTR(recv, (SFT_syntax___mmbuilder[65] + 1))
#define CALL_SUPER_syntax___mmbuilder___AClosureDecl___accept_property_verifier(recv) ((syntax___mmbuilder___AClosureDecl___accept_property_verifier_t)CALL((recv), (SFT_syntax___mmbuilder[66] + 0)))
#define CALL_syntax___mmbuilder___AType___check_visibility(recv) ((syntax___mmbuilder___AType___check_visibility_t)CALL((recv), (SFT_syntax___mmbuilder[67] + 0)))
#define CALL_syntax___mmbuilder___AExpr___get_easy_stype(recv) ((syntax___mmbuilder___AExpr___get_easy_stype_t)CALL((recv), (SFT_syntax___mmbuilder[68] + 0)))
void syntax___mmbuilder___ToolContext___handle_property_conflict(val_t p0, val_t p1, val_t p2);
typedef void (*syntax___mmbuilder___ToolContext___handle_property_conflict_t)(val_t p0, val_t p1, val_t p2);
val_t NEW_ToolContext_toolcontext___ToolContext___init();
val_t syntax___mmbuilder___CSHSorter___compare(val_t p0, val_t p1, val_t p2);
typedef val_t (*syntax___mmbuilder___CSHSorter___compare_t)(val_t p0, val_t p1, val_t p2);
void syntax___mmbuilder___CSHSorter___init(val_t p0, int* init_table);
typedef void (*syntax___mmbuilder___CSHSorter___init_t)(val_t p0, int* init_table);
val_t NEW_CSHSorter_syntax___mmbuilder___CSHSorter___init();
void syntax___mmbuilder___MMSrcModule___do_mmbuilder(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___MMSrcModule___do_mmbuilder_t)(val_t p0, val_t p1);
  typedef void (*CLOS_OC_syntax___mmbuilder___MMSrcModule___do_mmbuilder_1_0)(struct stack_frame_t *);
  void OC_syntax___mmbuilder___MMSrcModule___do_mmbuilder_1(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
  typedef void (*OC_syntax___mmbuilder___MMSrcModule___do_mmbuilder_1_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
void syntax___mmbuilder___MMSrcModule___process_default_classes(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___MMSrcModule___process_default_classes_t)(val_t p0, val_t p1);
val_t NEW_MMSrcModule_syntax___syntax_base___MMSrcModule___init(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
void syntax___mmbuilder___MMLocalClass___accept_class_visitor(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___MMLocalClass___accept_class_visitor_t)(val_t p0, val_t p1);
void syntax___mmbuilder___MMLocalClass___accept_properties_visitor(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___MMLocalClass___accept_properties_visitor_t)(val_t p0, val_t p1);
val_t NEW_MMLocalClass_metamodel___abstractmetamodel___MMLocalClass___init(val_t p0, val_t p1, val_t p2);
void syntax___mmbuilder___MMSrcLocalClass___accept_class_visitor(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___MMSrcLocalClass___accept_class_visitor_t)(val_t p0, val_t p1);
void syntax___mmbuilder___MMSrcLocalClass___accept_properties_visitor(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___MMSrcLocalClass___accept_properties_visitor_t)(val_t p0, val_t p1);
  typedef void (*CLOS_OC_syntax___mmbuilder___MMSrcLocalClass___accept_properties_visitor_2_0)(struct stack_frame_t *);
  void OC_syntax___mmbuilder___MMSrcLocalClass___accept_properties_visitor_2(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
  typedef void (*OC_syntax___mmbuilder___MMSrcLocalClass___accept_properties_visitor_2_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
void syntax___mmbuilder___MMSrcLocalClass___process_default_constructors(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___MMSrcLocalClass___process_default_constructors_t)(val_t p0, val_t p1);
  typedef void (*CLOS_OC_syntax___mmbuilder___MMSrcLocalClass___process_default_constructors_1_0)(struct stack_frame_t *);
  void OC_syntax___mmbuilder___MMSrcLocalClass___process_default_constructors_1(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
  typedef void (*OC_syntax___mmbuilder___MMSrcLocalClass___process_default_constructors_1_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
      void OC_syntax___mmbuilder___MMSrcLocalClass___process_default_constructors_5(struct stack_frame_t *closctx, val_t p0);
      typedef void (*OC_syntax___mmbuilder___MMSrcLocalClass___process_default_constructors_5_t)(struct stack_frame_t *closctx, val_t p0);
  typedef void (*CLOS_OC_syntax___mmbuilder___MMSrcLocalClass___process_default_constructors_10_0)(struct stack_frame_t *);
  void OC_syntax___mmbuilder___MMSrcLocalClass___process_default_constructors_10(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
  typedef void (*OC_syntax___mmbuilder___MMSrcLocalClass___process_default_constructors_10_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
    typedef void (*CLOS_OC_syntax___mmbuilder___MMSrcLocalClass___process_default_constructors_11_0)(struct stack_frame_t *);
    void OC_syntax___mmbuilder___MMSrcLocalClass___process_default_constructors_11(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
    typedef void (*OC_syntax___mmbuilder___MMSrcLocalClass___process_default_constructors_11_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
    typedef void (*CLOS_OC_syntax___mmbuilder___MMSrcLocalClass___process_default_constructors_19_0)(struct stack_frame_t *);
    void OC_syntax___mmbuilder___MMSrcLocalClass___process_default_constructors_19(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
    typedef void (*OC_syntax___mmbuilder___MMSrcLocalClass___process_default_constructors_19_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
void syntax___mmbuilder___MMSrcLocalClass___add_src_local_property(val_t p0, val_t p1, val_t p2);
typedef void (*syntax___mmbuilder___MMSrcLocalClass___add_src_local_property_t)(val_t p0, val_t p1, val_t p2);
val_t NEW_MMSrcLocalClass_syntax___syntax_base___MMSrcLocalClass___init(val_t p0, val_t p1, val_t p2, val_t p3);
void syntax___mmbuilder___MMLocalProperty___accept_property_visitor(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___MMLocalProperty___accept_property_visitor_t)(val_t p0, val_t p1);
val_t NEW_MMLocalProperty_metamodel___abstractmetamodel___MMLocalProperty___init(val_t p0, val_t p1);
val_t syntax___mmbuilder___MMImplicitInit___super_init(val_t p0);
typedef val_t (*syntax___mmbuilder___MMImplicitInit___super_init_t)(val_t p0);
void syntax___mmbuilder___MMImplicitInit___accept_property_visitor(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___MMImplicitInit___accept_property_visitor_t)(val_t p0, val_t p1);
val_t NEW_MMImplicitInit_syntax___syntax_base___MMImplicitInit___init(val_t p0, val_t p1, val_t p2);
val_t syntax___mmbuilder___MMSrcAncestor___local_class(val_t p0);
typedef val_t (*syntax___mmbuilder___MMSrcAncestor___local_class_t)(val_t p0);
void syntax___mmbuilder___MMSrcAncestor___init(val_t p0, val_t p1, int* init_table);
typedef void (*syntax___mmbuilder___MMSrcAncestor___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_MMSrcAncestor_syntax___mmbuilder___MMSrcAncestor___init(val_t p0);
val_t syntax___mmbuilder___ClassBuilderVisitor___local_class_arity(val_t p0);
typedef val_t (*syntax___mmbuilder___ClassBuilderVisitor___local_class_arity_t)(val_t p0);
void syntax___mmbuilder___ClassBuilderVisitor___local_class_arity__eq(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___ClassBuilderVisitor___local_class_arity__eq_t)(val_t p0, val_t p1);
val_t syntax___mmbuilder___ClassBuilderVisitor___formals(val_t p0);
typedef val_t (*syntax___mmbuilder___ClassBuilderVisitor___formals_t)(val_t p0);
void syntax___mmbuilder___ClassBuilderVisitor___formals__eq(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___ClassBuilderVisitor___formals__eq_t)(val_t p0, val_t p1);
void syntax___mmbuilder___ClassBuilderVisitor___visit(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___ClassBuilderVisitor___visit_t)(val_t p0, val_t p1);
void syntax___mmbuilder___ClassBuilderVisitor___init(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*syntax___mmbuilder___ClassBuilderVisitor___init_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_ClassBuilderVisitor_syntax___mmbuilder___ClassBuilderVisitor___init(val_t p0, val_t p1);
void syntax___mmbuilder___ClassSpecializationBuilderVisitor___visit(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___ClassSpecializationBuilderVisitor___visit_t)(val_t p0, val_t p1);
void syntax___mmbuilder___ClassSpecializationBuilderVisitor___init(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*syntax___mmbuilder___ClassSpecializationBuilderVisitor___init_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_ClassSpecializationBuilderVisitor_syntax___mmbuilder___ClassSpecializationBuilderVisitor___init(val_t p0, val_t p1);
void syntax___mmbuilder___ClassAncestorBuilder___visit(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___ClassAncestorBuilder___visit_t)(val_t p0, val_t p1);
void syntax___mmbuilder___ClassAncestorBuilder___init(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*syntax___mmbuilder___ClassAncestorBuilder___init_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_ClassAncestorBuilder_syntax___mmbuilder___ClassAncestorBuilder___init(val_t p0, val_t p1);
void syntax___mmbuilder___ClassVerifierVisitor___visit(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___ClassVerifierVisitor___visit_t)(val_t p0, val_t p1);
void syntax___mmbuilder___ClassVerifierVisitor___init(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*syntax___mmbuilder___ClassVerifierVisitor___init_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_ClassVerifierVisitor_syntax___mmbuilder___ClassVerifierVisitor___init(val_t p0, val_t p1);
void syntax___mmbuilder___PropertyBuilderVisitor___visit(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___PropertyBuilderVisitor___visit_t)(val_t p0, val_t p1);
void syntax___mmbuilder___PropertyBuilderVisitor___init(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*syntax___mmbuilder___PropertyBuilderVisitor___init_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_PropertyBuilderVisitor_syntax___mmbuilder___PropertyBuilderVisitor___init(val_t p0, val_t p1);
val_t syntax___mmbuilder___PropertyVerifierVisitor___signature_builder(val_t p0);
typedef val_t (*syntax___mmbuilder___PropertyVerifierVisitor___signature_builder_t)(val_t p0);
void syntax___mmbuilder___PropertyVerifierVisitor___signature_builder__eq(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___PropertyVerifierVisitor___signature_builder__eq_t)(val_t p0, val_t p1);
void syntax___mmbuilder___PropertyVerifierVisitor___visit(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___PropertyVerifierVisitor___visit_t)(val_t p0, val_t p1);
void syntax___mmbuilder___PropertyVerifierVisitor___init(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*syntax___mmbuilder___PropertyVerifierVisitor___init_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_PropertyVerifierVisitor_syntax___mmbuilder___PropertyVerifierVisitor___init(val_t p0, val_t p1);
val_t syntax___mmbuilder___SignatureBuilder___params(val_t p0);
typedef val_t (*syntax___mmbuilder___SignatureBuilder___params_t)(val_t p0);
void syntax___mmbuilder___SignatureBuilder___params__eq(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___SignatureBuilder___params__eq_t)(val_t p0, val_t p1);
val_t syntax___mmbuilder___SignatureBuilder___untyped_params(val_t p0);
typedef val_t (*syntax___mmbuilder___SignatureBuilder___untyped_params_t)(val_t p0);
void syntax___mmbuilder___SignatureBuilder___untyped_params__eq(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___SignatureBuilder___untyped_params__eq_t)(val_t p0, val_t p1);
val_t syntax___mmbuilder___SignatureBuilder___vararg_rank(val_t p0);
typedef val_t (*syntax___mmbuilder___SignatureBuilder___vararg_rank_t)(val_t p0);
void syntax___mmbuilder___SignatureBuilder___vararg_rank__eq(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___SignatureBuilder___vararg_rank__eq_t)(val_t p0, val_t p1);
val_t syntax___mmbuilder___SignatureBuilder___closure_decls(val_t p0);
typedef val_t (*syntax___mmbuilder___SignatureBuilder___closure_decls_t)(val_t p0);
void syntax___mmbuilder___SignatureBuilder___closure_decls__eq(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___SignatureBuilder___closure_decls__eq_t)(val_t p0, val_t p1);
val_t syntax___mmbuilder___SignatureBuilder___has_error_occured(val_t p0);
typedef val_t (*syntax___mmbuilder___SignatureBuilder___has_error_occured_t)(val_t p0);
void syntax___mmbuilder___SignatureBuilder___has_error_occured__eq(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___SignatureBuilder___has_error_occured__eq_t)(val_t p0, val_t p1);
val_t syntax___mmbuilder___SignatureBuilder___signature(val_t p0);
typedef val_t (*syntax___mmbuilder___SignatureBuilder___signature_t)(val_t p0);
void syntax___mmbuilder___SignatureBuilder___signature__eq(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___SignatureBuilder___signature__eq_t)(val_t p0, val_t p1);
void syntax___mmbuilder___SignatureBuilder___init(val_t p0, int* init_table);
typedef void (*syntax___mmbuilder___SignatureBuilder___init_t)(val_t p0, int* init_table);
val_t NEW_SignatureBuilder_syntax___mmbuilder___SignatureBuilder___init();
void syntax___mmbuilder___ANode___accept_class_builder(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___ANode___accept_class_builder_t)(val_t p0, val_t p1);
void syntax___mmbuilder___ANode___accept_class_specialization_builder(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___ANode___accept_class_specialization_builder_t)(val_t p0, val_t p1);
void syntax___mmbuilder___ANode___accept_class_ancestor_builder(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___ANode___accept_class_ancestor_builder_t)(val_t p0, val_t p1);
void syntax___mmbuilder___ANode___accept_class_verifier(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___ANode___accept_class_verifier_t)(val_t p0, val_t p1);
void syntax___mmbuilder___ANode___accept_property_builder(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___ANode___accept_property_builder_t)(val_t p0, val_t p1);
void syntax___mmbuilder___ANode___accept_property_verifier(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___ANode___accept_property_verifier_t)(val_t p0, val_t p1);
val_t NEW_ANode_parser___parser_nodes___ANode___init();
void syntax___mmbuilder___AModule___import_super_modules(val_t p0, val_t p1, val_t p2);
typedef void (*syntax___mmbuilder___AModule___import_super_modules_t)(val_t p0, val_t p1, val_t p2);
  typedef void (*CLOS_OC_syntax___mmbuilder___AModule___import_super_modules_1_0)(struct stack_frame_t *);
  void OC_syntax___mmbuilder___AModule___import_super_modules_1(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
  typedef void (*OC_syntax___mmbuilder___AModule___import_super_modules_1_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
val_t NEW_AModule_parser___parser_prod___AModule___empty_init();
val_t NEW_AModule_parser___parser_prod___AModule___init_amodule(val_t p0, val_t p1, val_t p2, val_t p3);
val_t NEW_AModule_parser___parser_nodes___ANode___init();
void syntax___mmbuilder___AModuledecl___accept_class_builder(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___AModuledecl___accept_class_builder_t)(val_t p0, val_t p1);
val_t NEW_AModuledecl_parser___parser_prod___AModuledecl___empty_init();
val_t NEW_AModuledecl_parser___parser_prod___AModuledecl___init_amoduledecl(val_t p0, val_t p1, val_t p2, val_t p3);
val_t NEW_AModuledecl_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___AImport___module_name(val_t p0);
typedef val_t (*syntax___mmbuilder___AImport___module_name_t)(val_t p0);
val_t syntax___mmbuilder___AImport___visibility_level(val_t p0);
typedef val_t (*syntax___mmbuilder___AImport___visibility_level_t)(val_t p0);
val_t NEW_AImport_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___AStdImport___module_name(val_t p0);
typedef val_t (*syntax___mmbuilder___AStdImport___module_name_t)(val_t p0);
val_t syntax___mmbuilder___AStdImport___visibility_level(val_t p0);
typedef val_t (*syntax___mmbuilder___AStdImport___visibility_level_t)(val_t p0);
val_t NEW_AStdImport_parser___parser_prod___AStdImport___empty_init();
val_t NEW_AStdImport_parser___parser_prod___AStdImport___init_astdimport(val_t p0, val_t p1, val_t p2, val_t p3);
val_t NEW_AStdImport_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___ANoImport___module_name(val_t p0);
typedef val_t (*syntax___mmbuilder___ANoImport___module_name_t)(val_t p0);
val_t NEW_ANoImport_parser___parser_prod___ANoImport___empty_init();
val_t NEW_ANoImport_parser___parser_prod___ANoImport___init_anoimport(val_t p0, val_t p1, val_t p2);
val_t NEW_ANoImport_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___AVisibility___level(val_t p0);
typedef val_t (*syntax___mmbuilder___AVisibility___level_t)(val_t p0);
val_t NEW_AVisibility_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___APublicVisibility___level(val_t p0);
typedef val_t (*syntax___mmbuilder___APublicVisibility___level_t)(val_t p0);
val_t NEW_APublicVisibility_parser___parser_prod___APublicVisibility___empty_init();
val_t NEW_APublicVisibility_parser___parser_prod___APublicVisibility___init_apublicvisibility();
val_t NEW_APublicVisibility_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___AProtectedVisibility___level(val_t p0);
typedef val_t (*syntax___mmbuilder___AProtectedVisibility___level_t)(val_t p0);
val_t NEW_AProtectedVisibility_parser___parser_prod___AProtectedVisibility___empty_init();
val_t NEW_AProtectedVisibility_parser___parser_prod___AProtectedVisibility___init_aprotectedvisibility(val_t p0);
val_t NEW_AProtectedVisibility_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___APrivateVisibility___level(val_t p0);
typedef val_t (*syntax___mmbuilder___APrivateVisibility___level_t)(val_t p0);
val_t NEW_APrivateVisibility_parser___parser_prod___APrivateVisibility___empty_init();
val_t NEW_APrivateVisibility_parser___parser_prod___APrivateVisibility___init_aprivatevisibility(val_t p0);
val_t NEW_APrivateVisibility_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___AIntrudeVisibility___level(val_t p0);
typedef val_t (*syntax___mmbuilder___AIntrudeVisibility___level_t)(val_t p0);
val_t NEW_AIntrudeVisibility_parser___parser_prod___AIntrudeVisibility___empty_init();
val_t NEW_AIntrudeVisibility_parser___parser_prod___AIntrudeVisibility___init_aintrudevisibility(val_t p0);
val_t NEW_AIntrudeVisibility_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___AClassdef___local_class(val_t p0);
typedef val_t (*syntax___mmbuilder___AClassdef___local_class_t)(val_t p0);
val_t syntax___mmbuilder___AClassdef___name(val_t p0);
typedef val_t (*syntax___mmbuilder___AClassdef___name_t)(val_t p0);
val_t syntax___mmbuilder___AClassdef___arity(val_t p0);
typedef val_t (*syntax___mmbuilder___AClassdef___arity_t)(val_t p0);
val_t syntax___mmbuilder___AClassdef___visibility_level(val_t p0);
typedef val_t (*syntax___mmbuilder___AClassdef___visibility_level_t)(val_t p0);
void syntax___mmbuilder___AClassdef___accept_class_builder(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___AClassdef___accept_class_builder_t)(val_t p0, val_t p1);
void syntax___mmbuilder___AClassdef___build_class_introduction(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___AClassdef___build_class_introduction_t)(val_t p0, val_t p1);
void syntax___mmbuilder___AClassdef___build_class_refinement(val_t p0, val_t p1, val_t p2);
typedef void (*syntax___mmbuilder___AClassdef___build_class_refinement_t)(val_t p0, val_t p1, val_t p2);
void syntax___mmbuilder___AClassdef___accept_class_verifier(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___AClassdef___accept_class_verifier_t)(val_t p0, val_t p1);
void syntax___mmbuilder___AClassdef___accept_abs_syntax_visitor(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___AClassdef___accept_abs_syntax_visitor_t)(val_t p0, val_t p1);
val_t NEW_AClassdef_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___AClasskind___is_interface(val_t p0);
typedef val_t (*syntax___mmbuilder___AClasskind___is_interface_t)(val_t p0);
val_t syntax___mmbuilder___AClasskind___is_enum(val_t p0);
typedef val_t (*syntax___mmbuilder___AClasskind___is_enum_t)(val_t p0);
val_t syntax___mmbuilder___AClasskind___is_abstract(val_t p0);
typedef val_t (*syntax___mmbuilder___AClasskind___is_abstract_t)(val_t p0);
val_t syntax___mmbuilder___AClasskind___is_extern(val_t p0);
typedef val_t (*syntax___mmbuilder___AClasskind___is_extern_t)(val_t p0);
val_t NEW_AClasskind_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___AInterfaceClasskind___is_interface(val_t p0);
typedef val_t (*syntax___mmbuilder___AInterfaceClasskind___is_interface_t)(val_t p0);
val_t NEW_AInterfaceClasskind_parser___parser_prod___AInterfaceClasskind___empty_init();
val_t NEW_AInterfaceClasskind_parser___parser_prod___AInterfaceClasskind___init_ainterfaceclasskind(val_t p0);
val_t NEW_AInterfaceClasskind_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___AEnumClasskind___is_enum(val_t p0);
typedef val_t (*syntax___mmbuilder___AEnumClasskind___is_enum_t)(val_t p0);
val_t NEW_AEnumClasskind_parser___parser_prod___AEnumClasskind___empty_init();
val_t NEW_AEnumClasskind_parser___parser_prod___AEnumClasskind___init_aenumclasskind(val_t p0);
val_t NEW_AEnumClasskind_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___AExternClasskind___is_extern(val_t p0);
typedef val_t (*syntax___mmbuilder___AExternClasskind___is_extern_t)(val_t p0);
val_t NEW_AExternClasskind_parser___parser_prod___AExternClasskind___empty_init();
val_t NEW_AExternClasskind_parser___parser_prod___AExternClasskind___init_aexternclasskind(val_t p0, val_t p1);
val_t NEW_AExternClasskind_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___AAbstractClasskind___is_abstract(val_t p0);
typedef val_t (*syntax___mmbuilder___AAbstractClasskind___is_abstract_t)(val_t p0);
val_t NEW_AAbstractClasskind_parser___parser_prod___AAbstractClasskind___empty_init();
val_t NEW_AAbstractClasskind_parser___parser_prod___AAbstractClasskind___init_aabstractclasskind(val_t p0, val_t p1);
val_t NEW_AAbstractClasskind_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___AStdClassdef___name(val_t p0);
typedef val_t (*syntax___mmbuilder___AStdClassdef___name_t)(val_t p0);
val_t syntax___mmbuilder___AStdClassdef___arity(val_t p0);
typedef val_t (*syntax___mmbuilder___AStdClassdef___arity_t)(val_t p0);
void syntax___mmbuilder___AStdClassdef___accept_class_specialization_builder(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___AStdClassdef___accept_class_specialization_builder_t)(val_t p0, val_t p1);
void syntax___mmbuilder___AStdClassdef___accept_class_verifier(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___AStdClassdef___accept_class_verifier_t)(val_t p0, val_t p1);
val_t syntax___mmbuilder___AStdClassdef___visibility_level(val_t p0);
typedef val_t (*syntax___mmbuilder___AStdClassdef___visibility_level_t)(val_t p0);
val_t NEW_AStdClassdef_parser___parser_prod___AStdClassdef___empty_init();
val_t NEW_AStdClassdef_parser___parser_prod___AStdClassdef___init_astdclassdef(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4, val_t p5, val_t p6, val_t p7, val_t p8, val_t p9, val_t p10);
val_t NEW_AStdClassdef_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___AMainClassdef___name(val_t p0);
typedef val_t (*syntax___mmbuilder___AMainClassdef___name_t)(val_t p0);
val_t NEW_AMainClassdef_parser___parser_prod___AMainClassdef___empty_init();
val_t NEW_AMainClassdef_parser___parser_prod___AMainClassdef___init_amainclassdef(val_t p0);
val_t NEW_AMainClassdef_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___ATopClassdef___name(val_t p0);
typedef val_t (*syntax___mmbuilder___ATopClassdef___name_t)(val_t p0);
val_t NEW_ATopClassdef_parser___parser_prod___ATopClassdef___empty_init();
val_t NEW_ATopClassdef_parser___parser_prod___ATopClassdef___init_atopclassdef(val_t p0);
val_t NEW_ATopClassdef_parser___parser_nodes___ANode___init();
void syntax___mmbuilder___AFormaldef___accept_class_builder(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___AFormaldef___accept_class_builder_t)(val_t p0, val_t p1);
void syntax___mmbuilder___AFormaldef___accept_class_verifier(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___AFormaldef___accept_class_verifier_t)(val_t p0, val_t p1);
val_t NEW_AFormaldef_parser___parser_prod___AFormaldef___empty_init();
val_t NEW_AFormaldef_parser___parser_prod___AFormaldef___init_aformaldef(val_t p0, val_t p1, val_t p2);
val_t NEW_AFormaldef_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___ASuperclass___ancestor(val_t p0);
typedef val_t (*syntax___mmbuilder___ASuperclass___ancestor_t)(val_t p0);
void syntax___mmbuilder___ASuperclass___accept_class_specialization_builder(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___ASuperclass___accept_class_specialization_builder_t)(val_t p0, val_t p1);
void syntax___mmbuilder___ASuperclass___accept_class_ancestor_builder(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___ASuperclass___accept_class_ancestor_builder_t)(val_t p0, val_t p1);
void syntax___mmbuilder___ASuperclass___accept_class_verifier(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___ASuperclass___accept_class_verifier_t)(val_t p0, val_t p1);
val_t NEW_ASuperclass_parser___parser_prod___ASuperclass___empty_init();
val_t NEW_ASuperclass_parser___parser_prod___ASuperclass___init_asuperclass(val_t p0, val_t p1, val_t p2);
val_t NEW_ASuperclass_parser___parser_nodes___ANode___init();
void syntax___mmbuilder___APropdef___process_and_check(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
typedef void (*syntax___mmbuilder___APropdef___process_and_check_t)(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
void syntax___mmbuilder___APropdef___do_and_check_intro(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
typedef void (*syntax___mmbuilder___APropdef___do_and_check_intro_t)(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
void syntax___mmbuilder___APropdef___inherit_signature(val_t p0, val_t p1, val_t p2, val_t p3);
typedef void (*syntax___mmbuilder___APropdef___inherit_signature_t)(val_t p0, val_t p1, val_t p2, val_t p3);
void syntax___mmbuilder___APropdef___do_and_check_redef(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
typedef void (*syntax___mmbuilder___APropdef___do_and_check_redef_t)(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
val_t NEW_APropdef_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___AAttrPropdef___readmethod(val_t p0);
typedef val_t (*syntax___mmbuilder___AAttrPropdef___readmethod_t)(val_t p0);
val_t syntax___mmbuilder___AAttrPropdef___writemethod(val_t p0);
typedef val_t (*syntax___mmbuilder___AAttrPropdef___writemethod_t)(val_t p0);
val_t syntax___mmbuilder___AAttrPropdef___prop(val_t p0);
typedef val_t (*syntax___mmbuilder___AAttrPropdef___prop_t)(val_t p0);
void syntax___mmbuilder___AAttrPropdef___accept_property_builder(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___AAttrPropdef___accept_property_builder_t)(val_t p0, val_t p1);
void syntax___mmbuilder___AAttrPropdef___accept_property_verifier(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___AAttrPropdef___accept_property_verifier_t)(val_t p0, val_t p1);
void syntax___mmbuilder___AAttrPropdef___accept_abs_syntax_visitor(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___AAttrPropdef___accept_abs_syntax_visitor_t)(val_t p0, val_t p1);
val_t NEW_AAttrPropdef_parser___parser_prod___AAttrPropdef___empty_init();
val_t NEW_AAttrPropdef_parser___parser_prod___AAttrPropdef___init_aattrpropdef(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4, val_t p5, val_t p6, val_t p7, val_t p8, val_t p9, val_t p10);
val_t NEW_AAttrPropdef_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___AMethPropdef___name(val_t p0);
typedef val_t (*syntax___mmbuilder___AMethPropdef___name_t)(val_t p0);
val_t syntax___mmbuilder___AMethPropdef___method(val_t p0);
typedef val_t (*syntax___mmbuilder___AMethPropdef___method_t)(val_t p0);
void syntax___mmbuilder___AMethPropdef___accept_property_builder(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___AMethPropdef___accept_property_builder_t)(val_t p0, val_t p1);
void syntax___mmbuilder___AMethPropdef___accept_property_verifier(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___AMethPropdef___accept_property_verifier_t)(val_t p0, val_t p1);
void syntax___mmbuilder___AMethPropdef___accept_abs_syntax_visitor(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___AMethPropdef___accept_abs_syntax_visitor_t)(val_t p0, val_t p1);
val_t NEW_AMethPropdef_parser___parser_prod___AMethPropdef___empty_init();
val_t NEW_AMethPropdef_parser___parser_prod___AMethPropdef___init_amethpropdef(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
val_t NEW_AMethPropdef_parser___parser_nodes___ANode___init();
void syntax___mmbuilder___AMainMethPropdef___process_and_check(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
typedef void (*syntax___mmbuilder___AMainMethPropdef___process_and_check_t)(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
val_t NEW_AMainMethPropdef_parser___parser_prod___AConcreteMethPropdef___empty_init();
val_t NEW_AMainMethPropdef_parser___parser_prod___AMainMethPropdef___empty_init();
val_t NEW_AMainMethPropdef_parser___parser_prod___AMainMethPropdef___init_amainmethpropdef(val_t p0, val_t p1);
val_t NEW_AMainMethPropdef_parser___parser_nodes___ANode___init();
val_t NEW_AMainMethPropdef_parser___parser_prod___AMethPropdef___empty_init();
val_t NEW_AMainMethPropdef_parser___parser_prod___AConcreteMethPropdef___init_aconcretemethpropdef(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4, val_t p5, val_t p6, val_t p7);
val_t NEW_AMainMethPropdef_parser___parser_prod___AMethPropdef___init_amethpropdef(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
void syntax___mmbuilder___AExternPropdef___accept_property_verifier(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___AExternPropdef___accept_property_verifier_t)(val_t p0, val_t p1);
val_t NEW_AExternPropdef_parser___parser_nodes___ANode___init();
val_t NEW_AExternPropdef_parser___parser_prod___AMethPropdef___empty_init();
val_t NEW_AExternPropdef_parser___parser_prod___AMethPropdef___init_amethpropdef(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
val_t syntax___mmbuilder___ATypePropdef___prop(val_t p0);
typedef val_t (*syntax___mmbuilder___ATypePropdef___prop_t)(val_t p0);
void syntax___mmbuilder___ATypePropdef___accept_property_builder(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___ATypePropdef___accept_property_builder_t)(val_t p0, val_t p1);
void syntax___mmbuilder___ATypePropdef___accept_property_verifier(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___ATypePropdef___accept_property_verifier_t)(val_t p0, val_t p1);
void syntax___mmbuilder___ATypePropdef___accept_abs_syntax_visitor(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___ATypePropdef___accept_abs_syntax_visitor_t)(val_t p0, val_t p1);
val_t NEW_ATypePropdef_parser___parser_prod___ATypePropdef___empty_init();
val_t NEW_ATypePropdef_parser___parser_prod___ATypePropdef___init_atypepropdef(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4, val_t p5, val_t p6);
val_t NEW_ATypePropdef_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___MethidAccumulator___name(val_t p0);
typedef val_t (*syntax___mmbuilder___MethidAccumulator___name_t)(val_t p0);
void syntax___mmbuilder___MethidAccumulator___visit(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___MethidAccumulator___visit_t)(val_t p0, val_t p1);
val_t NEW_MethidAccumulator_parser___parser_nodes___Visitor___init();
val_t syntax___mmbuilder___AMethid___name(val_t p0);
typedef val_t (*syntax___mmbuilder___AMethid___name_t)(val_t p0);
void syntax___mmbuilder___AMethid___accept_property_builder(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___AMethid___accept_property_builder_t)(val_t p0, val_t p1);
val_t NEW_AMethid_parser___parser_nodes___ANode___init();
void syntax___mmbuilder___ASignature___accept_property_verifier(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___ASignature___accept_property_verifier_t)(val_t p0, val_t p1);
void syntax___mmbuilder___ASignature___check_visibility(val_t p0, val_t p1, val_t p2);
typedef void (*syntax___mmbuilder___ASignature___check_visibility_t)(val_t p0, val_t p1, val_t p2);
  typedef void (*CLOS_OC_syntax___mmbuilder___ASignature___check_visibility_2_0)(struct stack_frame_t *);
  void OC_syntax___mmbuilder___ASignature___check_visibility_2(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
  typedef void (*OC_syntax___mmbuilder___ASignature___check_visibility_2_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
val_t NEW_ASignature_parser___parser_prod___ASignature___empty_init();
val_t NEW_ASignature_parser___parser_prod___ASignature___init_asignature(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
val_t NEW_ASignature_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___AParam___position(val_t p0);
typedef val_t (*syntax___mmbuilder___AParam___position_t)(val_t p0);
val_t syntax___mmbuilder___AParam___variable(val_t p0);
typedef val_t (*syntax___mmbuilder___AParam___variable_t)(val_t p0);
val_t syntax___mmbuilder___AParam___stype(val_t p0);
typedef val_t (*syntax___mmbuilder___AParam___stype_t)(val_t p0);
void syntax___mmbuilder___AParam___stype__eq(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___AParam___stype__eq_t)(val_t p0, val_t p1);
void syntax___mmbuilder___AParam___accept_property_verifier(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___AParam___accept_property_verifier_t)(val_t p0, val_t p1);
val_t syntax___mmbuilder___AParam___is_vararg(val_t p0);
typedef val_t (*syntax___mmbuilder___AParam___is_vararg_t)(val_t p0);
val_t NEW_AParam_parser___parser_prod___AParam___empty_init();
val_t NEW_AParam_parser___parser_prod___AParam___init_aparam(val_t p0, val_t p1, val_t p2, val_t p3);
val_t NEW_AParam_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___AClosureDecl___position(val_t p0);
typedef val_t (*syntax___mmbuilder___AClosureDecl___position_t)(val_t p0);
val_t syntax___mmbuilder___AClosureDecl___variable(val_t p0);
typedef val_t (*syntax___mmbuilder___AClosureDecl___variable_t)(val_t p0);
void syntax___mmbuilder___AClosureDecl___accept_property_verifier(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___AClosureDecl___accept_property_verifier_t)(val_t p0, val_t p1);
val_t NEW_AClosureDecl_parser___parser_prod___AClosureDecl___empty_init();
val_t NEW_AClosureDecl_parser___parser_prod___AClosureDecl___init_aclosuredecl(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
val_t NEW_AClosureDecl_parser___parser_nodes___ANode___init();
void syntax___mmbuilder___AType___check_visibility(val_t p0, val_t p1, val_t p2);
typedef void (*syntax___mmbuilder___AType___check_visibility_t)(val_t p0, val_t p1, val_t p2);
  typedef void (*CLOS_OC_syntax___mmbuilder___AType___check_visibility_5_0)(struct stack_frame_t *);
  void OC_syntax___mmbuilder___AType___check_visibility_5(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
  typedef void (*OC_syntax___mmbuilder___AType___check_visibility_5_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
val_t NEW_AType_parser___parser_prod___AType___empty_init();
val_t NEW_AType_parser___parser_prod___AType___init_atype(val_t p0, val_t p1, val_t p2, val_t p3);
val_t NEW_AType_parser___parser_nodes___ANode___init();
void syntax___mmbuilder___AExpr___accept_class_builder(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___AExpr___accept_class_builder_t)(val_t p0, val_t p1);
void syntax___mmbuilder___AExpr___accept_property_builder(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___AExpr___accept_property_builder_t)(val_t p0, val_t p1);
void syntax___mmbuilder___AExpr___accept_property_verifier(val_t p0, val_t p1);
typedef void (*syntax___mmbuilder___AExpr___accept_property_verifier_t)(val_t p0, val_t p1);
val_t syntax___mmbuilder___AExpr___get_easy_stype(val_t p0, val_t p1);
typedef val_t (*syntax___mmbuilder___AExpr___get_easy_stype_t)(val_t p0, val_t p1);
val_t NEW_AExpr_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___ABoolExpr___get_easy_stype(val_t p0, val_t p1);
typedef val_t (*syntax___mmbuilder___ABoolExpr___get_easy_stype_t)(val_t p0, val_t p1);
val_t NEW_ABoolExpr_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___AStringExpr___get_easy_stype(val_t p0, val_t p1);
typedef val_t (*syntax___mmbuilder___AStringExpr___get_easy_stype_t)(val_t p0, val_t p1);
val_t NEW_AStringExpr_parser___parser_prod___AStringExpr___empty_init();
val_t NEW_AStringExpr_parser___parser_prod___AStringExpr___init_astringexpr(val_t p0, val_t p1);
val_t NEW_AStringExpr_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___ACharExpr___get_easy_stype(val_t p0, val_t p1);
typedef val_t (*syntax___mmbuilder___ACharExpr___get_easy_stype_t)(val_t p0, val_t p1);
val_t NEW_ACharExpr_parser___parser_prod___ACharExpr___empty_init();
val_t NEW_ACharExpr_parser___parser_prod___ACharExpr___init_acharexpr(val_t p0, val_t p1);
val_t NEW_ACharExpr_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___AIntExpr___get_easy_stype(val_t p0, val_t p1);
typedef val_t (*syntax___mmbuilder___AIntExpr___get_easy_stype_t)(val_t p0, val_t p1);
val_t NEW_AIntExpr_parser___parser_prod___AIntExpr___empty_init();
val_t NEW_AIntExpr_parser___parser_prod___AIntExpr___init_aintexpr(val_t p0, val_t p1);
val_t NEW_AIntExpr_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___AFloatExpr___get_easy_stype(val_t p0, val_t p1);
typedef val_t (*syntax___mmbuilder___AFloatExpr___get_easy_stype_t)(val_t p0, val_t p1);
val_t NEW_AFloatExpr_parser___parser_prod___AFloatExpr___empty_init();
val_t NEW_AFloatExpr_parser___parser_prod___AFloatExpr___init_afloatexpr(val_t p0, val_t p1);
val_t NEW_AFloatExpr_parser___parser_nodes___ANode___init();
val_t syntax___mmbuilder___ANewExpr___get_easy_stype(val_t p0, val_t p1);
typedef val_t (*syntax___mmbuilder___ANewExpr___get_easy_stype_t)(val_t p0, val_t p1);
val_t NEW_ANewExpr_parser___parser_prod___ANewExpr___empty_init();
val_t NEW_ANewExpr_parser___parser_prod___ANewExpr___init_anewexpr(val_t p0, val_t p1, val_t p2, val_t p3);
val_t NEW_ANewExpr_parser___parser_nodes___ANode___init();
#endif
