#include "nit.common.h"
extern const int COLOR_hash_collection__HashCollection___first_item;
val* hash_collection__HashCollection__first_item(val* self);
extern const int COLOR_hash_collection__HashCollection_FT0;
extern const int COLOR_kernel__Object__hash;
extern const int COLOR_hash_collection__HashCollection___capacity;
extern const struct type type_kernel__Int;
long hash_collection__HashCollection__index_at(val* self, val* p0);
extern const int COLOR_hash_collection__HashCollection___last_accessed_key;
extern const int COLOR_kernel__Object__is_same_instance;
extern const int COLOR_hash_collection__HashCollection___last_accessed_node;
extern const int COLOR_hash_collection__HashCollection__index_at;
extern const int COLOR_hash_collection__HashCollection__node_at_idx;
val* hash_collection__HashCollection__node_at(val* self, val* p0);
extern const int COLOR_hash_collection__HashCollection___array;
extern const int COLOR_array__NativeArray___91d_93d;
extern const int COLOR_hash_collection__HashNode___key;
extern const int COLOR_kernel__Object___61d_61d;
extern const int COLOR_hash_collection__HashNode___next_in_bucklet;
extern const int COLOR_nullable_hash_collection__HashCollection_FT1;
val* hash_collection__HashCollection__node_at_idx(val* self, long p0, val* p1);
extern const int COLOR_hash_collection__HashCollection_FT1;
extern const int COLOR_hash_collection__HashCollection___last_item;
extern const int COLOR_hash_collection__HashNode___next_item;
extern const int COLOR_hash_collection__HashNode___prev_item;
extern const int COLOR_array__NativeArray___91d_93d_61d;
extern const int COLOR_hash_collection__HashNode___prev_in_bucklet;
extern const int COLOR_nullable_hash_collection__HashCollection_FT0;
extern const int COLOR_hash_collection__HashCollection___length;
extern const int COLOR_hash_collection__HashCollection__enlarge;
void hash_collection__HashCollection__store(val* self, long p0, val* p1);
void hash_collection__HashCollection__remove_node(val* self, val* p0);
void hash_collection__HashCollection__raz(val* self);
extern const int COLOR_array__ArrayCapable__calloc_array;
void hash_collection__HashCollection__enlarge(val* self, long p0);
void hash_collection__HashCollection__init(val* self);
val* hash_collection__HashNode__next_item(val* self);
extern const int COLOR_nullable_hash_collection__HashNode_VTN;
void hash_collection__HashNode__next_item_61d(val* self, val* p0);
val* hash_collection__HashNode__prev_item(val* self);
void hash_collection__HashNode__prev_item_61d(val* self, val* p0);
extern const int COLOR_hash_collection__HashNode_FT0;
void hash_collection__HashNode__init(val* self, val* p0);
extern const int COLOR_abstract_collection__MapRead_FT0;
extern const int COLOR_hash_collection__HashCollection__node_at;
extern const int COLOR_abstract_collection__MapRead__provide_default_value;
extern const int COLOR_hash_collection__HashMapNode___value;
val* hash_collection__HashMap___91d_93d(val* self, val* p0);
val* NEW_hash_collection__HashMapIterator(const struct type* type);
extern const int COLOR_hash_collection__HashMapIteratorhash_collection__HashMap_FT0hash_collection__HashMap_FT1;
extern const int COLOR_hash_collection__HashMapIterator__init;
val* hash_collection__HashMap__iterator(val* self);
long hash_collection__HashMap__length(val* self);
short int hash_collection__HashMap__is_empty(val* self);
extern const int COLOR_abstract_collection__Map_FT0;
extern const int COLOR_abstract_collection__Map_FT1;
val* NEW_hash_collection__HashMapNode(const struct type* type);
extern const int COLOR_hash_collection__HashMapNodehash_collection__HashMap_FT0hash_collection__HashMap_FT1;
extern const int COLOR_hash_collection__HashMapNode__init;
extern const int COLOR_hash_collection__HashCollection__store;
void hash_collection__HashMap___91d_93d_61d(val* self, val* p0, val* p1);
extern const int COLOR_hash_collection__HashCollection__raz;
void hash_collection__HashMap__clear(val* self);
extern const int COLOR_hash_collection__HashCollection__init;
void hash_collection__HashMap__init(val* self);
extern const int COLOR_hash_collection__HashMap___64dkeys;
val* hash_collection__HashMap__keys(val* self);
extern const int COLOR_hash_collection__HashMapKeyshash_collection__HashMap_FT0hash_collection__HashMap_FT1;
void hash_collection__HashMap__keys_61d(val* self, val* p0);
extern const int COLOR_hash_collection__HashMap___64dvalues;
val* hash_collection__HashMap__values(val* self);
extern const int COLOR_hash_collection__HashMapValueshash_collection__HashMap_FT0hash_collection__HashMap_FT1;
void hash_collection__HashMap__values_61d(val* self, val* p0);
extern const int COLOR_hash_collection__HashMapKeys___64dmap;
val* hash_collection__HashMapKeys__map(val* self);
extern const int COLOR_hash_collection__HashMaphash_collection__HashMapKeys_FT0hash_collection__HashMapKeys_FT1;
void hash_collection__HashMapKeys__map_61d(val* self, val* p0);
extern const int COLOR_abstract_collection__Collection_FT0;
extern const int COLOR_abstract_collection__Collection__has;
long hash_collection__HashMapKeys__count(val* self, val* p0);
extern const int COLOR_hash_collection__HashMapKeys__map;
val* hash_collection__HashMapKeys__first(val* self);
short int hash_collection__HashMapKeys__has(val* self, val* p0);
extern const int COLOR_abstract_collection__Collection__length;
extern const int COLOR_abstract_collection__Collection__is_empty;
short int hash_collection__HashMapKeys__has_only(val* self, val* p0);
extern const int COLOR_abstract_collection__MapRead__is_empty;
short int hash_collection__HashMapKeys__is_empty(val* self);
extern const int COLOR_abstract_collection__MapRead__length;
long hash_collection__HashMapKeys__length(val* self);
val* NEW_abstract_collection__MapKeysIterator(const struct type* type);
extern const int COLOR_abstract_collection__MapKeysIteratorhash_collection__HashMapKeys_FT0hash_collection__HashMapKeys_FT1;
extern const int COLOR_abstract_collection__MapRead__iterator;
extern const int COLOR_abstract_collection__MapKeysIterator__init;
val* hash_collection__HashMapKeys__iterator(val* self);
extern const int COLOR_abstract_collection__Map__clear;
void hash_collection__HashMapKeys__clear(val* self);
extern const int COLOR_abstract_collection__RemovableCollection_FT0;
extern const int COLOR_hash_collection__HashCollection__remove_node;
void hash_collection__HashMapKeys__remove(val* self, val* p0);
void hash_collection__HashMapKeys__remove_all(val* self, val* p0);
void hash_collection__HashMapKeys__init(val* self, val* p0);
extern const int COLOR_hash_collection__HashMapValues___64dmap;
val* hash_collection__HashMapValues__map(val* self);
extern const int COLOR_hash_collection__HashMaphash_collection__HashMapValues_FT0hash_collection__HashMapValues_FT1;
void hash_collection__HashMapValues__map_61d(val* self, val* p0);
extern const int COLOR_hash_collection__HashMapValues__map;
long hash_collection__HashMapValues__count(val* self, val* p0);
val* hash_collection__HashMapValues__first(val* self);
short int hash_collection__HashMapValues__has(val* self, val* p0);
extern const int COLOR_kernel__Object___33d_61d;
short int hash_collection__HashMapValues__has_only(val* self, val* p0);
short int hash_collection__HashMapValues__is_empty(val* self);
long hash_collection__HashMapValues__length(val* self);
val* NEW_abstract_collection__MapValuesIterator(const struct type* type);
extern const int COLOR_abstract_collection__MapValuesIteratorhash_collection__HashMapValues_FT0hash_collection__HashMapValues_FT1;
extern const int COLOR_abstract_collection__MapValuesIterator__init;
val* hash_collection__HashMapValues__iterator(val* self);
void hash_collection__HashMapValues__clear(val* self);
void hash_collection__HashMapValues__remove(val* self, val* p0);
void hash_collection__HashMapValues__remove_all(val* self, val* p0);
void hash_collection__HashMapValues__init(val* self, val* p0);
extern const int COLOR_hash_collection__HashMapNode_FT0;
extern const int COLOR_hash_collection__HashMapNode_FT1;
extern const int COLOR_hash_collection__HashNode__init;
void hash_collection__HashMapNode__init(val* self, val* p0, val* p1);
extern const int COLOR_hash_collection__HashMapIterator___node;
short int hash_collection__HashMapIterator__is_ok(val* self);
extern const int COLOR_abstract_collection__MapIterator__is_ok;
val* hash_collection__HashMapIterator__item(val* self);
val* hash_collection__HashMapIterator__key(val* self);
void hash_collection__HashMapIterator__next(val* self);
extern const int COLOR_hash_collection__HashMaphash_collection__HashMapIterator_FT0hash_collection__HashMapIterator_FT1;
extern const int COLOR_hash_collection__HashMapIterator___map;
extern const int COLOR_hash_collection__HashCollection__first_item;
void hash_collection__HashMapIterator__init(val* self, val* p0);
long hash_collection__HashSet__length(val* self);
short int hash_collection__HashSet__is_empty(val* self);
val* hash_collection__HashSet__first(val* self);
short int hash_collection__HashSet__has(val* self, val* p0);
extern const int COLOR_abstract_collection__SimpleCollection_FT0;
val* NEW_hash_collection__HashSetNode(const struct type* type);
extern const int COLOR_hash_collection__HashSetNodehash_collection__HashSet_FT0;
extern const int COLOR_hash_collection__HashSetNode__init;
void hash_collection__HashSet__add(val* self, val* p0);
void hash_collection__HashSet__remove(val* self, val* p0);
void hash_collection__HashSet__clear(val* self);
val* NEW_hash_collection__HashSetIterator(const struct type* type);
extern const int COLOR_hash_collection__HashSetIteratorhash_collection__HashSet_FT0;
extern const int COLOR_hash_collection__HashSetIterator__init;
val* hash_collection__HashSet__iterator(val* self);
void hash_collection__HashSet__init(val* self);
extern const int COLOR_abstract_collection__Collectionhash_collection__HashSet_FT0;
extern const int COLOR_hash_collection__HashSet__init;
extern const int COLOR_abstract_collection__SimpleCollection__add_all;
void hash_collection__HashSet__from(val* self, val* p0);
extern const int COLOR_hash_collection__HashSetNode_FT0;
void hash_collection__HashSetNode__init(val* self, val* p0);
extern const int COLOR_hash_collection__HashSetIterator___node;
short int hash_collection__HashSetIterator__is_ok(val* self);
extern const int COLOR_abstract_collection__Iterator__is_ok;
val* hash_collection__HashSetIterator__item(val* self);
void hash_collection__HashSetIterator__next(val* self);
extern const int COLOR_hash_collection__HashSethash_collection__HashSetIterator_FT0;
extern const int COLOR_hash_collection__HashSetIterator___set;
void hash_collection__HashSetIterator__init(val* self, val* p0);
