$ // This file is part of NIT ( http://www.nitlanguage.org ).
$ //
$ // Copyright 2008 Jean Privat <jean@pryen.org>
$ // Based on algorithms developped for ( http://www.sablecc.org/ ).
$ //
$ // Licensed under the Apache License, Version 2.0 (the "License");
$ // you may not use this file except in compliance with the License.
$ // You may obtain a copy of the License at
$ //
$ //     http://www.apache.org/licenses/LICENSE-2.0
$ //
$ // Unless required by applicable law or agreed to in writing, software
$ // distributed under the License is distributed on an "AS IS" BASIS,
$ // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
$ // See the License for the specific language governing permissions and
$ // limitations under the License.

$ template make_abs_tokens()
$ foreach {//token}
$ if {@parser_index}    
class @ename
	super Token
end
$ end
$ end
class EOF
	super Token
end
class PError
	super EOF
end
class PLexerError
	super PError
end
class PParserError
	super PError
end
$ end template

$ template make_tokens()

redef class Token
    private var text_cache: nullable String

    redef fun text
    do
        var res = text_cache
        if res != null then return res
        res = location.text
	text_cache = res
	return res
    end

    redef fun text=(text)
    do
        text_cache = text
    end

    fun parser_index: Int is abstract
end

$ foreach {//token}
$ if {@parser_index}
redef class @ename
    redef fun parser_index: Int
    do
	return @parser_index
    end

    init init_tk(loc: Location)
    do
		real_location = loc
    end
end

$ end if
$ end foreach

redef class EOF
    redef fun parser_index: Int
    do
	return ${tokens/eof/@parser_index}
    end

    init init_tk(loc: Location)
    do
        text_cache = ""
		real_location = loc
    end
end

redef class PError
    var message: String

    init init_error(message: String, loc: Location)
    do
		init_tk(loc)
		self.message = message
    end
end

redef class PLexerError
    var string: String

    init init_lexer_error(message: String, loc: Location, string: String)
    do
		init_error(message, loc)
		self.string = string
    end
end

redef class PParserError
    var token: Token

    init init_parser_error(message: String, loc: Location, token: Token)
    do
		init_error(message, loc)
		self.token = token
    end
end
$ end template
