#include "nit.common.h"
extern const int COLOR_string__AbstractString___items;
char* string__AbstractString__items(val* self);
char string__AbstractString___91d_93d(val* self, long p0);
extern const struct type type_kernel__Int;
extern const int COLOR_abstract_collection__Collection__length;
val* NEW_string__Buffer(const struct type* type);
extern const struct type type_string__Buffer;
extern const int COLOR_string__Buffer__with_capacity;
void CHECK_NEW_string__Buffer(val*);
extern const int COLOR_abstract_collection__Sequence__push;
extern const int COLOR_string__Object__to_s;
val* string__NativeString__to_s_with_length(char* self, long p0);
val* string__AbstractString__substring(val* self, long p0, long p1);
extern const int COLOR_string__AbstractString__substring;
val* string__AbstractString__substring_from(val* self, long p0);
extern const int COLOR_string__String___index_from;
short int string__AbstractString__has_substring(val* self, val* p0, long p1);
extern const int COLOR_string__AbstractString__has_substring;
short int string__AbstractString__has_prefix(val* self, val* p0);
short int string__AbstractString__has_suffix(val* self, val* p0);
extern const int COLOR_string__String__to_cstring;
long string__AbstractString__to_i(val* self);
double string__NativeString__atof(char* self);
double string__AbstractString__to_f(val* self);
extern const int COLOR_string__AbstractString__a_to;
long string__AbstractString__to_hex(val* self);
extern const int COLOR_abstract_collection__Collection__iterator;
extern const int COLOR_abstract_collection__Iterator__is_ok;
extern const int COLOR_abstract_collection__Iterator__item;
long kernel__Char__to_i(char self);
extern const int COLOR_abstract_collection__Iterator__next;
long string__AbstractString__a_to(val* self, long p0);
short int string__Char__is_numeric(char self);
short int string__AbstractString__is_numeric(val* self);
char kernel__Char__to_upper(char self);
extern const int COLOR_abstract_collection__SimpleCollection__add;
val* string__AbstractString__to_upper(val* self);
char kernel__Char__to_lower(char self);
val* string__AbstractString__to_lower(val* self);
extern const int COLOR_array__AbstractArrayRead___length;
extern const int COLOR_abstract_collection__SequenceRead___91d_93d;
val* string__Char__to_s(char self);
val* string__AbstractString__trim(val* self);
void string__AbstractString__output(val* self);
extern const int COLOR_string__Buffer__init;
extern const struct type type_kernel__Char;
val* string__Int__to_s(long self);
extern const int COLOR_abstract_collection__Sequence__append;
val* string__AbstractString__to_cmangle(val* self);
val* string__Int__to_base(long self, long p0, short int p1);
val* NEW_array__Array(const struct type* type);
extern const struct type type_array__Arraykernel__Object;
val* NEW_array__NativeArray(int length, const struct type* type);
extern const struct type type_array__NativeArraykernel__Object;
extern const int COLOR_array__Array__with_native;
void CHECK_NEW_array__Array(val*);
val* string__AbstractString__escape_to_c(val* self);
extern const int COLOR_string__AbstractString__escape_to_c;
extern const int COLOR_abstract_collection__Collection__has;
val* string__AbstractString__escape_more_to_c(val* self, val* p0);
extern const int COLOR_string__AbstractString__escape_more_to_c;
val* string__AbstractString__escape_to_nit(val* self);
val* string__AbstractString__unescape_nit(val* self);
extern const int COLOR_array__AbstractArrayRead__init;
void string__AbstractString__init(val* self);
long string__String__index_from(val* self);
extern const int COLOR_string__String___index_to;
long string__String__index_to(val* self);
char string__String___91d_93d(val* self, long p0);
val* NEW_string__String(const struct type* type);
extern const struct type type_string__String;
extern const int COLOR_string__String__from_substring;
void CHECK_NEW_string__String(val*);
val* string__String__substring(val* self, long p0, long p1);
val* string__String__substring_from(val* self, long p0);
extern const int COLOR_string__String__index_from;
short int string__String__has_substring(val* self, val* p0, long p1);
extern const int COLOR_string__StringCapable__calloc_string;
val* string__String__to_upper(val* self);
val* string__String__to_lower(val* self);
val* string__String__trim(val* self);
void string__String__output(val* self);
extern const int COLOR_string__AbstractString__init;
void string__String__from_substring(val* self, long p0, long p1, char* p2);
void string__String__with_infos(val* self, char* p0, long p1, long p2, long p3);
extern const int COLOR_string__AbstractString__items;
long string__NativeString__cstring_length(char* self);
char* string__String__to_cstring(val* self);
extern const int COLOR_kernel__Object__object_id;
short int string__String___61d_61d(val* self, val* p0);
extern const int COLOR_kernel__Comparable_VTOTHER;
short int string__String___60d(val* self, val* p0);
val* string__String___43d(val* self, val* p0);
val* NEW_range__Range(const struct type* type);
extern const struct type type_range__Rangekernel__Int;
extern const int COLOR_range__Range__init;
void CHECK_NEW_range__Range(val*);
val* string__String___42d(val* self, long p0);
val* string__String__to_s(val* self);
long string__String__hash(val* self);
void string__Buffer___91d_93d_61d(val* self, long p0, char p1);
extern const int COLOR_string__Buffer___capacity;
extern const int COLOR_array__AbstractArray__enlarge;
void string__Buffer__add(val* self, char p0);
void string__Buffer__enlarge(val* self, long p0);
extern const int COLOR_string__Buffer__append;
void string__Buffer__append(val* self, val* p0);
val* string__Buffer__to_s(val* self);
short int string__Buffer___60d(val* self, val* p0);
void string__Buffer__init(val* self);
extern const int COLOR_array__AbstractArray__init;
void string__Buffer__from(val* self, val* p0);
void string__Buffer__with_capacity(val* self, long p0);
short int string__Buffer___61d_61d(val* self, val* p0);
long string__Buffer__capacity(val* self);
extern const int COLOR_string__Object__inspect;
val* string__Object__to_s(val* self);
extern const int COLOR_string__Object__native_class_name;
val* string__NativeString__to_s(char* self);
val* string__Object__class_name(val* self);
extern const int COLOR_array__Array__with_capacity;
extern const int COLOR_string__Object__inspect_head;
val* string__Object__inspect(val* self);
extern const int COLOR_string__Object__class_name;
val* string__Int__to_hex(long self);
val* string__Object__inspect_head(val* self);
extern const int COLOR_kernel__Object__sys;
extern const int COLOR_string__Object__args;
val* string__Object__args(val* self);
val* string__Bool__to_s(short int self);
extern const int COLOR_abstract_collection__Sequence___91d_93d_61d;
long kernel__Int__digit_count(long self, long p0);
char kernel__Int__to_c(long self);
void string__Int__fill_buffer(long self, val* p0, long p1, short int p2);
#include "string_nit.h"
char* string__Int__native_int_to_s(long self, long p0);
extern const int COLOR_string__String___42d;
extern const int COLOR_string__Buffer__from;
val* string__Float__to_precision(double self, long p0);
val* string__Float__to_s(double self);
extern const int COLOR_range__Range__without_last;
extern const int COLOR_string__String___43d;
val* string__Float__to_precision_native(double self, long p0);
short int string__Char__is_alpha(char self);
short int string__Char__is_alphanumeric(char self);
val* string__Collection__to_s(val* self);
extern const int COLOR_abstract_collection__Collection__is_empty;
val* string__Collection__join(val* self, val* p0);
val* string__Array__to_s(val* self);
extern const int COLOR_abstract_collection__MapRead__is_empty;
extern const int COLOR_abstract_collection__MapRead__iterator;
extern const int COLOR_abstract_collection__MapIterator__key;
extern const int COLOR_abstract_collection__MapIterator__item;
extern const int COLOR_abstract_collection__MapIterator__next;
extern const int COLOR_abstract_collection__MapIterator__is_ok;
val* string__Map__join(val* self, val* p0, val* p1);
extern const int COLOR_string__String__with_infos;
val* string__NativeString__to_s_with_copy(char* self);
void string__NativeString__init(char* self);
extern const int COLOR_string__Sys___args_cache;
extern const int COLOR_string__Sys__init_args;
val* string__Sys__args(val* self);
extern const int COLOR_string__Sys__native_argv;
val* string__Sys__program_name(val* self);
extern const int COLOR_string__Sys__native_argc;
extern const struct type type_array__Arraystring__String;
void string__Sys__init_args(val* self);
