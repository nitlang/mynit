#include "nit.common.h"
extern const int COLOR_array__AbstractArrayRead___length;
long array__AbstractArrayRead__length(val* self);
short int array__AbstractArrayRead__is_empty(val* self);
extern const int COLOR_abstract_collection__Collection_FT0;
extern const int COLOR_abstract_collection__Collection__length;
extern const struct type type_kernel__Int;
extern const int COLOR_abstract_collection__SequenceRead___91d_93d;
extern const int COLOR_kernel__Object___61d_61d;
short int array__AbstractArrayRead__has(val* self, val* p0);
extern const int COLOR_kernel__Object___33d_61d;
short int array__AbstractArrayRead__has_only(val* self, val* p0);
long array__AbstractArrayRead__count(val* self, val* p0);
extern const int COLOR_abstract_collection__SequenceRead_FT0;
extern const int COLOR_array__AbstractArrayRead__index_of_from;
long array__AbstractArrayRead__index_of(val* self, val* p0);
extern const int COLOR_array__AbstractArrayRead_FT0;
extern const int COLOR_array__AbstractArrayRead__last_index_of_from;
long array__AbstractArrayRead__last_index_of(val* self, val* p0);
long array__AbstractArrayRead__index_of_from(val* self, val* p0, long p1);
long array__AbstractArrayRead__last_index_of_from(val* self, val* p0, long p1);
val* NEW_array__Array(const struct type* type);
extern const int COLOR_array__Arrayarray__AbstractArrayRead_FT0;
extern const int COLOR_array__Array__with_capacity;
void CHECK_NEW_array__Array(val*);
extern const int COLOR_abstract_collection__SimpleCollection__add;
val* array__AbstractArrayRead__reversed(val* self);
extern const int COLOR_array__AbstractArrayarray__AbstractArrayRead_FT0;
extern const int COLOR_abstract_collection__Sequence___91d_93d_61d;
void array__AbstractArrayRead__copy_to(val* self, long p0, long p1, val* p2, long p3);
extern const int COLOR_kernel__Object__output;
void array__AbstractArrayRead__output(val* self);
val* NEW_array__ArrayIterator(const struct type* type);
extern const int COLOR_array__ArrayIteratorarray__AbstractArrayRead_FT0;
extern const int COLOR_array__ArrayIterator__init;
void CHECK_NEW_array__ArrayIterator(val*);
val* array__AbstractArrayRead__iterator(val* self);
void array__AbstractArrayRead__init(val* self);
void array__AbstractArray__enlarge(val* self, long p0);
extern const int COLOR_abstract_collection__Sequence_FT0;
void array__AbstractArray__push(val* self, val* p0);
extern const int COLOR_abstract_collection__Collection__is_empty;
extern const int COLOR_abstract_collection__SequenceRead__last;
val* array__AbstractArray__pop(val* self);
extern const int COLOR_abstract_collection__Collection__first;
val* array__AbstractArray__shift(val* self);
void array__AbstractArray__unshift(val* self, val* p0);
extern const int COLOR_array__AbstractArray_FT0;
extern const int COLOR_array__AbstractArray__enlarge;
extern const int COLOR_array__AbstractArrayRead__copy_to;
void array__AbstractArray__insert(val* self, val* p0, long p1);
extern const int COLOR_abstract_collection__SimpleCollection_FT0;
void array__AbstractArray__add(val* self, val* p0);
void array__AbstractArray__clear(val* self);
extern const int COLOR_abstract_collection__RemovableCollection_FT0;
extern const int COLOR_abstract_collection__SequenceRead__index_of;
extern const int COLOR_abstract_collection__Sequence__remove_at;
void array__AbstractArray__remove(val* self, val* p0);
void array__AbstractArray__remove_all(val* self, val* p0);
void array__AbstractArray__remove_at(val* self, long p0);
void array__AbstractArray__swap_at(val* self, long p0, long p1);
extern const int COLOR_array__AbstractArrayRead__init;
void array__AbstractArray__init(val* self);
extern const int COLOR_array__Array___items;
extern const int COLOR_array__NativeArray___91d_93d;
val* array__Array___91d_93d(val* self, long p0);
extern const int COLOR_array__Array___capacity;
extern const int COLOR_array__NativeArray___91d_93d_61d;
void array__Array___91d_93d_61d(val* self, long p0, val* p1);
void array__Array__add(val* self, val* p0);
extern const int COLOR_array__ArrayCapable__calloc_array;
extern const int COLOR_array__NativeArray__copy_to;
void array__Array__enlarge(val* self, long p0);
extern const int COLOR_array__AbstractArray__init;
void array__Array__init(val* self);
extern const int COLOR_abstract_collection__Collectionarray__Array_FT0;
extern const int COLOR_abstract_collection__SimpleCollection__add_all;
void array__Array__from(val* self, val* p0);
void array__Array__with_items(val* self, val* p0);
void array__Array__with_capacity(val* self, long p0);
extern const int COLOR_array__Array_FT0;
void array__Array__filled_with(val* self, val* p0, long p1);
extern const int COLOR_array__NativeArrayarray__Array_FT0;
void array__Array__with_native(val* self, val* p0, long p1);
val* array__Array__intern_items(val* self);
extern const int COLOR_array__ArrayIterator___array;
extern const int COLOR_array__ArrayIterator___index;
val* array__ArrayIterator__item(val* self);
short int array__ArrayIterator__is_ok(val* self);
void array__ArrayIterator__next(val* self);
extern const int COLOR_array__AbstractArrayReadarray__ArrayIterator_FT0;
void array__ArrayIterator__init(val* self, val* p0);
long array__ArrayIterator__index(val* self);
extern const int COLOR_array__ArraySet___array;
extern const int COLOR_abstract_collection__Collection__has;
short int array__ArraySet__has(val* self, val* p0);
void array__ArraySet__add(val* self, val* p0);
short int array__ArraySet__is_empty(val* self);
long array__ArraySet__length(val* self);
val* array__ArraySet__first(val* self);
extern const int COLOR_array__ArraySet__remove_at;
void array__ArraySet__remove(val* self, val* p0);
extern const int COLOR_abstract_collection__RemovableCollection__remove;
void array__ArraySet__remove_all(val* self, val* p0);
extern const int COLOR_abstract_collection__RemovableCollection__clear;
void array__ArraySet__clear(val* self);
val* NEW_array__ArraySetIterator(const struct type* type);
extern const int COLOR_array__ArraySetIteratorarray__ArraySet_FT0;
extern const int COLOR_abstract_collection__Collection__iterator;
extern const int COLOR_array__ArraySetIterator__init;
void CHECK_NEW_array__ArraySetIterator(val*);
val* array__ArraySet__iterator(val* self);
void array__ArraySet__enlarge(val* self, long p0);
extern const int COLOR_abstract_collection__Sequence__pop;
void array__ArraySet__remove_at(val* self, long p0);
extern const int COLOR_array__Arrayarray__ArraySet_FT0;
extern const int COLOR_array__Array__init;
void array__ArraySet__init(val* self);
void array__ArraySet__with_capacity(val* self, long p0);
extern const int COLOR_array__ArraySetIterator___iter;
extern const int COLOR_abstract_collection__Iterator__is_ok;
short int array__ArraySetIterator__is_ok(val* self);
extern const int COLOR_abstract_collection__Iterator__next;
void array__ArraySetIterator__next(val* self);
extern const int COLOR_abstract_collection__Iterator__item;
val* array__ArraySetIterator__item(val* self);
extern const int COLOR_array__ArrayIteratorarray__ArraySetIterator_FT0;
void array__ArraySetIterator__init(val* self, val* p0);
extern const int COLOR_abstract_collection__MapRead_FT0;
extern const int COLOR_array__ArrayMap__index;
extern const int COLOR_array__ArrayMap___items;
extern const int COLOR_abstract_collection__Couple__second;
val* array__ArrayMap___91d_93d(val* self, val* p0);
extern const int COLOR_abstract_collection__Map_FT0;
extern const int COLOR_abstract_collection__Map_FT1;
extern const int COLOR_abstract_collection__Couple__second_61d;
val* NEW_abstract_collection__Couple(const struct type* type);
extern const int COLOR_abstract_collection__Couplearray__ArrayMap_FT0array__ArrayMap_FT1;
extern const int COLOR_abstract_collection__Couple__init;
void CHECK_NEW_abstract_collection__Couple(val*);
extern const int COLOR_abstract_collection__Sequence__push;
void array__ArrayMap___91d_93d_61d(val* self, val* p0, val* p1);
extern const int COLOR_array__ArrayMap___64dkeys;
val* array__ArrayMap__keys(val* self);
extern const int COLOR_array__ArrayMapKeysarray__ArrayMap_FT0array__ArrayMap_FT1;
void array__ArrayMap__keys_61d(val* self, val* p0);
extern const int COLOR_array__ArrayMap___64dvalues;
val* array__ArrayMap__values(val* self);
extern const int COLOR_array__ArrayMapValuesarray__ArrayMap_FT0array__ArrayMap_FT1;
void array__ArrayMap__values_61d(val* self, val* p0);
long array__ArrayMap__length(val* self);
val* NEW_abstract_collection__CoupleMapIterator(const struct type* type);
extern const int COLOR_abstract_collection__CoupleMapIteratorarray__ArrayMap_FT0array__ArrayMap_FT1;
extern const int COLOR_abstract_collection__CoupleMapIterator__init;
void CHECK_NEW_abstract_collection__CoupleMapIterator(val*);
val* array__ArrayMap__iterator(val* self);
short int array__ArrayMap__is_empty(val* self);
void array__ArrayMap__clear(val* self);
void array__ArrayMap__enlarge(val* self, long p0);
extern const int COLOR_abstract_collection__CoupleMap_FT0;
val* array__ArrayMap__couple_at(val* self, val* p0);
void array__ArrayMap__remove_at_index(val* self, long p0);
extern const int COLOR_array__ArrayMap_FT0;
extern const int COLOR_array__ArrayMap___last_index;
extern const int COLOR_abstract_collection__Couple__first;
long array__ArrayMap__index(val* self, val* p0);
extern const int COLOR_array__Arrayabstract_collection__Couplearray__ArrayMap_FT0array__ArrayMap_FT1;
void array__ArrayMap__init(val* self);
extern const int COLOR_array__ArrayMapKeys___64dmap;
val* array__ArrayMapKeys__map(val* self);
extern const int COLOR_array__ArrayMaparray__ArrayMapKeys_FT0array__ArrayMapKeys_FT1;
void array__ArrayMapKeys__map_61d(val* self, val* p0);
long array__ArrayMapKeys__count(val* self, val* p0);
extern const int COLOR_array__ArrayMapKeys__map;
val* array__ArrayMapKeys__first(val* self);
short int array__ArrayMapKeys__has(val* self, val* p0);
short int array__ArrayMapKeys__has_only(val* self, val* p0);
extern const int COLOR_abstract_collection__MapRead__is_empty;
short int array__ArrayMapKeys__is_empty(val* self);
extern const int COLOR_abstract_collection__MapRead__length;
long array__ArrayMapKeys__length(val* self);
val* NEW_abstract_collection__MapKeysIterator(const struct type* type);
extern const int COLOR_abstract_collection__MapKeysIteratorarray__ArrayMapKeys_FT0array__ArrayMapKeys_FT1;
extern const int COLOR_abstract_collection__MapRead__iterator;
extern const int COLOR_abstract_collection__MapKeysIterator__init;
void CHECK_NEW_abstract_collection__MapKeysIterator(val*);
val* array__ArrayMapKeys__iterator(val* self);
extern const int COLOR_abstract_collection__Map__clear;
void array__ArrayMapKeys__clear(val* self);
extern const int COLOR_array__ArrayMap__remove_at_index;
void array__ArrayMapKeys__remove(val* self, val* p0);
void array__ArrayMapKeys__remove_all(val* self, val* p0);
void array__ArrayMapKeys__init(val* self, val* p0);
extern const int COLOR_array__ArrayMapValues___64dmap;
val* array__ArrayMapValues__map(val* self);
extern const int COLOR_array__ArrayMaparray__ArrayMapValues_FT0array__ArrayMapValues_FT1;
void array__ArrayMapValues__map_61d(val* self, val* p0);
extern const int COLOR_array__ArrayMapValues__map;
val* array__ArrayMapValues__first(val* self);
short int array__ArrayMapValues__is_empty(val* self);
long array__ArrayMapValues__length(val* self);
val* NEW_abstract_collection__MapValuesIterator(const struct type* type);
extern const int COLOR_abstract_collection__MapValuesIteratorarray__ArrayMapValues_FT0array__ArrayMapValues_FT1;
extern const int COLOR_abstract_collection__MapValuesIterator__init;
void CHECK_NEW_abstract_collection__MapValuesIterator(val*);
val* array__ArrayMapValues__iterator(val* self);
short int array__ArrayMapValues__has(val* self, val* p0);
short int array__ArrayMapValues__has_only(val* self, val* p0);
long array__ArrayMapValues__count(val* self, val* p0);
void array__ArrayMapValues__clear(val* self);
void array__ArrayMapValues__remove(val* self, val* p0);
void array__ArrayMapValues__remove_all(val* self, val* p0);
void array__ArrayMapValues__init(val* self, val* p0);
extern const int COLOR_array__Arrayabstract_collection__Iterator_FT0;
val* array__Iterator__to_a(val* self);
extern const int COLOR_array__Iterator__to_a;
val* array__Collection__to_a(val* self);
val* NEW_array__NativeArray(int length, const struct type* type);
extern const int COLOR_array__NativeArrayarray__ArrayCapable_FT0;
extern const int COLOR_array__NativeArray_FT0;
extern const int COLOR_array__NativeArrayarray__NativeArray_FT0;
