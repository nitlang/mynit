#include "nit.common.h"
extern const int COLOR_abstract_compiler__ToolContext___64dopt_output;
val* abstract_compiler__ToolContext__opt_output(val* self);
void abstract_compiler__ToolContext__opt_output_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__ToolContext___64dopt_no_cc;
val* abstract_compiler__ToolContext__opt_no_cc(val* self);
void abstract_compiler__ToolContext__opt_no_cc_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__ToolContext___64dopt_cc_path;
val* abstract_compiler__ToolContext__opt_cc_path(val* self);
void abstract_compiler__ToolContext__opt_cc_path_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__ToolContext___64dopt_make_flags;
val* abstract_compiler__ToolContext__opt_make_flags(val* self);
void abstract_compiler__ToolContext__opt_make_flags_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__ToolContext___64dopt_compile_dir;
val* abstract_compiler__ToolContext__opt_compile_dir(val* self);
void abstract_compiler__ToolContext__opt_compile_dir_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__ToolContext___64dopt_hardening;
val* abstract_compiler__ToolContext__opt_hardening(val* self);
void abstract_compiler__ToolContext__opt_hardening_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__ToolContext___64dopt_no_shortcut_range;
val* abstract_compiler__ToolContext__opt_no_shortcut_range(val* self);
void abstract_compiler__ToolContext__opt_no_shortcut_range_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__ToolContext___64dopt_no_check_covariance;
val* abstract_compiler__ToolContext__opt_no_check_covariance(val* self);
void abstract_compiler__ToolContext__opt_no_check_covariance_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__ToolContext___64dopt_no_check_initialization;
val* abstract_compiler__ToolContext__opt_no_check_initialization(val* self);
void abstract_compiler__ToolContext__opt_no_check_initialization_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__ToolContext___64dopt_no_check_assert;
val* abstract_compiler__ToolContext__opt_no_check_assert(val* self);
void abstract_compiler__ToolContext__opt_no_check_assert_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__ToolContext___64dopt_no_check_autocast;
val* abstract_compiler__ToolContext__opt_no_check_autocast(val* self);
void abstract_compiler__ToolContext__opt_no_check_autocast_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__ToolContext___64dopt_no_check_other;
val* abstract_compiler__ToolContext__opt_no_check_other(val* self);
void abstract_compiler__ToolContext__opt_no_check_other_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__ToolContext___64dopt_typing_test_metrics;
val* abstract_compiler__ToolContext__opt_typing_test_metrics(val* self);
void abstract_compiler__ToolContext__opt_typing_test_metrics_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__ToolContext__init;
extern const int COLOR_toolcontext__ToolContext__option_context;
extern const int COLOR_abstract_compiler__ToolContext__opt_output;
extern const int COLOR_abstract_compiler__ToolContext__opt_no_cc;
extern const int COLOR_abstract_compiler__ToolContext__opt_make_flags;
extern const int COLOR_abstract_compiler__ToolContext__opt_compile_dir;
extern const int COLOR_abstract_compiler__ToolContext__opt_hardening;
extern const int COLOR_abstract_compiler__ToolContext__opt_no_shortcut_range;
val* NEW_array__Array(const struct type* type);
extern const struct type type_array__Arrayopts__Option;
val* NEW_array__NativeArray(int length, const struct type* type);
extern const struct type type_array__NativeArrayopts__Option;
extern const int COLOR_array__Array__with_native;
void CHECK_NEW_array__Array(val*);
extern const int COLOR_opts__OptionContext__add_option;
extern const int COLOR_abstract_compiler__ToolContext__opt_no_check_covariance;
extern const int COLOR_abstract_compiler__ToolContext__opt_no_check_initialization;
extern const int COLOR_abstract_compiler__ToolContext__opt_no_check_assert;
extern const int COLOR_abstract_compiler__ToolContext__opt_no_check_autocast;
extern const int COLOR_abstract_compiler__ToolContext__opt_no_check_other;
extern const int COLOR_abstract_compiler__ToolContext__opt_typing_test_metrics;
void abstract_compiler__ToolContext__init(val* self);
extern const int COLOR_abstract_compiler__ModelBuilder___64dcc_paths;
val* abstract_compiler__ModelBuilder__cc_paths(val* self);
void abstract_compiler__ModelBuilder__cc_paths_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__ModelBuilder__init;
val* string__NativeString__to_s_with_length(char* self, long p0);
extern const int COLOR_environ__String__environ;
extern const int COLOR_abstract_collection__Collection__is_empty;
extern const struct type type_array__Arraykernel__Object;
extern const int COLOR_array__Array__with_capacity;
extern const int COLOR_abstract_collection__SimpleCollection__add;
extern const int COLOR_string__Object__to_s;
extern const int COLOR_file__String__file_exists;
extern const int COLOR_abstract_compiler__ModelBuilder__cc_paths;
extern const int COLOR_kernel__Object__sys;
extern const int COLOR_string__Sys__program_name;
extern const int COLOR_file__String__dirname;
extern const int COLOR_file__String__simplify_path;
extern const int COLOR_toolcontext__ToolContext__error;
extern const int COLOR_abstract_compiler__ToolContext__opt_cc_path;
extern const int COLOR_opts__Option__value;
extern const int COLOR_abstract_collection__Sequence__append;
extern const int COLOR_string_search__String__split_with;
void abstract_compiler__ModelBuilder__init(val* self, val* p0, val* p1);
extern const int COLOR_abstract_compiler__AbstractCompiler__mainmodule;
extern const int COLOR_time__Object__get_time;
extern const int COLOR_modelbuilder__ModelBuilder__toolcontext;
extern const int COLOR_toolcontext__ToolContext__info;
extern const int COLOR_file__String__mkdir;
extern const int COLOR_model_base__MModule__name;
extern const int COLOR_file__String__join_path;
extern const int COLOR_abstract_compiler__AbstractCompiler__header;
extern const int COLOR_abstract_compiler__CodeWriter__file;
extern const int COLOR_abstract_compiler__CodeFile__name;
extern const int COLOR_string__String___43d;
val* NEW_file__OFStream(const struct type* type);
extern const struct type type_file__OFStream;
extern const int COLOR_file__OFStream__open;
void CHECK_NEW_file__OFStream(val*);
extern const int COLOR_abstract_compiler__CodeWriter__decl_lines;
extern const int COLOR_abstract_collection__Collection__iterator;
extern const int COLOR_abstract_collection__Iterator__is_ok;
extern const int COLOR_abstract_collection__Iterator__item;
extern const int COLOR_stream__OStream__write;
extern const int COLOR_abstract_collection__Iterator__next;
extern const int COLOR_abstract_compiler__CodeWriter__lines;
extern const int COLOR_stream__IOS__close;
extern const struct type type_array__Arraystring__String;
extern const int COLOR_array__Array__init;
extern const int COLOR_abstract_compiler__AbstractCompiler__files;
extern const struct type type_array__NativeArraykernel__Object;
extern const int COLOR_abstract_compiler__CodeFile__required_declarations;
extern const int COLOR_abstract_compiler__AbstractCompiler__provided_declarations;
extern const int COLOR_abstract_collection__MapRead__has_key;
extern const int COLOR_file__Object__print;
extern const int COLOR_abstract_collection__MapRead___91d_93d;
extern const int COLOR_abstract_compiler__CodeFile__writers;
extern const int COLOR_kernel__Object___61d_61d;
extern const int COLOR_abstract_collection__Collection__length;
extern const struct type type_kernel__Int;
extern const int COLOR_model_base__MModule__in_importation;
extern const int COLOR_poset__POSetElement__greaters;
extern const int COLOR_modelbuilder__ModelBuilder__mmodule2nmodule;
extern const int COLOR_abstract_collection__MapRead__keys;
extern const int COLOR_abstract_collection__Collection__has;
extern const int COLOR_common_ffi__MModule__uses_ffi;
extern const int COLOR_abstract_compiler__AModule__uses_legacy_ni;
extern const int COLOR_abstract_compiler__AbstractCompiler__finalize_ffi_for_module;
val* NEW_hash_collection__HashSet(const struct type* type);
extern const struct type type_hash_collection__HashSetstring__String;
extern const int COLOR_hash_collection__HashSet__init;
void CHECK_NEW_hash_collection__HashSet(val*);
extern const int COLOR_c__AModule__c_linker_options;
extern const int COLOR_string__Collection__join;
extern const int COLOR_file__String__strip_extension;
val* NEW_c__ExternCFile(const struct type* type);
extern const struct type type_c__ExternCFile;
extern const int COLOR_abstract_collection__Collection__first;
extern const int COLOR_c__ExternCFile__init;
void CHECK_NEW_c__ExternCFile(val*);
extern const int COLOR_abstract_compiler__AbstractCompiler__extern_bodies;
extern const int COLOR_ffi_base__ExternFile__filename;
extern const int COLOR_file__String__basename;
extern const int COLOR_c__ExternCFile__cflags;
extern const int COLOR_ffi_base__ExternFile__makefile_rule_name;
extern const int COLOR_ffi_base__ExternFile__makefile_rule_content;
extern const struct type type_cpp__ExternCppFile;
extern const int COLOR_toolcontext__ToolContext__verbose_level;
extern const int COLOR_exec__Sys__system;
extern const struct class class_kernel__Int;
void abstract_compiler__ModelBuilder__write_and_make(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompiler___64dmainmodule;
val* abstract_compiler__AbstractCompiler__mainmodule(val* self);
void abstract_compiler__AbstractCompiler__mainmodule_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompiler___64drealmainmodule;
val* abstract_compiler__AbstractCompiler__realmainmodule(val* self);
void abstract_compiler__AbstractCompiler__realmainmodule_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompiler___64dmodelbuilder;
val* abstract_compiler__AbstractCompiler__modelbuilder(val* self);
void abstract_compiler__AbstractCompiler__modelbuilder_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompiler__modelbuilder;
short int abstract_compiler__AbstractCompiler__hardening(val* self);
extern const int COLOR_abstract_compiler__AbstractCompiler__mainmodule_61d;
extern const int COLOR_abstract_compiler__AbstractCompiler__realmainmodule_61d;
extern const int COLOR_abstract_compiler__AbstractCompiler__modelbuilder_61d;
void abstract_compiler__AbstractCompiler__init(val* self, val* p0, val* p1);
val* NEW_abstract_compiler__CodeFile(const struct type* type);
extern const struct type type_abstract_compiler__CodeFile;
extern const int COLOR_abstract_compiler__CodeFile__init;
void CHECK_NEW_abstract_compiler__CodeFile(val*);
val* abstract_compiler__AbstractCompiler__new_file(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompiler___64dfiles;
val* abstract_compiler__AbstractCompiler__files(val* self);
void abstract_compiler__AbstractCompiler__files_61d(val* self, val* p0);
val* abstract_compiler__AbstractCompiler__new_visitor(val* self);
extern const int COLOR_abstract_compiler__AbstractCompiler___64dheader;
val* abstract_compiler__AbstractCompiler__header(val* self);
void abstract_compiler__AbstractCompiler__header_61d(val* self, val* p0);
extern const int COLOR_abstract_collection__Map___91d_93d_61d;
void abstract_compiler__AbstractCompiler__provide_declaration(val* self, val* p0, val* p1);
extern const int COLOR_abstract_compiler__AbstractCompiler___64dprovided_declarations;
val* abstract_compiler__AbstractCompiler__provided_declarations(val* self);
void abstract_compiler__AbstractCompiler__provided_declarations_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__CodeWriter__add_decl;
extern const int COLOR_abstract_compiler__AbstractCompiler__compile_header_structs;
extern const int COLOR_abstract_compiler__AbstractCompiler__compile_nitni_structs;
void abstract_compiler__AbstractCompiler__compile_header(val* self);
void abstract_compiler__AbstractCompiler__compile_header_structs(val* self);
void abstract_compiler__AbstractCompiler__compile_nitni_structs(val* self);
extern const int COLOR_abstract_compiler__AbstractCompiler__new_visitor;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__add_decl;
extern const int COLOR_abstract_compiler__AbstractCompiler__count_type_test_tags;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__compiler;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__add;
extern const int COLOR_model__MModule__sys_type;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__init_instance;
extern const int COLOR_model__MClassType__mclass;
extern const int COLOR_model__MModule__try_get_primitive_method;
extern const struct type type_array__Arrayabstract_compiler__RuntimeVariable;
extern const struct type type_array__NativeArrayabstract_compiler__RuntimeVariable;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__send;
extern const int COLOR_array__Collection__to_a;
void abstract_compiler__AbstractCompiler__compile_main_function(val* self);
extern const int COLOR_abstract_compiler__AbstractCompiler___64dextern_bodies;
val* abstract_compiler__AbstractCompiler__extern_bodies(val* self);
void abstract_compiler__AbstractCompiler__extern_bodies_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompiler___64dseen_extern;
val* abstract_compiler__AbstractCompiler__seen_extern(val* self);
void abstract_compiler__AbstractCompiler__seen_extern_61d(val* self, val* p0);
void abstract_compiler__AbstractCompiler__generate_check_init_instance(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompiler_VTVISITOR;
extern const int COLOR_model__MType__collect_mclassdefs;
extern const int COLOR_model__MModule__linearize_mclassdefs;
extern const int COLOR_modelize_class__ModelBuilder__mclassdef2nclassdef;
extern const int COLOR_parser_nodes__AClassdef__n_propdefs;
extern const struct type type_parser_nodes__AAttrPropdef;
extern const int COLOR_abstract_compiler__AAttrPropdef__init_expr;
void abstract_compiler__AbstractCompiler__generate_init_attr(val* self, val* p0, val* p1, val* p2);
extern const int COLOR_abstract_compiler__AAttrPropdef__check_expr;
void abstract_compiler__AbstractCompiler__generate_check_attr(val* self, val* p0, val* p1, val* p2);
extern const int COLOR_abstract_compiler__AbstractCompiler___64dcount_type_test_tags;
val* abstract_compiler__AbstractCompiler__count_type_test_tags(val* self);
void abstract_compiler__AbstractCompiler__count_type_test_tags_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompiler___64dcount_type_test_resolved;
val* abstract_compiler__AbstractCompiler__count_type_test_resolved(val* self);
void abstract_compiler__AbstractCompiler__count_type_test_resolved_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompiler___64dcount_type_test_unresolved;
val* abstract_compiler__AbstractCompiler__count_type_test_unresolved(val* self);
void abstract_compiler__AbstractCompiler__count_type_test_unresolved_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompiler___64dcount_type_test_skipped;
val* abstract_compiler__AbstractCompiler__count_type_test_skipped(val* self);
void abstract_compiler__AbstractCompiler__count_type_test_skipped_61d(val* self, val* p0);
val* NEW_hash_collection__HashMap(const struct type* type);
extern const struct type type_hash_collection__HashMapstring__Stringkernel__Int;
extern const int COLOR_hash_collection__HashMap__init;
void CHECK_NEW_hash_collection__HashMap(val*);
val* abstract_compiler__AbstractCompiler__init_count_type_test_tags(val* self);
extern const int COLOR_abstract_compiler__AbstractCompiler__init_count_type_test_tags;
extern const int COLOR_abstract_compiler__AbstractCompiler__count_type_test_resolved;
extern const int COLOR_abstract_compiler__AbstractCompiler__count_type_test_unresolved;
extern const int COLOR_abstract_compiler__AbstractCompiler__count_type_test_skipped;
extern const int COLOR_file__Object__printn;
extern const int COLOR_abstract_compiler__AbstractCompiler__div;
void abstract_compiler__AbstractCompiler__display_stats(val* self);
val* string__Float__to_precision(double self, long p0);
val* abstract_compiler__AbstractCompiler__div(val* self, long p0, long p1);
extern const int COLOR_abstract_compiler__AModule__finalize_ffi;
extern const int COLOR_abstract_compiler__AModule__finalize_nitni;
void abstract_compiler__AbstractCompiler__finalize_ffi_for_module(val* self, val* p0);
short int abstract_compiler__AbstractCompiler__supports_ffi(val* self);
extern const int COLOR_abstract_compiler__CodeFile___64dname;
val* abstract_compiler__CodeFile__name(val* self);
void abstract_compiler__CodeFile__name_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__CodeFile___64dwriters;
val* abstract_compiler__CodeFile__writers(val* self);
void abstract_compiler__CodeFile__writers_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__CodeFile___64drequired_declarations;
val* abstract_compiler__CodeFile__required_declarations(val* self);
void abstract_compiler__CodeFile__required_declarations_61d(val* self, val* p0);
void abstract_compiler__CodeFile__init(val* self, val* p0);
extern const int COLOR_abstract_compiler__CodeWriter___64dfile;
val* abstract_compiler__CodeWriter__file(val* self);
void abstract_compiler__CodeWriter__file_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__CodeWriter___64dlines;
val* abstract_compiler__CodeWriter__lines(val* self);
void abstract_compiler__CodeWriter__lines_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__CodeWriter___64ddecl_lines;
val* abstract_compiler__CodeWriter__decl_lines(val* self);
void abstract_compiler__CodeWriter__decl_lines_61d(val* self, val* p0);
void abstract_compiler__CodeWriter__add(val* self, val* p0);
void abstract_compiler__CodeWriter__add_decl(val* self, val* p0);
extern const int COLOR_abstract_compiler__CodeWriter__file_61d;
void abstract_compiler__CodeWriter__init(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor___64dcompiler;
val* abstract_compiler__AbstractCompilerVisitor__compiler(val* self);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor_VTCOMPILER;
void abstract_compiler__AbstractCompilerVisitor__compiler_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor___64dcurrent_node;
val* abstract_compiler__AbstractCompilerVisitor__current_node(val* self);
void abstract_compiler__AbstractCompilerVisitor__current_node_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor___64dframe;
val* abstract_compiler__AbstractCompilerVisitor__frame(val* self);
void abstract_compiler__AbstractCompilerVisitor__frame_61d(val* self, val* p0);
extern const int COLOR_model__MModule__object_type;
val* abstract_compiler__AbstractCompilerVisitor__object_type(val* self);
extern const int COLOR_model__MModule__bool_type;
val* abstract_compiler__AbstractCompilerVisitor__bool_type(val* self);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor___64dwriter;
val* abstract_compiler__AbstractCompilerVisitor__writer(val* self);
void abstract_compiler__AbstractCompilerVisitor__writer_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__compiler_61d;
val* NEW_abstract_compiler__CodeWriter(const struct type* type);
extern const struct type type_abstract_compiler__CodeWriter;
extern const int COLOR_abstract_collection__SequenceRead__last;
extern const int COLOR_abstract_compiler__CodeWriter__init;
void CHECK_NEW_abstract_compiler__CodeWriter(val*);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__writer_61d;
void abstract_compiler__AbstractCompilerVisitor__init(val* self, val* p0);
extern const int COLOR_model__MModule__get_primitive_class;
val* abstract_compiler__AbstractCompilerVisitor__get_class(val* self, val* p0);
extern const struct type type_model__MClassType;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__current_node;
extern const int COLOR_modelbuilder__ModelBuilder__force_get_primitive_method;
val* abstract_compiler__AbstractCompilerVisitor__get_property(val* self, val* p0, val* p1);
extern const int COLOR_typing__CallSite__mproperty;
val* abstract_compiler__AbstractCompilerVisitor__compile_callsite(val* self, val* p0, val* p1);
void abstract_compiler__AbstractCompilerVisitor__calloc_array(val* self, val* p0, val* p1);
void abstract_compiler__AbstractCompilerVisitor__native_array_def(val* self, val* p0, val* p1, val* p2);
extern const int COLOR_model__MSignature__vararg_rank;
extern const int COLOR_model__MSignature__arity;
val* NEW_range__Range(const struct type* type);
extern const struct type type_range__Rangekernel__Int;
extern const int COLOR_range__Range__without_last;
void CHECK_NEW_range__Range(val*);
extern const int COLOR_abstract_collection__SequenceRead___91d_93d;
extern const int COLOR_range__Range__init;
extern const int COLOR_model__MSignature__mparameters;
extern const int COLOR_model__MParameter__mtype;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__vararg_instance;
extern const int COLOR_abstract_collection__RemovableCollection__clear;
extern const int COLOR_abstract_collection__SimpleCollection__add_all;
void abstract_compiler__AbstractCompilerVisitor__varargize(val* self, val* p0, val* p1, val* p2);
extern const int COLOR_model__MType__need_anchor;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__frame;
extern const int COLOR_abstract_compiler__Frame__receiver;
extern const int COLOR_model__MType__anchor_to;
val* abstract_compiler__AbstractCompilerVisitor__anchor(val* self, val* p0);
extern const int COLOR_abstract_compiler__RuntimeVariable__mcasttype;
extern const int COLOR_model__MType__resolve_for;
val* abstract_compiler__AbstractCompilerVisitor__resolve_for(val* self, val* p0, val* p1);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__anchor;
extern const int COLOR_model__MType__is_subtype;
extern const struct type type_model__MNullableType;
extern const int COLOR_model__MNullableType__mtype;
val* NEW_abstract_compiler__RuntimeVariable(const struct type* type);
extern const struct type type_abstract_compiler__RuntimeVariable;
extern const int COLOR_abstract_compiler__RuntimeVariable__name;
extern const int COLOR_abstract_compiler__RuntimeVariable__init;
void CHECK_NEW_abstract_compiler__RuntimeVariable(val*);
val* abstract_compiler__AbstractCompilerVisitor__autoadapt(val* self, val* p0, val* p1);
val* abstract_compiler__AbstractCompilerVisitor__supercall(val* self, val* p0, val* p1, val* p2);
void abstract_compiler__AbstractCompilerVisitor__adapt_signature(val* self, val* p0, val* p1);
val* abstract_compiler__AbstractCompilerVisitor__autobox(val* self, val* p0, val* p1);
val* abstract_compiler__AbstractCompilerVisitor__type_test(val* self, val* p0, val* p1, val* p2);
val* abstract_compiler__AbstractCompilerVisitor__is_same_type_test(val* self, val* p0, val* p1);
val* abstract_compiler__AbstractCompilerVisitor__equal_test(val* self, val* p0, val* p1);
val* abstract_compiler__AbstractCompilerVisitor__call(val* self, val* p0, val* p1, val* p2);
val* abstract_compiler__AbstractCompilerVisitor__send(val* self, val* p0, val* p1);
extern const int COLOR_model__MProperty__lookup_first_definition;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__call;
val* abstract_compiler__AbstractCompilerVisitor__monomorphic_send(val* self, val* p0, val* p1, val* p2);
extern const int COLOR_model__MPropDef__lookup_next_definition;
val* abstract_compiler__AbstractCompilerVisitor__monomorphic_super_send(val* self, val* p0, val* p1, val* p2);
val* abstract_compiler__AbstractCompilerVisitor__isset_attribute(val* self, val* p0, val* p1);
val* abstract_compiler__AbstractCompilerVisitor__read_attribute(val* self, val* p0, val* p1);
void abstract_compiler__AbstractCompilerVisitor__write_attribute(val* self, val* p0, val* p1, val* p2);
extern const struct type type_model__MNullType;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__add_abort;
void abstract_compiler__AbstractCompilerVisitor__check_recv_notnull(val* self, val* p0);
void abstract_compiler__AbstractCompilerVisitor__check_init_instance(val* self, val* p0, val* p1);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor___64dnames;
val* abstract_compiler__AbstractCompilerVisitor__names(val* self);
void abstract_compiler__AbstractCompilerVisitor__names_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor___64dlast;
long abstract_compiler__AbstractCompilerVisitor__last(val* self);
void abstract_compiler__AbstractCompilerVisitor__last_61d(val* self, long p0);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__names;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__last;
val* string__Int__to_s(long self);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__last_61d;
val* abstract_compiler__AbstractCompilerVisitor__get_name(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__escapemark_names;
extern const int COLOR_scope__EscapeMark__name;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__get_name;
val* abstract_compiler__AbstractCompilerVisitor__escapemark_name(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor___64descapemark_names;
val* abstract_compiler__AbstractCompilerVisitor__escapemark_names(val* self);
void abstract_compiler__AbstractCompilerVisitor__escapemark_names_61d(val* self, val* p0);
val* abstract_compiler__AbstractCompilerVisitor__class_name_string(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor___64dvariables;
val* abstract_compiler__AbstractCompilerVisitor__variables(val* self);
void abstract_compiler__AbstractCompilerVisitor__variables_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__variables;
extern const int COLOR_scope__Variable__name;
extern const int COLOR_typing__Variable__declared_type;
extern const int COLOR_abstract_compiler__MType__ctype;
val* abstract_compiler__AbstractCompilerVisitor__variable(val* self, val* p0);
val* abstract_compiler__AbstractCompilerVisitor__new_var(val* self, val* p0);
val* abstract_compiler__AbstractCompilerVisitor__new_named_var(val* self, val* p0, val* p1);
extern const int COLOR_abstract_compiler__RuntimeVariable__mtype;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__autobox;
void abstract_compiler__AbstractCompilerVisitor__assign(val* self, val* p0, val* p1);
val* abstract_compiler__AbstractCompilerVisitor__init_instance(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__get_class;
extern const int COLOR_model__MClass__mclass_type;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__new_var;
val* abstract_compiler__AbstractCompilerVisitor__int_instance(val* self, long p0);
extern const int COLOR_string__AbstractString__escape_to_c;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__int_instance;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__get_property;
val* abstract_compiler__AbstractCompilerVisitor__string_instance(val* self, val* p0);
val* abstract_compiler__AbstractCompilerVisitor__array_instance(val* self, val* p0, val* p1);
val* abstract_compiler__AbstractCompilerVisitor__vararg_instance(val* self, val* p0, val* p1, val* p2, val* p3);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__writer;
void abstract_compiler__AbstractCompilerVisitor__add(val* self, val* p0);
void abstract_compiler__AbstractCompilerVisitor__add_decl(val* self, val* p0);
void abstract_compiler__AbstractCompilerVisitor__require_declaration(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompiler__provide_declaration;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__require_declaration;
void abstract_compiler__AbstractCompilerVisitor__declare_once(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__declare_once;
extern const int COLOR_abstract_compiler__AbstractCompiler__seen_extern;
void abstract_compiler__AbstractCompilerVisitor__add_extern(val* self, val* p0);
val* abstract_compiler__AbstractCompilerVisitor__new_expr(val* self, val* p0, val* p1);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__add_raw_abort;
void abstract_compiler__AbstractCompilerVisitor__add_abort(val* self, val* p0);
extern const int COLOR_parser_nodes__ANode__location;
extern const int COLOR_location__Location__file;
extern const int COLOR_location__SourceFile__filename;
extern const int COLOR_location__Location__line_start;
void abstract_compiler__AbstractCompilerVisitor__add_raw_abort(val* self);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__type_test;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__class_name_string;
void abstract_compiler__AbstractCompilerVisitor__add_cast(val* self, val* p0, val* p1, val* p2);
extern const int COLOR_abstract_compiler__Frame__returnvar;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__assign;
extern const int COLOR_abstract_compiler__Frame__returnlabel;
void abstract_compiler__AbstractCompilerVisitor__ret(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__current_node_61d;
extern const int COLOR_abstract_compiler__AExpr__stmt;
void abstract_compiler__AbstractCompilerVisitor__stmt(val* self, val* p0);
extern const int COLOR_abstract_compiler__AExpr__expr;
extern const int COLOR_typing__AExpr__mtype;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__autoadapt;
extern const int COLOR_typing__AExpr__implicit_cast_to;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__add_cast;
val* abstract_compiler__AbstractCompilerVisitor__expr(val* self, val* p0, val* p1);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__bool_type;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__expr;
val* abstract_compiler__AbstractCompilerVisitor__expr_bool(val* self, val* p0);
extern const int COLOR_parser_nodes__ANode__debug;
void abstract_compiler__AbstractCompilerVisitor__debug(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractRuntimeFunction___64dmmethoddef;
val* abstract_compiler__AbstractRuntimeFunction__mmethoddef(val* self);
void abstract_compiler__AbstractRuntimeFunction__mmethoddef_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractRuntimeFunction__c_name_cache;
extern const int COLOR_abstract_compiler__AbstractRuntimeFunction__build_c_name;
extern const int COLOR_abstract_compiler__AbstractRuntimeFunction__c_name_cache_61d;
val* abstract_compiler__AbstractRuntimeFunction__c_name(val* self);
val* abstract_compiler__AbstractRuntimeFunction__build_c_name(val* self);
extern const int COLOR_abstract_compiler__AbstractRuntimeFunction___64dc_name_cache;
val* abstract_compiler__AbstractRuntimeFunction__c_name_cache(val* self);
void abstract_compiler__AbstractRuntimeFunction__c_name_cache_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractRuntimeFunction_VTVISITOR;
val* abstract_compiler__AbstractRuntimeFunction__call(val* self, val* p0, val* p1);
extern const int COLOR_abstract_compiler__AbstractRuntimeFunction_VTCOMPILER;
void abstract_compiler__AbstractRuntimeFunction__compile_to_c(val* self, val* p0);
void abstract_compiler__AbstractRuntimeFunction__init(val* self, val* p0);
extern const int COLOR_abstract_compiler__RuntimeVariable___64dname;
val* abstract_compiler__RuntimeVariable__name(val* self);
void abstract_compiler__RuntimeVariable__name_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__RuntimeVariable___64dmtype;
val* abstract_compiler__RuntimeVariable__mtype(val* self);
void abstract_compiler__RuntimeVariable__mtype_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__RuntimeVariable___64dmcasttype;
val* abstract_compiler__RuntimeVariable__mcasttype(val* self);
void abstract_compiler__RuntimeVariable__mcasttype_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__RuntimeVariable___64dis_exact;
short int abstract_compiler__RuntimeVariable__is_exact(val* self);
void abstract_compiler__RuntimeVariable__is_exact_61d(val* self, short int p0);
extern const int COLOR_abstract_compiler__RuntimeVariable__name_61d;
extern const int COLOR_abstract_compiler__RuntimeVariable__mtype_61d;
extern const int COLOR_abstract_compiler__RuntimeVariable__mcasttype_61d;
void abstract_compiler__RuntimeVariable__init(val* self, val* p0, val* p1, val* p2);
val* abstract_compiler__RuntimeVariable__to_s(val* self);
extern const int COLOR_abstract_compiler__RuntimeVariable__is_exact;
val* abstract_compiler__RuntimeVariable__inspect(val* self);
extern const int COLOR_abstract_compiler__Frame___64dvisitor;
val* abstract_compiler__Frame__visitor(val* self);
extern const int COLOR_abstract_compiler__Frame_VTVISITOR;
void abstract_compiler__Frame__visitor_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__Frame___64dmpropdef;
val* abstract_compiler__Frame__mpropdef(val* self);
void abstract_compiler__Frame__mpropdef_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__Frame___64dreceiver;
val* abstract_compiler__Frame__receiver(val* self);
void abstract_compiler__Frame__receiver_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__Frame___64darguments;
val* abstract_compiler__Frame__arguments(val* self);
void abstract_compiler__Frame__arguments_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__Frame___64dreturnvar;
val* abstract_compiler__Frame__returnvar(val* self);
void abstract_compiler__Frame__returnvar_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__Frame___64dreturnlabel;
val* abstract_compiler__Frame__returnlabel(val* self);
void abstract_compiler__Frame__returnlabel_61d(val* self, val* p0);
void abstract_compiler__Frame__init(val* self, val* p0, val* p1, val* p2, val* p3);
val* abstract_compiler__MType__ctype(val* self);
val* abstract_compiler__MType__ctypename(val* self);
val* abstract_compiler__MType__c_name(val* self);
extern const int COLOR_abstract_compiler__MType___64dc_name_cache;
val* abstract_compiler__MType__c_name_cache(val* self);
void abstract_compiler__MType__c_name_cache_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__MType__c_name_cache;
extern const int COLOR_model__MClass__intro_mmodule;
extern const int COLOR_string__AbstractString__to_cmangle;
extern const int COLOR_model__MClass__name;
extern const int COLOR_abstract_compiler__MType__c_name_cache_61d;
val* abstract_compiler__MClassType__c_name(val* self);
extern const int COLOR_model__MClass__kind;
extern const int COLOR_model__Object__extern_kind;
val* abstract_compiler__MClassType__ctype(val* self);
val* abstract_compiler__MClassType__ctypename(val* self);
extern const int COLOR_abstract_compiler__MGenericType__c_name;
extern const int COLOR_model__MClassType__arguments;
extern const int COLOR_abstract_compiler__MType__c_name;
val* abstract_compiler__MGenericType__c_name(val* self);
extern const int COLOR_model__MParameterType__mclass;
extern const int COLOR_abstract_compiler__MClass__c_name;
extern const int COLOR_model__MParameterType__rank;
val* abstract_compiler__MParameterType__c_name(val* self);
extern const int COLOR_model__MVirtualType__mproperty;
extern const int COLOR_model__MProperty__intro;
extern const int COLOR_model__MPropDef__mclassdef;
extern const int COLOR_model__MClassDef__mclass;
extern const int COLOR_model__MProperty__name;
val* abstract_compiler__MVirtualType__c_name(val* self);
val* abstract_compiler__MNullableType__c_name(val* self);
extern const int COLOR_abstract_compiler__MClass__c_name_cache;
extern const int COLOR_abstract_compiler__MClass__c_name_cache_61d;
val* abstract_compiler__MClass__c_name(val* self);
extern const int COLOR_abstract_compiler__MClass___64dc_name_cache;
val* abstract_compiler__MClass__c_name_cache(val* self);
void abstract_compiler__MClass__c_name_cache_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__MProperty__c_name_cache;
extern const int COLOR_abstract_compiler__MPropDef__c_name;
extern const int COLOR_abstract_compiler__MProperty__c_name_cache_61d;
val* abstract_compiler__MProperty__c_name(val* self);
extern const int COLOR_abstract_compiler__MProperty___64dc_name_cache;
val* abstract_compiler__MProperty__c_name_cache(val* self);
void abstract_compiler__MProperty__c_name_cache_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__MPropDef___64dc_name_cache;
val* abstract_compiler__MPropDef__c_name_cache(val* self);
void abstract_compiler__MPropDef__c_name_cache_61d(val* self, val* p0);
extern const int COLOR_abstract_compiler__MPropDef__c_name_cache;
extern const int COLOR_model__MClassDef__mmodule;
extern const int COLOR_model__MPropDef__mproperty;
extern const int COLOR_abstract_compiler__MPropDef__c_name_cache_61d;
val* abstract_compiler__MPropDef__c_name(val* self);
extern const int COLOR_model__MPropDef_VTVISITOR;
extern const int COLOR_modelize_property__ModelBuilder__mpropdef2npropdef;
extern const int COLOR_abstract_compiler__APropdef__can_inline;
short int abstract_compiler__MMethodDef__can_inline(val* self, val* p0);
extern const int COLOR_abstract_compiler__MMethodDef__compile_parameter_check;
extern const int COLOR_abstract_compiler__APropdef__compile_to_c;
extern const int COLOR_abstract_compiler__AClassdef__compile_to_c;
val* abstract_compiler__MMethodDef__compile_inside_to_c(val* self, val* p0, val* p1);
extern const int COLOR_model__MMethodDef__msignature;
extern const int COLOR_model__MParameter__name;
extern const int COLOR_string__Object__inspect;
void abstract_compiler__MMethodDef__compile_parameter_check(val* self, val* p0, val* p1);
extern const int COLOR_string__Object__class_name;
void abstract_compiler__APropdef__compile_to_c(val* self, val* p0, val* p1, val* p2);
short int abstract_compiler__APropdef__can_inline(val* self);
extern const int COLOR_parser_nodes__AMethPropdef__n_signature;
extern const int COLOR_parser_nodes__ASignature__n_params;
extern const int COLOR_scope__AParam__variable;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__variable;
extern const int COLOR_auto_super_init__AConcreteMethPropdef__auto_super_inits;
extern const int COLOR_abstract_collection__Sequence__push;
extern const int COLOR_parser_nodes__AConcreteMethPropdef__n_block;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__stmt;
void abstract_compiler__AConcreteMethPropdef__compile_to_c(val* self, val* p0, val* p1, val* p2);
extern const int COLOR_modelize_property__APropdef__mpropdef;
extern const struct type type_parser_nodes__ABlockExpr;
extern const int COLOR_parser_nodes__ABlockExpr__n_expr;
short int abstract_compiler__AConcreteMethPropdef__can_inline(val* self);
extern const int COLOR_model__MSignature__return_mtype;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__resolve_for;
extern const int COLOR_kernel__Object___33d_61d;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__adapt_signature;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__ret;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__new_expr;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__equal_test;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__native_array_def;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__calloc_array;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__is_same_type_test;
void abstract_compiler__AInternMethPropdef__compile_to_c(val* self, val* p0, val* p1, val* p2);
extern const int COLOR_parser_nodes__AExternPropdef__n_extern;
extern const int COLOR_parser_nodes__Token__text;
extern const int COLOR_string__AbstractString__substring;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__add_extern;
void abstract_compiler__AExternMethPropdef__compile_to_c(val* self, val* p0, val* p1, val* p2);
extern const int COLOR_abstract_collection__Sequence__shift;
void abstract_compiler__AExternInitPropdef__compile_to_c(val* self, val* p0, val* p1, val* p2);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__read_attribute;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__write_attribute;
void abstract_compiler__AAttrPropdef__compile_to_c(val* self, val* p0, val* p1, val* p2);
extern const int COLOR_parser_nodes__AAttrPropdef__n_expr;
val* NEW_abstract_compiler__Frame(const struct type* type);
extern const struct type type_abstract_compiler__Frame;
extern const int COLOR_abstract_compiler__Frame__init;
void CHECK_NEW_abstract_compiler__Frame(val*);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__frame_61d;
extern const int COLOR_model__MAttributeDef__static_mtype;
void abstract_compiler__AAttrPropdef__init_expr(val* self, val* p0, val* p1);
void abstract_compiler__AAttrPropdef__check_expr(val* self, val* p0, val* p1);
extern const int COLOR_modelize_property__AClassdef__mfree_init;
extern const int COLOR_modelize_property__AClassdef__super_inits;
void abstract_compiler__AClassdef__compile_to_c(val* self, val* p0, val* p1, val* p2);
void abstract_compiler__ADeferredMethPropdef__compile_to_c(val* self, val* p0, val* p1, val* p2);
short int abstract_compiler__ADeferredMethPropdef__can_inline(val* self);
val* abstract_compiler__AExpr__expr(val* self, val* p0);
void abstract_compiler__AExpr__stmt(val* self, val* p0);
void abstract_compiler__ABlockExpr__stmt(val* self, val* p0);
val* abstract_compiler__ABlockExpr__expr(val* self, val* p0);
extern const int COLOR_scope__AVardeclExpr__variable;
extern const int COLOR_parser_nodes__AVardeclExpr__n_expr;
void abstract_compiler__AVardeclExpr__stmt(val* self, val* p0);
extern const int COLOR_scope__AVarFormExpr__variable;
val* abstract_compiler__AVarExpr__expr(val* self, val* p0);
extern const int COLOR_parser_nodes__AAssignFormExpr__n_value;
void abstract_compiler__AVarAssignExpr__stmt(val* self, val* p0);
val* abstract_compiler__AVarAssignExpr__expr(val* self, val* p0);
extern const int COLOR_parser_nodes__AReassignFormExpr__n_value;
extern const int COLOR_typing__AReassignFormExpr__reassign_callsite;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__compile_callsite;
void abstract_compiler__AVarReassignExpr__stmt(val* self, val* p0);
extern const int COLOR_abstract_compiler__Frame__arguments;
val* abstract_compiler__ASelfExpr__expr(val* self, val* p0);
extern const int COLOR_scope__AContinueExpr__escapemark;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__escapemark_name;
void abstract_compiler__AContinueExpr__stmt(val* self, val* p0);
extern const int COLOR_scope__ABreakExpr__escapemark;
void abstract_compiler__ABreakExpr__stmt(val* self, val* p0);
extern const int COLOR_parser_nodes__AReturnExpr__n_expr;
void abstract_compiler__AReturnExpr__stmt(val* self, val* p0);
void abstract_compiler__AAbortExpr__stmt(val* self, val* p0);
extern const int COLOR_parser_nodes__AIfExpr__n_expr;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__expr_bool;
extern const int COLOR_parser_nodes__AIfExpr__n_then;
extern const int COLOR_parser_nodes__AIfExpr__n_else;
void abstract_compiler__AIfExpr__stmt(val* self, val* p0);
val* abstract_compiler__AIfExpr__expr(val* self, val* p0);
extern const int COLOR_parser_nodes__AIfexprExpr__n_expr;
extern const int COLOR_parser_nodes__AIfexprExpr__n_then;
extern const int COLOR_parser_nodes__AIfexprExpr__n_else;
val* abstract_compiler__AIfexprExpr__expr(val* self, val* p0);
extern const int COLOR_parser_nodes__ADoExpr__n_block;
extern const int COLOR_scope__ADoExpr__escapemark;
void abstract_compiler__ADoExpr__stmt(val* self, val* p0);
extern const int COLOR_parser_nodes__AWhileExpr__n_expr;
extern const int COLOR_parser_nodes__AWhileExpr__n_block;
extern const int COLOR_scope__AWhileExpr__escapemark;
void abstract_compiler__AWhileExpr__stmt(val* self, val* p0);
extern const int COLOR_parser_nodes__ALoopExpr__n_block;
extern const int COLOR_scope__ALoopExpr__escapemark;
void abstract_compiler__ALoopExpr__stmt(val* self, val* p0);
extern const int COLOR_parser_nodes__AForExpr__n_expr;
extern const int COLOR_scope__AForExpr__variables;
extern const struct type type_parser_nodes__AOrangeExpr;
extern const int COLOR_parser_nodes__ARangeExpr__n_expr;
extern const int COLOR_parser_nodes__ARangeExpr__n_expr2;
extern const int COLOR_parser_nodes__AForExpr__n_block;
extern const int COLOR_scope__AForExpr__escapemark;
extern const int COLOR_typing__AForExpr__method_iterator;
extern const int COLOR_typing__AForExpr__method_is_ok;
extern const int COLOR_typing__AForExpr__method_item;
extern const int COLOR_typing__AForExpr__method_key;
extern const int COLOR_typing__AForExpr__method_next;
void abstract_compiler__AForExpr__stmt(val* self, val* p0);
extern const int COLOR_parser_nodes__AAssertExpr__n_expr;
extern const int COLOR_parser_nodes__AAssertExpr__n_else;
extern const int COLOR_parser_nodes__AAssertExpr__n_id;
void abstract_compiler__AAssertExpr__stmt(val* self, val* p0);
extern const int COLOR_parser_nodes__AOrExpr__n_expr;
extern const int COLOR_parser_nodes__AOrExpr__n_expr2;
val* abstract_compiler__AOrExpr__expr(val* self, val* p0);
extern const int COLOR_parser_nodes__AImpliesExpr__n_expr;
extern const int COLOR_parser_nodes__AImpliesExpr__n_expr2;
val* abstract_compiler__AImpliesExpr__expr(val* self, val* p0);
extern const int COLOR_parser_nodes__AAndExpr__n_expr;
extern const int COLOR_parser_nodes__AAndExpr__n_expr2;
val* abstract_compiler__AAndExpr__expr(val* self, val* p0);
extern const int COLOR_parser_nodes__ANotExpr__n_expr;
val* abstract_compiler__ANotExpr__expr(val* self, val* p0);
extern const int COLOR_parser_nodes__AOrElseExpr__n_expr;
extern const int COLOR_parser_nodes__AOrElseExpr__n_expr2;
val* abstract_compiler__AOrElseExpr__expr(val* self, val* p0);
extern const int COLOR_literal__AIntExpr__value;
val* abstract_compiler__AIntExpr__expr(val* self, val* p0);
extern const int COLOR_parser_nodes__AFloatExpr__n_float;
val* abstract_compiler__AFloatExpr__expr(val* self, val* p0);
extern const int COLOR_literal__ACharExpr__value;
val* abstract_compiler__ACharExpr__expr(val* self, val* p0);
extern const int COLOR_parser_nodes__AArrayExpr__n_exprs;
extern const int COLOR_parser_nodes__AExprs__n_exprs;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__array_instance;
val* abstract_compiler__AArrayExpr__expr(val* self, val* p0);
extern const int COLOR_literal__AStringFormExpr__value;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__string_instance;
val* abstract_compiler__AStringFormExpr__expr(val* self, val* p0);
extern const int COLOR_parser_nodes__ASuperstringExpr__n_exprs;
extern const struct type type_parser_nodes__AStringFormExpr;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__object_type;
val* abstract_compiler__ASuperstringExpr__expr(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__check_init_instance;
val* abstract_compiler__ACrangeExpr__expr(val* self, val* p0);
val* abstract_compiler__AOrangeExpr__expr(val* self, val* p0);
val* abstract_compiler__ATrueExpr__expr(val* self, val* p0);
val* abstract_compiler__AFalseExpr__expr(val* self, val* p0);
val* abstract_compiler__ANullExpr__expr(val* self, val* p0);
extern const int COLOR_parser_nodes__AIsaExpr__n_expr;
extern const int COLOR_typing__AIsaExpr__cast_type;
val* abstract_compiler__AIsaExpr__expr(val* self, val* p0);
extern const int COLOR_parser_nodes__AAsCastExpr__n_expr;
val* abstract_compiler__AAsCastExpr__expr(val* self, val* p0);
extern const int COLOR_parser_nodes__AAsNotnullExpr__n_expr;
val* abstract_compiler__AAsNotnullExpr__expr(val* self, val* p0);
extern const int COLOR_parser_nodes__AProxyExpr__n_expr;
val* abstract_compiler__AParExpr__expr(val* self, val* p0);
val* abstract_compiler__AOnceExpr__expr(val* self, val* p0);
extern const int COLOR_parser_nodes__ASendExpr__n_expr;
extern const int COLOR_typing__ASendExpr__raw_arguments;
extern const int COLOR_typing__ASendExpr__callsite;
val* abstract_compiler__ASendExpr__expr(val* self, val* p0);
extern const int COLOR_typing__ASendReassignFormExpr__write_callsite;
void abstract_compiler__ASendReassignFormExpr__stmt(val* self, val* p0);
extern const int COLOR_parser_nodes__ASuperExpr__n_args;
extern const int COLOR_typing__ASuperExpr__mproperty;
extern const int COLOR_abstract_compiler__Frame__mpropdef;
extern const struct type type_model__MMethodDef;
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__supercall;
val* abstract_compiler__ASuperExpr__expr(val* self, val* p0);
extern const int COLOR_parser_nodes__ANewExpr__n_args;
extern const int COLOR_typing__ANewExpr__callsite;
val* abstract_compiler__ANewExpr__expr(val* self, val* p0);
extern const int COLOR_parser_nodes__AAttrFormExpr__n_expr;
extern const int COLOR_typing__AAttrFormExpr__mproperty;
val* abstract_compiler__AAttrExpr__expr(val* self, val* p0);
void abstract_compiler__AAttrAssignExpr__stmt(val* self, val* p0);
void abstract_compiler__AAttrReassignExpr__stmt(val* self, val* p0);
extern const int COLOR_abstract_compiler__AbstractCompilerVisitor__isset_attribute;
val* abstract_compiler__AIssetAttrExpr__expr(val* self, val* p0);
void abstract_compiler__ADebugTypeExpr__stmt(val* self, val* p0);
extern const int COLOR_array__Arrayarray__Array_FT0;
val* abstract_compiler__Array___45d(val* self, val* p0);
extern const int COLOR_abstract_compiler__MModule__properties_cache;
extern const struct type type_hash_collection__HashSetmodel__MProperty;
extern const struct type type_array__Arraymodel__MClass;
extern const int COLOR_model__MModule__flatten_mclass_hierarchy;
extern const int COLOR_model__MClass__in_hierarchy;
extern const int COLOR_poset__POSetElement__direct_greaters;
extern const int COLOR_abstract_compiler__MModule__properties;
extern const int COLOR_model__MClass__mclassdefs;
extern const int COLOR_model__MClassDef__intro_mproperties;
val* abstract_compiler__MModule__properties(val* self, val* p0);
extern const int COLOR_abstract_compiler__MModule___64dproperties_cache;
val* abstract_compiler__MModule__properties_cache(val* self);
void abstract_compiler__MModule__properties_cache_61d(val* self, val* p0);
short int abstract_compiler__AModule__uses_legacy_ni(val* self);
void abstract_compiler__AModule__finalize_ffi(val* self, val* p0, val* p1);
void abstract_compiler__AModule__finalize_nitni(val* self, val* p0);
